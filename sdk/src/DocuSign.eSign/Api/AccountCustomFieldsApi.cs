/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountCustomFieldsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an existing account custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <returns></returns>
        void AccountCustomFieldsDeleteAccountCustomFields (string accountId, string customFieldId, string applyToTemplates = null);

        /// <summary>
        /// Delete an existing account custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AccountCustomFieldsDeleteAccountCustomFieldsWithHttpInfo (string accountId, string customFieldId, string applyToTemplates = null);
        /// <summary>
        /// Gets a list of custom fields associated with the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>AccountCustomFields</returns>
        AccountCustomFields AccountCustomFieldsGetAccountCustomFields (string accountId);

        /// <summary>
        /// Gets a list of custom fields associated with the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of AccountCustomFields</returns>
        ApiResponse<AccountCustomFields> AccountCustomFieldsGetAccountCustomFieldsWithHttpInfo (string accountId);
        /// <summary>
        /// Creates an acount custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>AccountCustomFields</returns>
        AccountCustomFields AccountCustomFieldsPostAccountCustomFields (string accountId, string applyToTemplates = null, CustomField customField = null);

        /// <summary>
        /// Creates an acount custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>ApiResponse of AccountCustomFields</returns>
        ApiResponse<AccountCustomFields> AccountCustomFieldsPostAccountCustomFieldsWithHttpInfo (string accountId, string applyToTemplates = null, CustomField customField = null);
        /// <summary>
        /// Updates an existing account custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>AccountCustomFields</returns>
        AccountCustomFields AccountCustomFieldsPutAccountCustomFields (string accountId, string customFieldId, string applyToTemplates = null, CustomField customField = null);

        /// <summary>
        /// Updates an existing account custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>ApiResponse of AccountCustomFields</returns>
        ApiResponse<AccountCustomFields> AccountCustomFieldsPutAccountCustomFieldsWithHttpInfo (string accountId, string customFieldId, string applyToTemplates = null, CustomField customField = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete an existing account custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AccountCustomFieldsDeleteAccountCustomFieldsAsync (string accountId, string customFieldId, string applyToTemplates = null);

        /// <summary>
        /// Delete an existing account custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountCustomFieldsDeleteAccountCustomFieldsAsyncWithHttpInfo (string accountId, string customFieldId, string applyToTemplates = null);
        /// <summary>
        /// Gets a list of custom fields associated with the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of AccountCustomFields</returns>
        System.Threading.Tasks.Task<AccountCustomFields> AccountCustomFieldsGetAccountCustomFieldsAsync (string accountId);

        /// <summary>
        /// Gets a list of custom fields associated with the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse (AccountCustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCustomFields>> AccountCustomFieldsGetAccountCustomFieldsAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Creates an acount custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>Task of AccountCustomFields</returns>
        System.Threading.Tasks.Task<AccountCustomFields> AccountCustomFieldsPostAccountCustomFieldsAsync (string accountId, string applyToTemplates = null, CustomField customField = null);

        /// <summary>
        /// Creates an acount custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountCustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCustomFields>> AccountCustomFieldsPostAccountCustomFieldsAsyncWithHttpInfo (string accountId, string applyToTemplates = null, CustomField customField = null);
        /// <summary>
        /// Updates an existing account custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>Task of AccountCustomFields</returns>
        System.Threading.Tasks.Task<AccountCustomFields> AccountCustomFieldsPutAccountCustomFieldsAsync (string accountId, string customFieldId, string applyToTemplates = null, CustomField customField = null);

        /// <summary>
        /// Updates an existing account custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountCustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCustomFields>> AccountCustomFieldsPutAccountCustomFieldsAsyncWithHttpInfo (string accountId, string customFieldId, string applyToTemplates = null, CustomField customField = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountCustomFieldsApi : IAccountCustomFieldsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountCustomFieldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountCustomFieldsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountCustomFieldsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountCustomFieldsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete an existing account custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <returns></returns>
        public void AccountCustomFieldsDeleteAccountCustomFields (string accountId, string customFieldId, string applyToTemplates = null)
        {
             AccountCustomFieldsDeleteAccountCustomFieldsWithHttpInfo(accountId, customFieldId, applyToTemplates);
        }

        /// <summary>
        /// Delete an existing account custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AccountCustomFieldsDeleteAccountCustomFieldsWithHttpInfo (string accountId, string customFieldId, string applyToTemplates = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountCustomFieldsApi->AccountCustomFieldsDeleteAccountCustomFields");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling AccountCustomFieldsApi->AccountCustomFieldsDeleteAccountCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/custom_fields/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customFieldId != null) localVarPathParams.Add("customFieldId", Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (applyToTemplates != null) localVarQueryParams.Add("apply_to_templates", Configuration.ApiClient.ParameterToString(applyToTemplates)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCustomFieldsDeleteAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an existing account custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AccountCustomFieldsDeleteAccountCustomFieldsAsync (string accountId, string customFieldId, string applyToTemplates = null)
        {
             await AccountCustomFieldsDeleteAccountCustomFieldsAsyncWithHttpInfo(accountId, customFieldId, applyToTemplates);

        }

        /// <summary>
        /// Delete an existing account custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AccountCustomFieldsDeleteAccountCustomFieldsAsyncWithHttpInfo (string accountId, string customFieldId, string applyToTemplates = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountCustomFieldsApi->AccountCustomFieldsDeleteAccountCustomFields");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling AccountCustomFieldsApi->AccountCustomFieldsDeleteAccountCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/custom_fields/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customFieldId != null) localVarPathParams.Add("customFieldId", Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (applyToTemplates != null) localVarQueryParams.Add("apply_to_templates", Configuration.ApiClient.ParameterToString(applyToTemplates)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCustomFieldsDeleteAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a list of custom fields associated with the account. Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>AccountCustomFields</returns>
        public AccountCustomFields AccountCustomFieldsGetAccountCustomFields (string accountId)
        {
             ApiResponse<AccountCustomFields> localVarResponse = AccountCustomFieldsGetAccountCustomFieldsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of custom fields associated with the account. Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of AccountCustomFields</returns>
        public ApiResponse< AccountCustomFields > AccountCustomFieldsGetAccountCustomFieldsWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountCustomFieldsApi->AccountCustomFieldsGetAccountCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCustomFieldsGetAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCustomFields)));
            
        }

        /// <summary>
        /// Gets a list of custom fields associated with the account. Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of AccountCustomFields</returns>
        public async System.Threading.Tasks.Task<AccountCustomFields> AccountCustomFieldsGetAccountCustomFieldsAsync (string accountId)
        {
             ApiResponse<AccountCustomFields> localVarResponse = await AccountCustomFieldsGetAccountCustomFieldsAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of custom fields associated with the account. Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse (AccountCustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountCustomFields>> AccountCustomFieldsGetAccountCustomFieldsAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountCustomFieldsApi->AccountCustomFieldsGetAccountCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCustomFieldsGetAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCustomFields)));
            
        }

        /// <summary>
        /// Creates an acount custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>AccountCustomFields</returns>
        public AccountCustomFields AccountCustomFieldsPostAccountCustomFields (string accountId, string applyToTemplates = null, CustomField customField = null)
        {
             ApiResponse<AccountCustomFields> localVarResponse = AccountCustomFieldsPostAccountCustomFieldsWithHttpInfo(accountId, applyToTemplates, customField);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an acount custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>ApiResponse of AccountCustomFields</returns>
        public ApiResponse< AccountCustomFields > AccountCustomFieldsPostAccountCustomFieldsWithHttpInfo (string accountId, string applyToTemplates = null, CustomField customField = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountCustomFieldsApi->AccountCustomFieldsPostAccountCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (applyToTemplates != null) localVarQueryParams.Add("apply_to_templates", Configuration.ApiClient.ParameterToString(applyToTemplates)); // query parameter
            if (customField != null && customField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCustomFieldsPostAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCustomFields)));
            
        }

        /// <summary>
        /// Creates an acount custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>Task of AccountCustomFields</returns>
        public async System.Threading.Tasks.Task<AccountCustomFields> AccountCustomFieldsPostAccountCustomFieldsAsync (string accountId, string applyToTemplates = null, CustomField customField = null)
        {
             ApiResponse<AccountCustomFields> localVarResponse = await AccountCustomFieldsPostAccountCustomFieldsAsyncWithHttpInfo(accountId, applyToTemplates, customField);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an acount custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountCustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountCustomFields>> AccountCustomFieldsPostAccountCustomFieldsAsyncWithHttpInfo (string accountId, string applyToTemplates = null, CustomField customField = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountCustomFieldsApi->AccountCustomFieldsPostAccountCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (applyToTemplates != null) localVarQueryParams.Add("apply_to_templates", Configuration.ApiClient.ParameterToString(applyToTemplates)); // query parameter
            if (customField != null && customField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCustomFieldsPostAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCustomFields)));
            
        }

        /// <summary>
        /// Updates an existing account custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>AccountCustomFields</returns>
        public AccountCustomFields AccountCustomFieldsPutAccountCustomFields (string accountId, string customFieldId, string applyToTemplates = null, CustomField customField = null)
        {
             ApiResponse<AccountCustomFields> localVarResponse = AccountCustomFieldsPutAccountCustomFieldsWithHttpInfo(accountId, customFieldId, applyToTemplates, customField);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing account custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>ApiResponse of AccountCustomFields</returns>
        public ApiResponse< AccountCustomFields > AccountCustomFieldsPutAccountCustomFieldsWithHttpInfo (string accountId, string customFieldId, string applyToTemplates = null, CustomField customField = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountCustomFieldsApi->AccountCustomFieldsPutAccountCustomFields");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling AccountCustomFieldsApi->AccountCustomFieldsPutAccountCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/custom_fields/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customFieldId != null) localVarPathParams.Add("customFieldId", Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (applyToTemplates != null) localVarQueryParams.Add("apply_to_templates", Configuration.ApiClient.ParameterToString(applyToTemplates)); // query parameter
            if (customField != null && customField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCustomFieldsPutAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCustomFields)));
            
        }

        /// <summary>
        /// Updates an existing account custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>Task of AccountCustomFields</returns>
        public async System.Threading.Tasks.Task<AccountCustomFields> AccountCustomFieldsPutAccountCustomFieldsAsync (string accountId, string customFieldId, string applyToTemplates = null, CustomField customField = null)
        {
             ApiResponse<AccountCustomFields> localVarResponse = await AccountCustomFieldsPutAccountCustomFieldsAsyncWithHttpInfo(accountId, customFieldId, applyToTemplates, customField);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing account custom field. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customFieldId"></param>
        /// <param name="applyToTemplates"> (optional)</param>
        /// <param name="customField"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountCustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountCustomFields>> AccountCustomFieldsPutAccountCustomFieldsAsyncWithHttpInfo (string accountId, string customFieldId, string applyToTemplates = null, CustomField customField = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountCustomFieldsApi->AccountCustomFieldsPutAccountCustomFields");
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
                throw new ApiException(400, "Missing required parameter 'customFieldId' when calling AccountCustomFieldsApi->AccountCustomFieldsPutAccountCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/custom_fields/{customFieldId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customFieldId != null) localVarPathParams.Add("customFieldId", Configuration.ApiClient.ParameterToString(customFieldId)); // path parameter
            if (applyToTemplates != null) localVarQueryParams.Add("apply_to_templates", Configuration.ApiClient.ParameterToString(applyToTemplates)); // query parameter
            if (customField != null && customField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCustomFieldsPutAccountCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCustomFields)));
            
        }

    }
}
