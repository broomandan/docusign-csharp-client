/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvelopeDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes documents from a draft envelope.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing draft envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>EnvelopeDocuments</returns>
        EnvelopeDocuments DocumentsDeleteDocuments (string accountId, string envelopeId, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Deletes documents from a draft envelope.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing draft envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeDocuments</returns>
        ApiResponse<EnvelopeDocuments> DocumentsDeleteDocumentsWithHttpInfo (string accountId, string envelopeId, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Gets a document from an envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.  The &#x60;{documentID}&#x60; parameter takes two special values:  | Value      | Description | | :- --       | :- -- | | &#x60;combined&#x60; | Retrieve a PDF that contains the combined content of all documents and the certificate. | | &#x60;archive&#x60;  | Retrieve a ZIP archive that contains all of the PDF documents, the certificate, and any .WAV files used for voice authentication. | 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="certificate">When set to **false**, the envelope signing certificate is removed from the download. (optional)</param>
        /// <param name="encoding"> (optional)</param>
        /// <param name="encrypt">When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API. (optional)</param>
        /// <param name="language">Specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es).  (optional)</param>
        /// <param name="recipientId"> (optional)</param>
        /// <param name="showChanges">When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red.  (optional)</param>
        /// <param name="watermark">When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark.  (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetDocument (string accountId, string documentId, string envelopeId, string certificate = null, string encoding = null, string encrypt = null, string language = null, string recipientId = null, string showChanges = null, string watermark = null);

        /// <summary>
        /// Gets a document from an envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.  The &#x60;{documentID}&#x60; parameter takes two special values:  | Value      | Description | | :- --       | :- -- | | &#x60;combined&#x60; | Retrieve a PDF that contains the combined content of all documents and the certificate. | | &#x60;archive&#x60;  | Retrieve a ZIP archive that contains all of the PDF documents, the certificate, and any .WAV files used for voice authentication. | 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="certificate">When set to **false**, the envelope signing certificate is removed from the download. (optional)</param>
        /// <param name="encoding"> (optional)</param>
        /// <param name="encrypt">When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API. (optional)</param>
        /// <param name="language">Specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es).  (optional)</param>
        /// <param name="recipientId"> (optional)</param>
        /// <param name="showChanges">When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red.  (optional)</param>
        /// <param name="watermark">When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark.  (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetDocumentWithHttpInfo (string accountId, string documentId, string envelopeId, string certificate = null, string encoding = null, string encrypt = null, string language = null, string recipientId = null, string showChanges = null, string watermark = null);
        /// <summary>
        /// Gets a list of envelope documents.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <returns>EnvelopeDocuments</returns>
        EnvelopeDocuments DocumentsGetDocuments (string accountId, string envelopeId, string includeMetadata = null);

        /// <summary>
        /// Gets a list of envelope documents.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <returns>ApiResponse of EnvelopeDocuments</returns>
        ApiResponse<EnvelopeDocuments> DocumentsGetDocumentsWithHttpInfo (string accountId, string envelopeId, string includeMetadata = null);
        /// <summary>
        /// Adds a document to an existing draft envelope.
        /// </summary>
        /// <remarks>
        /// Adds a document to an existing draft envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <returns></returns>
        void DocumentsPutDocument (string accountId, string documentId, string envelopeId, string applyDocumentFields = null);

        /// <summary>
        /// Adds a document to an existing draft envelope.
        /// </summary>
        /// <remarks>
        /// Adds a document to an existing draft envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsPutDocumentWithHttpInfo (string accountId, string documentId, string envelopeId, string applyDocumentFields = null);
        /// <summary>
        /// Adds one or more documents to an existing envelope document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing envelope document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>EnvelopeDocuments</returns>
        EnvelopeDocuments DocumentsPutDocuments (string accountId, string envelopeId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Adds one or more documents to an existing envelope document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing envelope document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeDocuments</returns>
        ApiResponse<EnvelopeDocuments> DocumentsPutDocumentsWithHttpInfo (string accountId, string envelopeId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes documents from a draft envelope.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing draft envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of EnvelopeDocuments</returns>
        System.Threading.Tasks.Task<EnvelopeDocuments> DocumentsDeleteDocumentsAsync (string accountId, string envelopeId, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Deletes documents from a draft envelope.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing draft envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeDocuments>> DocumentsDeleteDocumentsAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Gets a document from an envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.  The &#x60;{documentID}&#x60; parameter takes two special values:  | Value      | Description | | :- --       | :- -- | | &#x60;combined&#x60; | Retrieve a PDF that contains the combined content of all documents and the certificate. | | &#x60;archive&#x60;  | Retrieve a ZIP archive that contains all of the PDF documents, the certificate, and any .WAV files used for voice authentication. | 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="certificate">When set to **false**, the envelope signing certificate is removed from the download. (optional)</param>
        /// <param name="encoding"> (optional)</param>
        /// <param name="encrypt">When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API. (optional)</param>
        /// <param name="language">Specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es).  (optional)</param>
        /// <param name="recipientId"> (optional)</param>
        /// <param name="showChanges">When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red.  (optional)</param>
        /// <param name="watermark">When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark.  (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetDocumentAsync (string accountId, string documentId, string envelopeId, string certificate = null, string encoding = null, string encrypt = null, string language = null, string recipientId = null, string showChanges = null, string watermark = null);

        /// <summary>
        /// Gets a document from an envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.  The &#x60;{documentID}&#x60; parameter takes two special values:  | Value      | Description | | :- --       | :- -- | | &#x60;combined&#x60; | Retrieve a PDF that contains the combined content of all documents and the certificate. | | &#x60;archive&#x60;  | Retrieve a ZIP archive that contains all of the PDF documents, the certificate, and any .WAV files used for voice authentication. | 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="certificate">When set to **false**, the envelope signing certificate is removed from the download. (optional)</param>
        /// <param name="encoding"> (optional)</param>
        /// <param name="encrypt">When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API. (optional)</param>
        /// <param name="language">Specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es).  (optional)</param>
        /// <param name="recipientId"> (optional)</param>
        /// <param name="showChanges">When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red.  (optional)</param>
        /// <param name="watermark">When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark.  (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetDocumentAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string certificate = null, string encoding = null, string encrypt = null, string language = null, string recipientId = null, string showChanges = null, string watermark = null);
        /// <summary>
        /// Gets a list of envelope documents.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of EnvelopeDocuments</returns>
        System.Threading.Tasks.Task<EnvelopeDocuments> DocumentsGetDocumentsAsync (string accountId, string envelopeId, string includeMetadata = null);

        /// <summary>
        /// Gets a list of envelope documents.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeDocuments>> DocumentsGetDocumentsAsyncWithHttpInfo (string accountId, string envelopeId, string includeMetadata = null);
        /// <summary>
        /// Adds a document to an existing draft envelope.
        /// </summary>
        /// <remarks>
        /// Adds a document to an existing draft envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentsPutDocumentAsync (string accountId, string documentId, string envelopeId, string applyDocumentFields = null);

        /// <summary>
        /// Adds a document to an existing draft envelope.
        /// </summary>
        /// <remarks>
        /// Adds a document to an existing draft envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsPutDocumentAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string applyDocumentFields = null);
        /// <summary>
        /// Adds one or more documents to an existing envelope document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing envelope document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of EnvelopeDocuments</returns>
        System.Threading.Tasks.Task<EnvelopeDocuments> DocumentsPutDocumentsAsync (string accountId, string envelopeId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Adds one or more documents to an existing envelope document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing envelope document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeDocuments>> DocumentsPutDocumentsAsyncWithHttpInfo (string accountId, string envelopeId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnvelopeDocumentsApi : IEnvelopeDocumentsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvelopeDocumentsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeDocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvelopeDocumentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes documents from a draft envelope. Deletes one or more documents from an existing draft envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>EnvelopeDocuments</returns>
        public EnvelopeDocuments DocumentsDeleteDocuments (string accountId, string envelopeId, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<EnvelopeDocuments> localVarResponse = DocumentsDeleteDocumentsWithHttpInfo(accountId, envelopeId, envelopeDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes documents from a draft envelope. Deletes one or more documents from an existing draft envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeDocuments</returns>
        public ApiResponse< EnvelopeDocuments > DocumentsDeleteDocumentsWithHttpInfo (string accountId, string envelopeId, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeDocumentsApi->DocumentsDeleteDocuments");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeDocumentsApi->DocumentsDeleteDocuments");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsDeleteDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeDocuments)));
            
        }

        /// <summary>
        /// Deletes documents from a draft envelope. Deletes one or more documents from an existing draft envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of EnvelopeDocuments</returns>
        public async System.Threading.Tasks.Task<EnvelopeDocuments> DocumentsDeleteDocumentsAsync (string accountId, string envelopeId, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<EnvelopeDocuments> localVarResponse = await DocumentsDeleteDocumentsAsyncWithHttpInfo(accountId, envelopeId, envelopeDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes documents from a draft envelope. Deletes one or more documents from an existing draft envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeDocuments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeDocuments>> DocumentsDeleteDocumentsAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeDocumentsApi->DocumentsDeleteDocuments");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeDocumentsApi->DocumentsDeleteDocuments");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsDeleteDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeDocuments)));
            
        }

        /// <summary>
        /// Gets a document from an envelope. Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.  The &#x60;{documentID}&#x60; parameter takes two special values:  | Value      | Description | | :- --       | :- -- | | &#x60;combined&#x60; | Retrieve a PDF that contains the combined content of all documents and the certificate. | | &#x60;archive&#x60;  | Retrieve a ZIP archive that contains all of the PDF documents, the certificate, and any .WAV files used for voice authentication. | 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="certificate">When set to **false**, the envelope signing certificate is removed from the download. (optional)</param>
        /// <param name="encoding"> (optional)</param>
        /// <param name="encrypt">When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API. (optional)</param>
        /// <param name="language">Specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es).  (optional)</param>
        /// <param name="recipientId"> (optional)</param>
        /// <param name="showChanges">When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red.  (optional)</param>
        /// <param name="watermark">When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark.  (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetDocument (string accountId, string documentId, string envelopeId, string certificate = null, string encoding = null, string encrypt = null, string language = null, string recipientId = null, string showChanges = null, string watermark = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetDocumentWithHttpInfo(accountId, documentId, envelopeId, certificate, encoding, encrypt, language, recipientId, showChanges, watermark);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a document from an envelope. Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.  The &#x60;{documentID}&#x60; parameter takes two special values:  | Value      | Description | | :- --       | :- -- | | &#x60;combined&#x60; | Retrieve a PDF that contains the combined content of all documents and the certificate. | | &#x60;archive&#x60;  | Retrieve a ZIP archive that contains all of the PDF documents, the certificate, and any .WAV files used for voice authentication. | 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="certificate">When set to **false**, the envelope signing certificate is removed from the download. (optional)</param>
        /// <param name="encoding"> (optional)</param>
        /// <param name="encrypt">When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API. (optional)</param>
        /// <param name="language">Specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es).  (optional)</param>
        /// <param name="recipientId"> (optional)</param>
        /// <param name="showChanges">When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red.  (optional)</param>
        /// <param name="watermark">When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark.  (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetDocumentWithHttpInfo (string accountId, string documentId, string envelopeId, string certificate = null, string encoding = null, string encrypt = null, string language = null, string recipientId = null, string showChanges = null, string watermark = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeDocumentsApi->DocumentsGetDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopeDocumentsApi->DocumentsGetDocument");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeDocumentsApi->DocumentsGetDocument");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (certificate != null) localVarQueryParams.Add("certificate", Configuration.ApiClient.ParameterToString(certificate)); // query parameter
            if (encoding != null) localVarQueryParams.Add("encoding", Configuration.ApiClient.ParameterToString(encoding)); // query parameter
            if (encrypt != null) localVarQueryParams.Add("encrypt", Configuration.ApiClient.ParameterToString(encrypt)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (recipientId != null) localVarQueryParams.Add("recipient_id", Configuration.ApiClient.ParameterToString(recipientId)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter
            if (watermark != null) localVarQueryParams.Add("watermark", Configuration.ApiClient.ParameterToString(watermark)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Gets a document from an envelope. Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.  The &#x60;{documentID}&#x60; parameter takes two special values:  | Value      | Description | | :- --       | :- -- | | &#x60;combined&#x60; | Retrieve a PDF that contains the combined content of all documents and the certificate. | | &#x60;archive&#x60;  | Retrieve a ZIP archive that contains all of the PDF documents, the certificate, and any .WAV files used for voice authentication. | 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="certificate">When set to **false**, the envelope signing certificate is removed from the download. (optional)</param>
        /// <param name="encoding"> (optional)</param>
        /// <param name="encrypt">When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API. (optional)</param>
        /// <param name="language">Specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es).  (optional)</param>
        /// <param name="recipientId"> (optional)</param>
        /// <param name="showChanges">When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red.  (optional)</param>
        /// <param name="watermark">When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark.  (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetDocumentAsync (string accountId, string documentId, string envelopeId, string certificate = null, string encoding = null, string encrypt = null, string language = null, string recipientId = null, string showChanges = null, string watermark = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetDocumentAsyncWithHttpInfo(accountId, documentId, envelopeId, certificate, encoding, encrypt, language, recipientId, showChanges, watermark);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a document from an envelope. Retrieves the specified document from the envelope. If the account has the Highlight Data Changes feature enabled, there is an option to request that any changes in the envelope be highlighted.  The &#x60;{documentID}&#x60; parameter takes two special values:  | Value      | Description | | :- --       | :- -- | | &#x60;combined&#x60; | Retrieve a PDF that contains the combined content of all documents and the certificate. | | &#x60;archive&#x60;  | Retrieve a ZIP archive that contains all of the PDF documents, the certificate, and any .WAV files used for voice authentication. | 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="certificate">When set to **false**, the envelope signing certificate is removed from the download. (optional)</param>
        /// <param name="encoding"> (optional)</param>
        /// <param name="encrypt">When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API. (optional)</param>
        /// <param name="language">Specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es).  (optional)</param>
        /// <param name="recipientId"> (optional)</param>
        /// <param name="showChanges">When set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red.  (optional)</param>
        /// <param name="watermark">When set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark.  (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetDocumentAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string certificate = null, string encoding = null, string encrypt = null, string language = null, string recipientId = null, string showChanges = null, string watermark = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeDocumentsApi->DocumentsGetDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopeDocumentsApi->DocumentsGetDocument");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeDocumentsApi->DocumentsGetDocument");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (certificate != null) localVarQueryParams.Add("certificate", Configuration.ApiClient.ParameterToString(certificate)); // query parameter
            if (encoding != null) localVarQueryParams.Add("encoding", Configuration.ApiClient.ParameterToString(encoding)); // query parameter
            if (encrypt != null) localVarQueryParams.Add("encrypt", Configuration.ApiClient.ParameterToString(encrypt)); // query parameter
            if (language != null) localVarQueryParams.Add("language", Configuration.ApiClient.ParameterToString(language)); // query parameter
            if (recipientId != null) localVarQueryParams.Add("recipient_id", Configuration.ApiClient.ParameterToString(recipientId)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter
            if (watermark != null) localVarQueryParams.Add("watermark", Configuration.ApiClient.ParameterToString(watermark)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Gets a list of envelope documents. Retrieves a list of documents associated with the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <returns>EnvelopeDocuments</returns>
        public EnvelopeDocuments DocumentsGetDocuments (string accountId, string envelopeId, string includeMetadata = null)
        {
             ApiResponse<EnvelopeDocuments> localVarResponse = DocumentsGetDocumentsWithHttpInfo(accountId, envelopeId, includeMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of envelope documents. Retrieves a list of documents associated with the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <returns>ApiResponse of EnvelopeDocuments</returns>
        public ApiResponse< EnvelopeDocuments > DocumentsGetDocumentsWithHttpInfo (string accountId, string envelopeId, string includeMetadata = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeDocumentsApi->DocumentsGetDocuments");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeDocumentsApi->DocumentsGetDocuments");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.Add("include_metadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeDocuments)));
            
        }

        /// <summary>
        /// Gets a list of envelope documents. Retrieves a list of documents associated with the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of EnvelopeDocuments</returns>
        public async System.Threading.Tasks.Task<EnvelopeDocuments> DocumentsGetDocumentsAsync (string accountId, string envelopeId, string includeMetadata = null)
        {
             ApiResponse<EnvelopeDocuments> localVarResponse = await DocumentsGetDocumentsAsyncWithHttpInfo(accountId, envelopeId, includeMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of envelope documents. Retrieves a list of documents associated with the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeDocuments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeDocuments>> DocumentsGetDocumentsAsyncWithHttpInfo (string accountId, string envelopeId, string includeMetadata = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeDocumentsApi->DocumentsGetDocuments");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeDocumentsApi->DocumentsGetDocuments");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.Add("include_metadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeDocuments)));
            
        }

        /// <summary>
        /// Adds a document to an existing draft envelope. Adds a document to an existing draft envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <returns></returns>
        public void DocumentsPutDocument (string accountId, string documentId, string envelopeId, string applyDocumentFields = null)
        {
             DocumentsPutDocumentWithHttpInfo(accountId, documentId, envelopeId, applyDocumentFields);
        }

        /// <summary>
        /// Adds a document to an existing draft envelope. Adds a document to an existing draft envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsPutDocumentWithHttpInfo (string accountId, string documentId, string envelopeId, string applyDocumentFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeDocumentsApi->DocumentsPutDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopeDocumentsApi->DocumentsPutDocument");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeDocumentsApi->DocumentsPutDocument");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (applyDocumentFields != null) localVarQueryParams.Add("apply_document_fields", Configuration.ApiClient.ParameterToString(applyDocumentFields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsPutDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a document to an existing draft envelope. Adds a document to an existing draft envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentsPutDocumentAsync (string accountId, string documentId, string envelopeId, string applyDocumentFields = null)
        {
             await DocumentsPutDocumentAsyncWithHttpInfo(accountId, documentId, envelopeId, applyDocumentFields);

        }

        /// <summary>
        /// Adds a document to an existing draft envelope. Adds a document to an existing draft envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentsPutDocumentAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string applyDocumentFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeDocumentsApi->DocumentsPutDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopeDocumentsApi->DocumentsPutDocument");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeDocumentsApi->DocumentsPutDocument");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (applyDocumentFields != null) localVarQueryParams.Add("apply_document_fields", Configuration.ApiClient.ParameterToString(applyDocumentFields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsPutDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds one or more documents to an existing envelope document. Adds one or more documents to an existing envelope document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>EnvelopeDocuments</returns>
        public EnvelopeDocuments DocumentsPutDocuments (string accountId, string envelopeId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<EnvelopeDocuments> localVarResponse = DocumentsPutDocumentsWithHttpInfo(accountId, envelopeId, applyDocumentFields, envelopeDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds one or more documents to an existing envelope document. Adds one or more documents to an existing envelope document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeDocuments</returns>
        public ApiResponse< EnvelopeDocuments > DocumentsPutDocumentsWithHttpInfo (string accountId, string envelopeId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeDocumentsApi->DocumentsPutDocuments");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeDocumentsApi->DocumentsPutDocuments");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (applyDocumentFields != null) localVarQueryParams.Add("apply_document_fields", Configuration.ApiClient.ParameterToString(applyDocumentFields)); // query parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsPutDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeDocuments)));
            
        }

        /// <summary>
        /// Adds one or more documents to an existing envelope document. Adds one or more documents to an existing envelope document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of EnvelopeDocuments</returns>
        public async System.Threading.Tasks.Task<EnvelopeDocuments> DocumentsPutDocumentsAsync (string accountId, string envelopeId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<EnvelopeDocuments> localVarResponse = await DocumentsPutDocumentsAsyncWithHttpInfo(accountId, envelopeId, applyDocumentFields, envelopeDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds one or more documents to an existing envelope document. Adds one or more documents to an existing envelope document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeDocuments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeDocuments>> DocumentsPutDocumentsAsyncWithHttpInfo (string accountId, string envelopeId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeDocumentsApi->DocumentsPutDocuments");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeDocumentsApi->DocumentsPutDocuments");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (applyDocumentFields != null) localVarQueryParams.Add("apply_document_fields", Configuration.ApiClient.ParameterToString(applyDocumentFields)); // query parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsPutDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeDocuments)));
            
        }

    }
}
