/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvelopeCustomFieldsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes envelope custom fields for draft and in-process envelopes.
        /// </summary>
        /// <remarks>
        /// Deletes envelope custom fields for draft and in-process envelopes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>EnvelopeCustomFields</returns>
        EnvelopeCustomFields CustomFieldsDeleteCustomFields (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);

        /// <summary>
        /// Deletes envelope custom fields for draft and in-process envelopes.
        /// </summary>
        /// <remarks>
        /// Deletes envelope custom fields for draft and in-process envelopes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeCustomFields</returns>
        ApiResponse<EnvelopeCustomFields> CustomFieldsDeleteCustomFieldsWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);
        /// <summary>
        /// Gets the custom field information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>CustomFieldsEnvelope</returns>
        CustomFieldsEnvelope CustomFieldsGetCustomFields (string accountId, string envelopeId);

        /// <summary>
        /// Gets the custom field information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of CustomFieldsEnvelope</returns>
        ApiResponse<CustomFieldsEnvelope> CustomFieldsGetCustomFieldsWithHttpInfo (string accountId, string envelopeId);
        /// <summary>
        /// Updates envelope custom fields for an envelope.
        /// </summary>
        /// <remarks>
        /// Updates the envelope custom fields for draft and in-process envelopes.  Each custom field used in an envelope must have a unique name.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>EnvelopeCustomFields</returns>
        EnvelopeCustomFields CustomFieldsPostCustomFields (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);

        /// <summary>
        /// Updates envelope custom fields for an envelope.
        /// </summary>
        /// <remarks>
        /// Updates the envelope custom fields for draft and in-process envelopes.  Each custom field used in an envelope must have a unique name.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeCustomFields</returns>
        ApiResponse<EnvelopeCustomFields> CustomFieldsPostCustomFieldsWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);
        /// <summary>
        /// Updates envelope custom fields in an envelope.
        /// </summary>
        /// <remarks>
        /// Updates the envelope custom fields in draft and in-process envelopes.  Each custom field used in an envelope must have a unique name. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>EnvelopeCustomFields</returns>
        EnvelopeCustomFields CustomFieldsPutCustomFields (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);

        /// <summary>
        /// Updates envelope custom fields in an envelope.
        /// </summary>
        /// <remarks>
        /// Updates the envelope custom fields in draft and in-process envelopes.  Each custom field used in an envelope must have a unique name. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeCustomFields</returns>
        ApiResponse<EnvelopeCustomFields> CustomFieldsPutCustomFieldsWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes envelope custom fields for draft and in-process envelopes.
        /// </summary>
        /// <remarks>
        /// Deletes envelope custom fields for draft and in-process envelopes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of EnvelopeCustomFields</returns>
        System.Threading.Tasks.Task<EnvelopeCustomFields> CustomFieldsDeleteCustomFieldsAsync (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);

        /// <summary>
        /// Deletes envelope custom fields for draft and in-process envelopes.
        /// </summary>
        /// <remarks>
        /// Deletes envelope custom fields for draft and in-process envelopes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeCustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeCustomFields>> CustomFieldsDeleteCustomFieldsAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);
        /// <summary>
        /// Gets the custom field information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of CustomFieldsEnvelope</returns>
        System.Threading.Tasks.Task<CustomFieldsEnvelope> CustomFieldsGetCustomFieldsAsync (string accountId, string envelopeId);

        /// <summary>
        /// Gets the custom field information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (CustomFieldsEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldsEnvelope>> CustomFieldsGetCustomFieldsAsyncWithHttpInfo (string accountId, string envelopeId);
        /// <summary>
        /// Updates envelope custom fields for an envelope.
        /// </summary>
        /// <remarks>
        /// Updates the envelope custom fields for draft and in-process envelopes.  Each custom field used in an envelope must have a unique name.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of EnvelopeCustomFields</returns>
        System.Threading.Tasks.Task<EnvelopeCustomFields> CustomFieldsPostCustomFieldsAsync (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);

        /// <summary>
        /// Updates envelope custom fields for an envelope.
        /// </summary>
        /// <remarks>
        /// Updates the envelope custom fields for draft and in-process envelopes.  Each custom field used in an envelope must have a unique name.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeCustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeCustomFields>> CustomFieldsPostCustomFieldsAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);
        /// <summary>
        /// Updates envelope custom fields in an envelope.
        /// </summary>
        /// <remarks>
        /// Updates the envelope custom fields in draft and in-process envelopes.  Each custom field used in an envelope must have a unique name. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of EnvelopeCustomFields</returns>
        System.Threading.Tasks.Task<EnvelopeCustomFields> CustomFieldsPutCustomFieldsAsync (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);

        /// <summary>
        /// Updates envelope custom fields in an envelope.
        /// </summary>
        /// <remarks>
        /// Updates the envelope custom fields in draft and in-process envelopes.  Each custom field used in an envelope must have a unique name. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeCustomFields)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeCustomFields>> CustomFieldsPutCustomFieldsAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnvelopeCustomFieldsApi : IEnvelopeCustomFieldsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeCustomFieldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvelopeCustomFieldsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeCustomFieldsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvelopeCustomFieldsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes envelope custom fields for draft and in-process envelopes. Deletes envelope custom fields for draft and in-process envelopes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>EnvelopeCustomFields</returns>
        public EnvelopeCustomFields CustomFieldsDeleteCustomFields (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
             ApiResponse<EnvelopeCustomFields> localVarResponse = CustomFieldsDeleteCustomFieldsWithHttpInfo(accountId, envelopeId, envelopeCustomFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes envelope custom fields for draft and in-process envelopes. Deletes envelope custom fields for draft and in-process envelopes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeCustomFields</returns>
        public ApiResponse< EnvelopeCustomFields > CustomFieldsDeleteCustomFieldsWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeCustomFieldsApi->CustomFieldsDeleteCustomFields");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeCustomFieldsApi->CustomFieldsDeleteCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeCustomFields != null && envelopeCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeCustomFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomFieldsDeleteCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeCustomFields)));
            
        }

        /// <summary>
        /// Deletes envelope custom fields for draft and in-process envelopes. Deletes envelope custom fields for draft and in-process envelopes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of EnvelopeCustomFields</returns>
        public async System.Threading.Tasks.Task<EnvelopeCustomFields> CustomFieldsDeleteCustomFieldsAsync (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
             ApiResponse<EnvelopeCustomFields> localVarResponse = await CustomFieldsDeleteCustomFieldsAsyncWithHttpInfo(accountId, envelopeId, envelopeCustomFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes envelope custom fields for draft and in-process envelopes. Deletes envelope custom fields for draft and in-process envelopes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeCustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeCustomFields>> CustomFieldsDeleteCustomFieldsAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeCustomFieldsApi->CustomFieldsDeleteCustomFields");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeCustomFieldsApi->CustomFieldsDeleteCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeCustomFields != null && envelopeCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeCustomFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomFieldsDeleteCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeCustomFields)));
            
        }

        /// <summary>
        /// Gets the custom field information for the specified envelope. Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>CustomFieldsEnvelope</returns>
        public CustomFieldsEnvelope CustomFieldsGetCustomFields (string accountId, string envelopeId)
        {
             ApiResponse<CustomFieldsEnvelope> localVarResponse = CustomFieldsGetCustomFieldsWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom field information for the specified envelope. Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of CustomFieldsEnvelope</returns>
        public ApiResponse< CustomFieldsEnvelope > CustomFieldsGetCustomFieldsWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeCustomFieldsApi->CustomFieldsGetCustomFields");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeCustomFieldsApi->CustomFieldsGetCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomFieldsGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFieldsEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomFieldsEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFieldsEnvelope)));
            
        }

        /// <summary>
        /// Gets the custom field information for the specified envelope. Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of CustomFieldsEnvelope</returns>
        public async System.Threading.Tasks.Task<CustomFieldsEnvelope> CustomFieldsGetCustomFieldsAsync (string accountId, string envelopeId)
        {
             ApiResponse<CustomFieldsEnvelope> localVarResponse = await CustomFieldsGetCustomFieldsAsyncWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom field information for the specified envelope. Retrieves the custom field information for the specified envelope. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes, and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. With a list custom field, the sender selects the value of the field from a pre-made list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (CustomFieldsEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomFieldsEnvelope>> CustomFieldsGetCustomFieldsAsyncWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeCustomFieldsApi->CustomFieldsGetCustomFields");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeCustomFieldsApi->CustomFieldsGetCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomFieldsGetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomFieldsEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomFieldsEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFieldsEnvelope)));
            
        }

        /// <summary>
        /// Updates envelope custom fields for an envelope. Updates the envelope custom fields for draft and in-process envelopes.  Each custom field used in an envelope must have a unique name.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>EnvelopeCustomFields</returns>
        public EnvelopeCustomFields CustomFieldsPostCustomFields (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
             ApiResponse<EnvelopeCustomFields> localVarResponse = CustomFieldsPostCustomFieldsWithHttpInfo(accountId, envelopeId, envelopeCustomFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates envelope custom fields for an envelope. Updates the envelope custom fields for draft and in-process envelopes.  Each custom field used in an envelope must have a unique name.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeCustomFields</returns>
        public ApiResponse< EnvelopeCustomFields > CustomFieldsPostCustomFieldsWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeCustomFieldsApi->CustomFieldsPostCustomFields");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeCustomFieldsApi->CustomFieldsPostCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeCustomFields != null && envelopeCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeCustomFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomFieldsPostCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeCustomFields)));
            
        }

        /// <summary>
        /// Updates envelope custom fields for an envelope. Updates the envelope custom fields for draft and in-process envelopes.  Each custom field used in an envelope must have a unique name.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of EnvelopeCustomFields</returns>
        public async System.Threading.Tasks.Task<EnvelopeCustomFields> CustomFieldsPostCustomFieldsAsync (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
             ApiResponse<EnvelopeCustomFields> localVarResponse = await CustomFieldsPostCustomFieldsAsyncWithHttpInfo(accountId, envelopeId, envelopeCustomFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates envelope custom fields for an envelope. Updates the envelope custom fields for draft and in-process envelopes.  Each custom field used in an envelope must have a unique name.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeCustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeCustomFields>> CustomFieldsPostCustomFieldsAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeCustomFieldsApi->CustomFieldsPostCustomFields");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeCustomFieldsApi->CustomFieldsPostCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeCustomFields != null && envelopeCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeCustomFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomFieldsPostCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeCustomFields)));
            
        }

        /// <summary>
        /// Updates envelope custom fields in an envelope. Updates the envelope custom fields in draft and in-process envelopes.  Each custom field used in an envelope must have a unique name. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>EnvelopeCustomFields</returns>
        public EnvelopeCustomFields CustomFieldsPutCustomFields (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
             ApiResponse<EnvelopeCustomFields> localVarResponse = CustomFieldsPutCustomFieldsWithHttpInfo(accountId, envelopeId, envelopeCustomFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates envelope custom fields in an envelope. Updates the envelope custom fields in draft and in-process envelopes.  Each custom field used in an envelope must have a unique name. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeCustomFields</returns>
        public ApiResponse< EnvelopeCustomFields > CustomFieldsPutCustomFieldsWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeCustomFieldsApi->CustomFieldsPutCustomFields");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeCustomFieldsApi->CustomFieldsPutCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeCustomFields != null && envelopeCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeCustomFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomFieldsPutCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeCustomFields)));
            
        }

        /// <summary>
        /// Updates envelope custom fields in an envelope. Updates the envelope custom fields in draft and in-process envelopes.  Each custom field used in an envelope must have a unique name. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of EnvelopeCustomFields</returns>
        public async System.Threading.Tasks.Task<EnvelopeCustomFields> CustomFieldsPutCustomFieldsAsync (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
             ApiResponse<EnvelopeCustomFields> localVarResponse = await CustomFieldsPutCustomFieldsAsyncWithHttpInfo(accountId, envelopeId, envelopeCustomFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates envelope custom fields in an envelope. Updates the envelope custom fields in draft and in-process envelopes.  Each custom field used in an envelope must have a unique name. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeCustomFields"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeCustomFields)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeCustomFields>> CustomFieldsPutCustomFieldsAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeCustomFields envelopeCustomFields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeCustomFieldsApi->CustomFieldsPutCustomFields");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeCustomFieldsApi->CustomFieldsPutCustomFields");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/custom_fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeCustomFields != null && envelopeCustomFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeCustomFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeCustomFields; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomFieldsPutCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeCustomFields>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeCustomFields) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeCustomFields)));
            
        }

    }
}
