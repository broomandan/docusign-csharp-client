/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICloudStorageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath"> (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>CloudStorage</returns>
        CloudStorage CloudStorageFolderGetCloudStorageFolder (string accountId, string folderId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null);

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath"> (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>ApiResponse of CloudStorage</returns>
        ApiResponse<CloudStorage> CloudStorageFolderGetCloudStorageFolderWithHttpInfo (string accountId, string folderId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null);
        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath">A comma separated list of folder IDs included in the request.  (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>CloudStorage</returns>
        CloudStorage CloudStorageFolderGetCloudStorageFolderAll (string accountId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null);

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath">A comma separated list of folder IDs included in the request.  (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>ApiResponse of CloudStorage</returns>
        ApiResponse<CloudStorage> CloudStorageFolderGetCloudStorageFolderAllWithHttpInfo (string accountId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath"> (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>Task of CloudStorage</returns>
        System.Threading.Tasks.Task<CloudStorage> CloudStorageFolderGetCloudStorageFolderAsync (string accountId, string folderId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null);

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath"> (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorage>> CloudStorageFolderGetCloudStorageFolderAsyncWithHttpInfo (string accountId, string folderId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null);
        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath">A comma separated list of folder IDs included in the request.  (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>Task of CloudStorage</returns>
        System.Threading.Tasks.Task<CloudStorage> CloudStorageFolderGetCloudStorageFolderAllAsync (string accountId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null);

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath">A comma separated list of folder IDs included in the request.  (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorage>> CloudStorageFolderGetCloudStorageFolderAllAsyncWithHttpInfo (string accountId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CloudStorageApi : ICloudStorageApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudStorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CloudStorageApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudStorageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CloudStorageApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider. Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath"> (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>CloudStorage</returns>
        public CloudStorage CloudStorageFolderGetCloudStorageFolder (string accountId, string folderId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null)
        {
             ApiResponse<CloudStorage> localVarResponse = CloudStorageFolderGetCloudStorageFolderWithHttpInfo(accountId, folderId, serviceId, userId, cloudStorageFolderPath, count, order, orderBy, searchText, startPosition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider. Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath"> (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>ApiResponse of CloudStorage</returns>
        public ApiResponse< CloudStorage > CloudStorageFolderGetCloudStorageFolderWithHttpInfo (string accountId, string folderId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolder");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolder");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolder");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageFolderPath != null) localVarQueryParams.Add("cloud_storage_folder_path", Configuration.ApiClient.ParameterToString(cloudStorageFolderPath)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageFolderGetCloudStorageFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorage)));
            
        }

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider. Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath"> (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>Task of CloudStorage</returns>
        public async System.Threading.Tasks.Task<CloudStorage> CloudStorageFolderGetCloudStorageFolderAsync (string accountId, string folderId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null)
        {
             ApiResponse<CloudStorage> localVarResponse = await CloudStorageFolderGetCloudStorageFolderAsyncWithHttpInfo(accountId, folderId, serviceId, userId, cloudStorageFolderPath, count, order, orderBy, searchText, startPosition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of all the items from the specified cloud storage provider. Retrieves a list of all the items in all  the folders associated with the user from the specified cloud storage provider. You can limit the scope of the returned items by providing a comma separated list of folder IDs in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath"> (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorage>> CloudStorageFolderGetCloudStorageFolderAsyncWithHttpInfo (string accountId, string folderId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolder");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolder");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolder");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageFolderPath != null) localVarQueryParams.Add("cloud_storage_folder_path", Configuration.ApiClient.ParameterToString(cloudStorageFolderPath)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageFolderGetCloudStorageFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorage)));
            
        }

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath">A comma separated list of folder IDs included in the request.  (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>CloudStorage</returns>
        public CloudStorage CloudStorageFolderGetCloudStorageFolderAll (string accountId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null)
        {
             ApiResponse<CloudStorage> localVarResponse = CloudStorageFolderGetCloudStorageFolderAllWithHttpInfo(accountId, serviceId, userId, cloudStorageFolderPath, count, order, orderBy, searchText, startPosition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath">A comma separated list of folder IDs included in the request.  (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>ApiResponse of CloudStorage</returns>
        public ApiResponse< CloudStorage > CloudStorageFolderGetCloudStorageFolderAllWithHttpInfo (string accountId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolderAll");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolderAll");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolderAll");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageFolderPath != null) localVarQueryParams.Add("cloud_storage_folder_path", Configuration.ApiClient.ParameterToString(cloudStorageFolderPath)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageFolderGetCloudStorageFolderAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorage)));
            
        }

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath">A comma separated list of folder IDs included in the request.  (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>Task of CloudStorage</returns>
        public async System.Threading.Tasks.Task<CloudStorage> CloudStorageFolderGetCloudStorageFolderAllAsync (string accountId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null)
        {
             ApiResponse<CloudStorage> localVarResponse = await CloudStorageFolderGetCloudStorageFolderAllAsyncWithHttpInfo(accountId, serviceId, userId, cloudStorageFolderPath, count, order, orderBy, searchText, startPosition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a list of all the items in a specified folder from the specified cloud storage provider. Retrieves a list of all the items in a specified folder from the specified cloud storage provider. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageFolderPath">A comma separated list of folder IDs included in the request.  (optional)</param>
        /// <param name="count">An optional value that sets how many items are included in the response.   The default setting for this is 25.  (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="searchText"> (optional)</param>
        /// <param name="startPosition">Indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.   (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorage>> CloudStorageFolderGetCloudStorageFolderAllAsyncWithHttpInfo (string accountId, string serviceId, string userId, string cloudStorageFolderPath = null, string count = null, string order = null, string orderBy = null, string searchText = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolderAll");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolderAll");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageApi->CloudStorageFolderGetCloudStorageFolderAll");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageFolderPath != null) localVarQueryParams.Add("cloud_storage_folder_path", Configuration.ApiClient.ParameterToString(cloudStorageFolderPath)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageFolderGetCloudStorageFolderAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorage)));
            
        }

    }
}
