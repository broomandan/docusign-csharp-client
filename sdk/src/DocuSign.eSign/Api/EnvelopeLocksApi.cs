/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvelopeLocksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an envelope lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified envelope. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>EnvelopeLocks</returns>
        EnvelopeLocks LockDeleteEnvelopeLock (string accountId, string envelopeId);

        /// <summary>
        /// Deletes an envelope lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified envelope. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of EnvelopeLocks</returns>
        ApiResponse<EnvelopeLocks> LockDeleteEnvelopeLockWithHttpInfo (string accountId, string envelopeId);
        /// <summary>
        /// Gets envelope lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the envelope lock.  If the call is made by the locked by user and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>EnvelopeLocks</returns>
        EnvelopeLocks LockGetEnvelopeLock (string accountId, string envelopeId);

        /// <summary>
        /// Gets envelope lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the envelope lock.  If the call is made by the locked by user and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of EnvelopeLocks</returns>
        ApiResponse<EnvelopeLocks> LockGetEnvelopeLockWithHttpInfo (string accountId, string envelopeId);
        /// <summary>
        /// Lock an envelope.
        /// </summary>
        /// <remarks>
        /// Locks the specified envelope, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the envelope.  ###### Note: Users must have envelope locking capability enabled to use this function (userSetting &#x60;canLockEnvelopes&#x60; must be  set to true for the user).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>EnvelopeLocks</returns>
        EnvelopeLocks LockPostEnvelopeLock (string accountId, string envelopeId, LockRequest lockRequest = null);

        /// <summary>
        /// Lock an envelope.
        /// </summary>
        /// <remarks>
        /// Locks the specified envelope, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the envelope.  ###### Note: Users must have envelope locking capability enabled to use this function (userSetting &#x60;canLockEnvelopes&#x60; must be  set to true for the user).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeLocks</returns>
        ApiResponse<EnvelopeLocks> LockPostEnvelopeLockWithHttpInfo (string accountId, string envelopeId, LockRequest lockRequest = null);
        /// <summary>
        /// Updates an envelope lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified envelope. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>EnvelopeLocks</returns>
        EnvelopeLocks LockPutEnvelopeLock (string accountId, string envelopeId, LockRequest lockRequest = null);

        /// <summary>
        /// Updates an envelope lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified envelope. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeLocks</returns>
        ApiResponse<EnvelopeLocks> LockPutEnvelopeLockWithHttpInfo (string accountId, string envelopeId, LockRequest lockRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an envelope lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified envelope. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of EnvelopeLocks</returns>
        System.Threading.Tasks.Task<EnvelopeLocks> LockDeleteEnvelopeLockAsync (string accountId, string envelopeId);

        /// <summary>
        /// Deletes an envelope lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified envelope. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (EnvelopeLocks)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeLocks>> LockDeleteEnvelopeLockAsyncWithHttpInfo (string accountId, string envelopeId);
        /// <summary>
        /// Gets envelope lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the envelope lock.  If the call is made by the locked by user and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of EnvelopeLocks</returns>
        System.Threading.Tasks.Task<EnvelopeLocks> LockGetEnvelopeLockAsync (string accountId, string envelopeId);

        /// <summary>
        /// Gets envelope lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the envelope lock.  If the call is made by the locked by user and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (EnvelopeLocks)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeLocks>> LockGetEnvelopeLockAsyncWithHttpInfo (string accountId, string envelopeId);
        /// <summary>
        /// Lock an envelope.
        /// </summary>
        /// <remarks>
        /// Locks the specified envelope, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the envelope.  ###### Note: Users must have envelope locking capability enabled to use this function (userSetting &#x60;canLockEnvelopes&#x60; must be  set to true for the user).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of EnvelopeLocks</returns>
        System.Threading.Tasks.Task<EnvelopeLocks> LockPostEnvelopeLockAsync (string accountId, string envelopeId, LockRequest lockRequest = null);

        /// <summary>
        /// Lock an envelope.
        /// </summary>
        /// <remarks>
        /// Locks the specified envelope, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the envelope.  ###### Note: Users must have envelope locking capability enabled to use this function (userSetting &#x60;canLockEnvelopes&#x60; must be  set to true for the user).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeLocks)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeLocks>> LockPostEnvelopeLockAsyncWithHttpInfo (string accountId, string envelopeId, LockRequest lockRequest = null);
        /// <summary>
        /// Updates an envelope lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified envelope. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of EnvelopeLocks</returns>
        System.Threading.Tasks.Task<EnvelopeLocks> LockPutEnvelopeLockAsync (string accountId, string envelopeId, LockRequest lockRequest = null);

        /// <summary>
        /// Updates an envelope lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified envelope. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeLocks)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeLocks>> LockPutEnvelopeLockAsyncWithHttpInfo (string accountId, string envelopeId, LockRequest lockRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnvelopeLocksApi : IEnvelopeLocksApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeLocksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvelopeLocksApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeLocksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvelopeLocksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an envelope lock. Deletes the lock from the specified envelope. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>EnvelopeLocks</returns>
        public EnvelopeLocks LockDeleteEnvelopeLock (string accountId, string envelopeId)
        {
             ApiResponse<EnvelopeLocks> localVarResponse = LockDeleteEnvelopeLockWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an envelope lock. Deletes the lock from the specified envelope. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of EnvelopeLocks</returns>
        public ApiResponse< EnvelopeLocks > LockDeleteEnvelopeLockWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeLocksApi->LockDeleteEnvelopeLock");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeLocksApi->LockDeleteEnvelopeLock");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockDeleteEnvelopeLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeLocks)));
            
        }

        /// <summary>
        /// Deletes an envelope lock. Deletes the lock from the specified envelope. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of EnvelopeLocks</returns>
        public async System.Threading.Tasks.Task<EnvelopeLocks> LockDeleteEnvelopeLockAsync (string accountId, string envelopeId)
        {
             ApiResponse<EnvelopeLocks> localVarResponse = await LockDeleteEnvelopeLockAsyncWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an envelope lock. Deletes the lock from the specified envelope. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (EnvelopeLocks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeLocks>> LockDeleteEnvelopeLockAsyncWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeLocksApi->LockDeleteEnvelopeLock");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeLocksApi->LockDeleteEnvelopeLock");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockDeleteEnvelopeLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeLocks)));
            
        }

        /// <summary>
        /// Gets envelope lock information. Retrieves general information about the envelope lock.  If the call is made by the locked by user and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>EnvelopeLocks</returns>
        public EnvelopeLocks LockGetEnvelopeLock (string accountId, string envelopeId)
        {
             ApiResponse<EnvelopeLocks> localVarResponse = LockGetEnvelopeLockWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets envelope lock information. Retrieves general information about the envelope lock.  If the call is made by the locked by user and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of EnvelopeLocks</returns>
        public ApiResponse< EnvelopeLocks > LockGetEnvelopeLockWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeLocksApi->LockGetEnvelopeLock");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeLocksApi->LockGetEnvelopeLock");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockGetEnvelopeLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeLocks)));
            
        }

        /// <summary>
        /// Gets envelope lock information. Retrieves general information about the envelope lock.  If the call is made by the locked by user and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of EnvelopeLocks</returns>
        public async System.Threading.Tasks.Task<EnvelopeLocks> LockGetEnvelopeLockAsync (string accountId, string envelopeId)
        {
             ApiResponse<EnvelopeLocks> localVarResponse = await LockGetEnvelopeLockAsyncWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets envelope lock information. Retrieves general information about the envelope lock.  If the call is made by the locked by user and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (EnvelopeLocks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeLocks>> LockGetEnvelopeLockAsyncWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeLocksApi->LockGetEnvelopeLock");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeLocksApi->LockGetEnvelopeLock");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockGetEnvelopeLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeLocks)));
            
        }

        /// <summary>
        /// Lock an envelope. Locks the specified envelope, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the envelope.  ###### Note: Users must have envelope locking capability enabled to use this function (userSetting &#x60;canLockEnvelopes&#x60; must be  set to true for the user).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>EnvelopeLocks</returns>
        public EnvelopeLocks LockPostEnvelopeLock (string accountId, string envelopeId, LockRequest lockRequest = null)
        {
             ApiResponse<EnvelopeLocks> localVarResponse = LockPostEnvelopeLockWithHttpInfo(accountId, envelopeId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lock an envelope. Locks the specified envelope, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the envelope.  ###### Note: Users must have envelope locking capability enabled to use this function (userSetting &#x60;canLockEnvelopes&#x60; must be  set to true for the user).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeLocks</returns>
        public ApiResponse< EnvelopeLocks > LockPostEnvelopeLockWithHttpInfo (string accountId, string envelopeId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeLocksApi->LockPostEnvelopeLock");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeLocksApi->LockPostEnvelopeLock");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockPostEnvelopeLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeLocks)));
            
        }

        /// <summary>
        /// Lock an envelope. Locks the specified envelope, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the envelope.  ###### Note: Users must have envelope locking capability enabled to use this function (userSetting &#x60;canLockEnvelopes&#x60; must be  set to true for the user).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of EnvelopeLocks</returns>
        public async System.Threading.Tasks.Task<EnvelopeLocks> LockPostEnvelopeLockAsync (string accountId, string envelopeId, LockRequest lockRequest = null)
        {
             ApiResponse<EnvelopeLocks> localVarResponse = await LockPostEnvelopeLockAsyncWithHttpInfo(accountId, envelopeId, lockRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lock an envelope. Locks the specified envelope, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the envelope.  ###### Note: Users must have envelope locking capability enabled to use this function (userSetting &#x60;canLockEnvelopes&#x60; must be  set to true for the user).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeLocks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeLocks>> LockPostEnvelopeLockAsyncWithHttpInfo (string accountId, string envelopeId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeLocksApi->LockPostEnvelopeLock");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeLocksApi->LockPostEnvelopeLock");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockPostEnvelopeLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeLocks)));
            
        }

        /// <summary>
        /// Updates an envelope lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified envelope. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>EnvelopeLocks</returns>
        public EnvelopeLocks LockPutEnvelopeLock (string accountId, string envelopeId, LockRequest lockRequest = null)
        {
             ApiResponse<EnvelopeLocks> localVarResponse = LockPutEnvelopeLockWithHttpInfo(accountId, envelopeId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an envelope lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified envelope. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeLocks</returns>
        public ApiResponse< EnvelopeLocks > LockPutEnvelopeLockWithHttpInfo (string accountId, string envelopeId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeLocksApi->LockPutEnvelopeLock");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeLocksApi->LockPutEnvelopeLock");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockPutEnvelopeLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeLocks)));
            
        }

        /// <summary>
        /// Updates an envelope lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified envelope. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of EnvelopeLocks</returns>
        public async System.Threading.Tasks.Task<EnvelopeLocks> LockPutEnvelopeLockAsync (string accountId, string envelopeId, LockRequest lockRequest = null)
        {
             ApiResponse<EnvelopeLocks> localVarResponse = await LockPutEnvelopeLockAsyncWithHttpInfo(accountId, envelopeId, lockRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an envelope lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified envelope. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeLocks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeLocks>> LockPutEnvelopeLockAsyncWithHttpInfo (string accountId, string envelopeId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeLocksApi->LockPutEnvelopeLock");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeLocksApi->LockPutEnvelopeLock");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockPutEnvelopeLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeLocks)));
            
        }

    }
}
