/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectEventsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a Connect failure log entry.
        /// </summary>
        /// <remarks>
        /// Deletes the Connect failure log information for the specified entry.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns></returns>
        void ConnectFailuresDeleteConnectFailureLog (string accountId, string failureId);

        /// <summary>
        /// Deletes a Connect failure log entry.
        /// </summary>
        /// <remarks>
        /// Deletes the Connect failure log information for the specified entry.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConnectFailuresDeleteConnectFailureLogWithHttpInfo (string accountId, string failureId);
        /// <summary>
        /// Gets the Connect failure log information.
        /// </summary>
        /// <remarks>
        /// Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>ConnectEvents</returns>
        ConnectEvents ConnectFailuresGetConnectLogs (string accountId, string fromDate = null, string toDate = null);

        /// <summary>
        /// Gets the Connect failure log information.
        /// </summary>
        /// <remarks>
        /// Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>ApiResponse of ConnectEvents</returns>
        ApiResponse<ConnectEvents> ConnectFailuresGetConnectLogsWithHttpInfo (string accountId, string fromDate = null, string toDate = null);
        /// <summary>
        /// Deletes a specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Deletes a specified entry from the Connect Log. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns></returns>
        void ConnectLogDeleteConnectLog (string accountId, string logId);

        /// <summary>
        /// Deletes a specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Deletes a specified entry from the Connect Log. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConnectLogDeleteConnectLogWithHttpInfo (string accountId, string logId);
        /// <summary>
        /// Gets a list of Connect log entries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns></returns>
        void ConnectLogDeleteConnectLogs (string accountId);

        /// <summary>
        /// Gets a list of Connect log entries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConnectLogDeleteConnectLogsWithHttpInfo (string accountId);
        /// <summary>
        /// Get the specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="additionalInfo">When true, the connectDebugLog information is included in the response. (optional)</param>
        /// <returns>ConnectLog</returns>
        ConnectLog ConnectLogGetConnectLog (string accountId, string logId, string additionalInfo = null);

        /// <summary>
        /// Get the specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="additionalInfo">When true, the connectDebugLog information is included in the response. (optional)</param>
        /// <returns>ApiResponse of ConnectLog</returns>
        ApiResponse<ConnectLog> ConnectLogGetConnectLogWithHttpInfo (string accountId, string logId, string additionalInfo = null);
        /// <summary>
        /// Gets the Connect log.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>ConnectEvents</returns>
        ConnectEvents ConnectLogGetConnectLogs (string accountId, string fromDate = null, string toDate = null);

        /// <summary>
        /// Gets the Connect log.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>ApiResponse of ConnectEvents</returns>
        ApiResponse<ConnectEvents> ConnectLogGetConnectLogsWithHttpInfo (string accountId, string fromDate = null, string toDate = null);
        /// <summary>
        /// Republishes Connect information for multiple envelopes.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>ConnectFailureResults</returns>
        ConnectFailureResults ConnectPublishPutConnectRetry (string accountId, ConnectFailureFilter connectFailureFilter = null);

        /// <summary>
        /// Republishes Connect information for multiple envelopes.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>ApiResponse of ConnectFailureResults</returns>
        ApiResponse<ConnectFailureResults> ConnectPublishPutConnectRetryWithHttpInfo (string accountId, ConnectFailureFilter connectFailureFilter = null);
        /// <summary>
        /// Republishes Connect information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ConnectFailureResults</returns>
        ConnectFailureResults ConnectPublishPutConnectRetryByEnvelope (string accountId, string envelopeId);

        /// <summary>
        /// Republishes Connect information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of ConnectFailureResults</returns>
        ApiResponse<ConnectFailureResults> ConnectPublishPutConnectRetryByEnvelopeWithHttpInfo (string accountId, string envelopeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a Connect failure log entry.
        /// </summary>
        /// <remarks>
        /// Deletes the Connect failure log information for the specified entry.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConnectFailuresDeleteConnectFailureLogAsync (string accountId, string failureId);

        /// <summary>
        /// Deletes a Connect failure log entry.
        /// </summary>
        /// <remarks>
        /// Deletes the Connect failure log information for the specified entry.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConnectFailuresDeleteConnectFailureLogAsyncWithHttpInfo (string accountId, string failureId);
        /// <summary>
        /// Gets the Connect failure log information.
        /// </summary>
        /// <remarks>
        /// Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of ConnectEvents</returns>
        System.Threading.Tasks.Task<ConnectEvents> ConnectFailuresGetConnectLogsAsync (string accountId, string fromDate = null, string toDate = null);

        /// <summary>
        /// Gets the Connect failure log information.
        /// </summary>
        /// <remarks>
        /// Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of ApiResponse (ConnectEvents)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectEvents>> ConnectFailuresGetConnectLogsAsyncWithHttpInfo (string accountId, string fromDate = null, string toDate = null);
        /// <summary>
        /// Deletes a specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Deletes a specified entry from the Connect Log. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConnectLogDeleteConnectLogAsync (string accountId, string logId);

        /// <summary>
        /// Deletes a specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Deletes a specified entry from the Connect Log. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConnectLogDeleteConnectLogAsyncWithHttpInfo (string accountId, string logId);
        /// <summary>
        /// Gets a list of Connect log entries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConnectLogDeleteConnectLogsAsync (string accountId);

        /// <summary>
        /// Gets a list of Connect log entries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConnectLogDeleteConnectLogsAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Get the specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="additionalInfo">When true, the connectDebugLog information is included in the response. (optional)</param>
        /// <returns>Task of ConnectLog</returns>
        System.Threading.Tasks.Task<ConnectLog> ConnectLogGetConnectLogAsync (string accountId, string logId, string additionalInfo = null);

        /// <summary>
        /// Get the specified Connect log entry.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="additionalInfo">When true, the connectDebugLog information is included in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ConnectLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectLog>> ConnectLogGetConnectLogAsyncWithHttpInfo (string accountId, string logId, string additionalInfo = null);
        /// <summary>
        /// Gets the Connect log.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of ConnectEvents</returns>
        System.Threading.Tasks.Task<ConnectEvents> ConnectLogGetConnectLogsAsync (string accountId, string fromDate = null, string toDate = null);

        /// <summary>
        /// Gets the Connect log.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of ApiResponse (ConnectEvents)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectEvents>> ConnectLogGetConnectLogsAsyncWithHttpInfo (string accountId, string fromDate = null, string toDate = null);
        /// <summary>
        /// Republishes Connect information for multiple envelopes.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>Task of ConnectFailureResults</returns>
        System.Threading.Tasks.Task<ConnectFailureResults> ConnectPublishPutConnectRetryAsync (string accountId, ConnectFailureFilter connectFailureFilter = null);

        /// <summary>
        /// Republishes Connect information for multiple envelopes.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectFailureResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectFailureResults>> ConnectPublishPutConnectRetryAsyncWithHttpInfo (string accountId, ConnectFailureFilter connectFailureFilter = null);
        /// <summary>
        /// Republishes Connect information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ConnectFailureResults</returns>
        System.Threading.Tasks.Task<ConnectFailureResults> ConnectPublishPutConnectRetryByEnvelopeAsync (string accountId, string envelopeId);

        /// <summary>
        /// Republishes Connect information for the specified envelope.
        /// </summary>
        /// <remarks>
        /// Republishes Connect information for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (ConnectFailureResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectFailureResults>> ConnectPublishPutConnectRetryByEnvelopeAsyncWithHttpInfo (string accountId, string envelopeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConnectEventsApi : IConnectEventsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectEventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectEventsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectEventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConnectEventsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a Connect failure log entry. Deletes the Connect failure log information for the specified entry.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns></returns>
        public void ConnectFailuresDeleteConnectFailureLog (string accountId, string failureId)
        {
             ConnectFailuresDeleteConnectFailureLogWithHttpInfo(accountId, failureId);
        }

        /// <summary>
        /// Deletes a Connect failure log entry. Deletes the Connect failure log information for the specified entry.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConnectFailuresDeleteConnectFailureLogWithHttpInfo (string accountId, string failureId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectFailuresDeleteConnectFailureLog");
            // verify the required parameter 'failureId' is set
            if (failureId == null)
                throw new ApiException(400, "Missing required parameter 'failureId' when calling ConnectEventsApi->ConnectFailuresDeleteConnectFailureLog");

            var localVarPath = "/v2/accounts/{accountId}/connect/failures/{failureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (failureId != null) localVarPathParams.Add("failureId", Configuration.ApiClient.ParameterToString(failureId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectFailuresDeleteConnectFailureLog", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a Connect failure log entry. Deletes the Connect failure log information for the specified entry.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConnectFailuresDeleteConnectFailureLogAsync (string accountId, string failureId)
        {
             await ConnectFailuresDeleteConnectFailureLogAsyncWithHttpInfo(accountId, failureId);

        }

        /// <summary>
        /// Deletes a Connect failure log entry. Deletes the Connect failure log information for the specified entry.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="failureId">The ID of the failed connect log entry.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConnectFailuresDeleteConnectFailureLogAsyncWithHttpInfo (string accountId, string failureId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectFailuresDeleteConnectFailureLog");
            // verify the required parameter 'failureId' is set
            if (failureId == null)
                throw new ApiException(400, "Missing required parameter 'failureId' when calling ConnectEventsApi->ConnectFailuresDeleteConnectFailureLog");

            var localVarPath = "/v2/accounts/{accountId}/connect/failures/{failureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (failureId != null) localVarPathParams.Add("failureId", Configuration.ApiClient.ParameterToString(failureId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectFailuresDeleteConnectFailureLog", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the Connect failure log information. Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>ConnectEvents</returns>
        public ConnectEvents ConnectFailuresGetConnectLogs (string accountId, string fromDate = null, string toDate = null)
        {
             ApiResponse<ConnectEvents> localVarResponse = ConnectFailuresGetConnectLogsWithHttpInfo(accountId, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Connect failure log information. Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>ApiResponse of ConnectEvents</returns>
        public ApiResponse< ConnectEvents > ConnectFailuresGetConnectLogsWithHttpInfo (string accountId, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectFailuresGetConnectLogs");

            var localVarPath = "/v2/accounts/{accountId}/connect/failures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectFailuresGetConnectLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectEvents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectEvents) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectEvents)));
            
        }

        /// <summary>
        /// Gets the Connect failure log information. Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of ConnectEvents</returns>
        public async System.Threading.Tasks.Task<ConnectEvents> ConnectFailuresGetConnectLogsAsync (string accountId, string fromDate = null, string toDate = null)
        {
             ApiResponse<ConnectEvents> localVarResponse = await ConnectFailuresGetConnectLogsAsyncWithHttpInfo(accountId, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Connect failure log information. Retrieves the Connect Failure Log information. It can be used to determine which envelopes failed to post, so a republish request can be created.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of ApiResponse (ConnectEvents)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectEvents>> ConnectFailuresGetConnectLogsAsyncWithHttpInfo (string accountId, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectFailuresGetConnectLogs");

            var localVarPath = "/v2/accounts/{accountId}/connect/failures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectFailuresGetConnectLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectEvents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectEvents) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectEvents)));
            
        }

        /// <summary>
        /// Deletes a specified Connect log entry. Deletes a specified entry from the Connect Log. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns></returns>
        public void ConnectLogDeleteConnectLog (string accountId, string logId)
        {
             ConnectLogDeleteConnectLogWithHttpInfo(accountId, logId);
        }

        /// <summary>
        /// Deletes a specified Connect log entry. Deletes a specified entry from the Connect Log. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConnectLogDeleteConnectLogWithHttpInfo (string accountId, string logId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectLogDeleteConnectLog");
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling ConnectEventsApi->ConnectLogDeleteConnectLog");

            var localVarPath = "/v2/accounts/{accountId}/connect/logs/{logId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (logId != null) localVarPathParams.Add("logId", Configuration.ApiClient.ParameterToString(logId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectLogDeleteConnectLog", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a specified Connect log entry. Deletes a specified entry from the Connect Log. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConnectLogDeleteConnectLogAsync (string accountId, string logId)
        {
             await ConnectLogDeleteConnectLogAsyncWithHttpInfo(accountId, logId);

        }

        /// <summary>
        /// Deletes a specified Connect log entry. Deletes a specified entry from the Connect Log. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConnectLogDeleteConnectLogAsyncWithHttpInfo (string accountId, string logId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectLogDeleteConnectLog");
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling ConnectEventsApi->ConnectLogDeleteConnectLog");

            var localVarPath = "/v2/accounts/{accountId}/connect/logs/{logId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (logId != null) localVarPathParams.Add("logId", Configuration.ApiClient.ParameterToString(logId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectLogDeleteConnectLog", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a list of Connect log entries. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns></returns>
        public void ConnectLogDeleteConnectLogs (string accountId)
        {
             ConnectLogDeleteConnectLogsWithHttpInfo(accountId);
        }

        /// <summary>
        /// Gets a list of Connect log entries. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConnectLogDeleteConnectLogsWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectLogDeleteConnectLogs");

            var localVarPath = "/v2/accounts/{accountId}/connect/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectLogDeleteConnectLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a list of Connect log entries. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConnectLogDeleteConnectLogsAsync (string accountId)
        {
             await ConnectLogDeleteConnectLogsAsyncWithHttpInfo(accountId);

        }

        /// <summary>
        /// Gets a list of Connect log entries. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; property in the Connect configuration must be set to **true** to enable logging. If logging is not enabled, then no log entries are recorded.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConnectLogDeleteConnectLogsAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectLogDeleteConnectLogs");

            var localVarPath = "/v2/accounts/{accountId}/connect/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectLogDeleteConnectLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the specified Connect log entry. Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="additionalInfo">When true, the connectDebugLog information is included in the response. (optional)</param>
        /// <returns>ConnectLog</returns>
        public ConnectLog ConnectLogGetConnectLog (string accountId, string logId, string additionalInfo = null)
        {
             ApiResponse<ConnectLog> localVarResponse = ConnectLogGetConnectLogWithHttpInfo(accountId, logId, additionalInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the specified Connect log entry. Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="additionalInfo">When true, the connectDebugLog information is included in the response. (optional)</param>
        /// <returns>ApiResponse of ConnectLog</returns>
        public ApiResponse< ConnectLog > ConnectLogGetConnectLogWithHttpInfo (string accountId, string logId, string additionalInfo = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectLogGetConnectLog");
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling ConnectEventsApi->ConnectLogGetConnectLog");

            var localVarPath = "/v2/accounts/{accountId}/connect/logs/{logId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (logId != null) localVarPathParams.Add("logId", Configuration.ApiClient.ParameterToString(logId)); // path parameter
            if (additionalInfo != null) localVarQueryParams.Add("additional_info", Configuration.ApiClient.ParameterToString(additionalInfo)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectLogGetConnectLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectLog)));
            
        }

        /// <summary>
        /// Get the specified Connect log entry. Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="additionalInfo">When true, the connectDebugLog information is included in the response. (optional)</param>
        /// <returns>Task of ConnectLog</returns>
        public async System.Threading.Tasks.Task<ConnectLog> ConnectLogGetConnectLogAsync (string accountId, string logId, string additionalInfo = null)
        {
             ApiResponse<ConnectLog> localVarResponse = await ConnectLogGetConnectLogAsyncWithHttpInfo(accountId, logId, additionalInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the specified Connect log entry. Retrieves the specified Connect log entry for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="logId">The ID of the connect log entry</param>
        /// <param name="additionalInfo">When true, the connectDebugLog information is included in the response. (optional)</param>
        /// <returns>Task of ApiResponse (ConnectLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectLog>> ConnectLogGetConnectLogAsyncWithHttpInfo (string accountId, string logId, string additionalInfo = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectLogGetConnectLog");
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling ConnectEventsApi->ConnectLogGetConnectLog");

            var localVarPath = "/v2/accounts/{accountId}/connect/logs/{logId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (logId != null) localVarPathParams.Add("logId", Configuration.ApiClient.ParameterToString(logId)); // path parameter
            if (additionalInfo != null) localVarQueryParams.Add("additional_info", Configuration.ApiClient.ParameterToString(additionalInfo)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectLogGetConnectLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectLog)));
            
        }

        /// <summary>
        /// Gets the Connect log. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>ConnectEvents</returns>
        public ConnectEvents ConnectLogGetConnectLogs (string accountId, string fromDate = null, string toDate = null)
        {
             ApiResponse<ConnectEvents> localVarResponse = ConnectLogGetConnectLogsWithHttpInfo(accountId, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Connect log. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>ApiResponse of ConnectEvents</returns>
        public ApiResponse< ConnectEvents > ConnectLogGetConnectLogsWithHttpInfo (string accountId, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectLogGetConnectLogs");

            var localVarPath = "/v2/accounts/{accountId}/connect/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectLogGetConnectLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectEvents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectEvents) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectEvents)));
            
        }

        /// <summary>
        /// Gets the Connect log. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of ConnectEvents</returns>
        public async System.Threading.Tasks.Task<ConnectEvents> ConnectLogGetConnectLogsAsync (string accountId, string fromDate = null, string toDate = null)
        {
             ApiResponse<ConnectEvents> localVarResponse = await ConnectLogGetConnectLogsAsyncWithHttpInfo(accountId, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Connect log. Retrieves a list of connect log entries for your account.  ###### Note: The &#x60;enableLog&#x60; setting in the Connect configuration must be set to true to enable logging. If logging is not enabled, then no log entries are recorded. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of ApiResponse (ConnectEvents)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectEvents>> ConnectLogGetConnectLogsAsyncWithHttpInfo (string accountId, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectLogGetConnectLogs");

            var localVarPath = "/v2/accounts/{accountId}/connect/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectLogGetConnectLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectEvents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectEvents) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectEvents)));
            
        }

        /// <summary>
        /// Republishes Connect information for multiple envelopes. Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>ConnectFailureResults</returns>
        public ConnectFailureResults ConnectPublishPutConnectRetry (string accountId, ConnectFailureFilter connectFailureFilter = null)
        {
             ApiResponse<ConnectFailureResults> localVarResponse = ConnectPublishPutConnectRetryWithHttpInfo(accountId, connectFailureFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Republishes Connect information for multiple envelopes. Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>ApiResponse of ConnectFailureResults</returns>
        public ApiResponse< ConnectFailureResults > ConnectPublishPutConnectRetryWithHttpInfo (string accountId, ConnectFailureFilter connectFailureFilter = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectPublishPutConnectRetry");

            var localVarPath = "/v2/accounts/{accountId}/connect/envelopes/retry_queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectFailureFilter != null && connectFailureFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(connectFailureFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectFailureFilter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectPublishPutConnectRetry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectFailureResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectFailureResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectFailureResults)));
            
        }

        /// <summary>
        /// Republishes Connect information for multiple envelopes. Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>Task of ConnectFailureResults</returns>
        public async System.Threading.Tasks.Task<ConnectFailureResults> ConnectPublishPutConnectRetryAsync (string accountId, ConnectFailureFilter connectFailureFilter = null)
        {
             ApiResponse<ConnectFailureResults> localVarResponse = await ConnectPublishPutConnectRetryAsyncWithHttpInfo(accountId, connectFailureFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Republishes Connect information for multiple envelopes. Republishes Connect information for the  specified set of envelopes. The primary use is to republish Connect post failures by including envelope IDs for the envelopes that failed to post in the request. The list of envelope IDs that failed to post correctly can be retrieved by calling to [ML:GetConnectLog] retrieve the failure log.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectFailureFilter"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectFailureResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectFailureResults>> ConnectPublishPutConnectRetryAsyncWithHttpInfo (string accountId, ConnectFailureFilter connectFailureFilter = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectPublishPutConnectRetry");

            var localVarPath = "/v2/accounts/{accountId}/connect/envelopes/retry_queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectFailureFilter != null && connectFailureFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(connectFailureFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectFailureFilter; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectPublishPutConnectRetry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectFailureResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectFailureResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectFailureResults)));
            
        }

        /// <summary>
        /// Republishes Connect information for the specified envelope. Republishes Connect information for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ConnectFailureResults</returns>
        public ConnectFailureResults ConnectPublishPutConnectRetryByEnvelope (string accountId, string envelopeId)
        {
             ApiResponse<ConnectFailureResults> localVarResponse = ConnectPublishPutConnectRetryByEnvelopeWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Republishes Connect information for the specified envelope. Republishes Connect information for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of ConnectFailureResults</returns>
        public ApiResponse< ConnectFailureResults > ConnectPublishPutConnectRetryByEnvelopeWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectPublishPutConnectRetryByEnvelope");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling ConnectEventsApi->ConnectPublishPutConnectRetryByEnvelope");

            var localVarPath = "/v2/accounts/{accountId}/connect/envelopes/{envelopeId}/retry_queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectPublishPutConnectRetryByEnvelope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectFailureResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectFailureResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectFailureResults)));
            
        }

        /// <summary>
        /// Republishes Connect information for the specified envelope. Republishes Connect information for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ConnectFailureResults</returns>
        public async System.Threading.Tasks.Task<ConnectFailureResults> ConnectPublishPutConnectRetryByEnvelopeAsync (string accountId, string envelopeId)
        {
             ApiResponse<ConnectFailureResults> localVarResponse = await ConnectPublishPutConnectRetryByEnvelopeAsyncWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Republishes Connect information for the specified envelope. Republishes Connect information for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (ConnectFailureResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectFailureResults>> ConnectPublishPutConnectRetryByEnvelopeAsyncWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectEventsApi->ConnectPublishPutConnectRetryByEnvelope");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling ConnectEventsApi->ConnectPublishPutConnectRetryByEnvelope");

            var localVarPath = "/v2/accounts/{accountId}/connect/envelopes/{envelopeId}/retry_queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectPublishPutConnectRetryByEnvelope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectFailureResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectFailureResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectFailureResults)));
            
        }

    }
}
