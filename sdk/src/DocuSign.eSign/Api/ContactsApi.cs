/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Replaces a particular contact associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <returns>ContactUpdateResponse</returns>
        ContactUpdateResponse ContactsDeleteContactWithId (string accountId, string contactId);

        /// <summary>
        /// Replaces a particular contact associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <returns>ApiResponse of ContactUpdateResponse</returns>
        ApiResponse<ContactUpdateResponse> ContactsDeleteContactWithIdWithHttpInfo (string accountId, string contactId);
        /// <summary>
        /// Delete contacts associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ContactUpdateResponse</returns>
        ContactUpdateResponse ContactsDeleteContacts (string accountId, ContactModRequest contactModRequest = null);

        /// <summary>
        /// Delete contacts associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ApiResponse of ContactUpdateResponse</returns>
        ApiResponse<ContactUpdateResponse> ContactsDeleteContactsWithHttpInfo (string accountId, ContactModRequest contactModRequest = null);
        /// <summary>
        /// Gets a particular contact associated with the user&#39;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <param name="cloudProvider"> (optional)</param>
        /// <returns>ContactGetResponse</returns>
        ContactGetResponse ContactsGetContactById (string accountId, string contactId, string cloudProvider = null);

        /// <summary>
        /// Gets a particular contact associated with the user&#39;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <param name="cloudProvider"> (optional)</param>
        /// <returns>ApiResponse of ContactGetResponse</returns>
        ApiResponse<ContactGetResponse> ContactsGetContactByIdWithHttpInfo (string accountId, string contactId, string cloudProvider = null);
        /// <summary>
        /// Imports multiple new contacts into the contacts collection from CSV, JSON, or XML (based on content type).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ContactUpdateResponse</returns>
        ContactUpdateResponse ContactsPostContacts (string accountId, ContactModRequest contactModRequest = null);

        /// <summary>
        /// Imports multiple new contacts into the contacts collection from CSV, JSON, or XML (based on content type).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ApiResponse of ContactUpdateResponse</returns>
        ApiResponse<ContactUpdateResponse> ContactsPostContactsWithHttpInfo (string accountId, ContactModRequest contactModRequest = null);
        /// <summary>
        /// Replaces contacts associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ContactUpdateResponse</returns>
        ContactUpdateResponse ContactsPutContacts (string accountId, ContactModRequest contactModRequest = null);

        /// <summary>
        /// Replaces contacts associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ApiResponse of ContactUpdateResponse</returns>
        ApiResponse<ContactUpdateResponse> ContactsPutContactsWithHttpInfo (string accountId, ContactModRequest contactModRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Replaces a particular contact associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <returns>Task of ContactUpdateResponse</returns>
        System.Threading.Tasks.Task<ContactUpdateResponse> ContactsDeleteContactWithIdAsync (string accountId, string contactId);

        /// <summary>
        /// Replaces a particular contact associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <returns>Task of ApiResponse (ContactUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactUpdateResponse>> ContactsDeleteContactWithIdAsyncWithHttpInfo (string accountId, string contactId);
        /// <summary>
        /// Delete contacts associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ContactUpdateResponse</returns>
        System.Threading.Tasks.Task<ContactUpdateResponse> ContactsDeleteContactsAsync (string accountId, ContactModRequest contactModRequest = null);

        /// <summary>
        /// Delete contacts associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (ContactUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactUpdateResponse>> ContactsDeleteContactsAsyncWithHttpInfo (string accountId, ContactModRequest contactModRequest = null);
        /// <summary>
        /// Gets a particular contact associated with the user&#39;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <param name="cloudProvider"> (optional)</param>
        /// <returns>Task of ContactGetResponse</returns>
        System.Threading.Tasks.Task<ContactGetResponse> ContactsGetContactByIdAsync (string accountId, string contactId, string cloudProvider = null);

        /// <summary>
        /// Gets a particular contact associated with the user&#39;s account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <param name="cloudProvider"> (optional)</param>
        /// <returns>Task of ApiResponse (ContactGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactGetResponse>> ContactsGetContactByIdAsyncWithHttpInfo (string accountId, string contactId, string cloudProvider = null);
        /// <summary>
        /// Imports multiple new contacts into the contacts collection from CSV, JSON, or XML (based on content type).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ContactUpdateResponse</returns>
        System.Threading.Tasks.Task<ContactUpdateResponse> ContactsPostContactsAsync (string accountId, ContactModRequest contactModRequest = null);

        /// <summary>
        /// Imports multiple new contacts into the contacts collection from CSV, JSON, or XML (based on content type).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (ContactUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactUpdateResponse>> ContactsPostContactsAsyncWithHttpInfo (string accountId, ContactModRequest contactModRequest = null);
        /// <summary>
        /// Replaces contacts associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ContactUpdateResponse</returns>
        System.Threading.Tasks.Task<ContactUpdateResponse> ContactsPutContactsAsync (string accountId, ContactModRequest contactModRequest = null);

        /// <summary>
        /// Replaces contacts associated with an account for the DocuSign service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (ContactUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactUpdateResponse>> ContactsPutContactsAsyncWithHttpInfo (string accountId, ContactModRequest contactModRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Replaces a particular contact associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <returns>ContactUpdateResponse</returns>
        public ContactUpdateResponse ContactsDeleteContactWithId (string accountId, string contactId)
        {
             ApiResponse<ContactUpdateResponse> localVarResponse = ContactsDeleteContactWithIdWithHttpInfo(accountId, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces a particular contact associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <returns>ApiResponse of ContactUpdateResponse</returns>
        public ApiResponse< ContactUpdateResponse > ContactsDeleteContactWithIdWithHttpInfo (string accountId, string contactId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ContactsApi->ContactsDeleteContactWithId");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->ContactsDeleteContactWithId");

            var localVarPath = "/v2/accounts/{accountId}/contacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeleteContactWithId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactUpdateResponse)));
            
        }

        /// <summary>
        /// Replaces a particular contact associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <returns>Task of ContactUpdateResponse</returns>
        public async System.Threading.Tasks.Task<ContactUpdateResponse> ContactsDeleteContactWithIdAsync (string accountId, string contactId)
        {
             ApiResponse<ContactUpdateResponse> localVarResponse = await ContactsDeleteContactWithIdAsyncWithHttpInfo(accountId, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces a particular contact associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <returns>Task of ApiResponse (ContactUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactUpdateResponse>> ContactsDeleteContactWithIdAsyncWithHttpInfo (string accountId, string contactId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ContactsApi->ContactsDeleteContactWithId");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->ContactsDeleteContactWithId");

            var localVarPath = "/v2/accounts/{accountId}/contacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeleteContactWithId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactUpdateResponse)));
            
        }

        /// <summary>
        /// Delete contacts associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ContactUpdateResponse</returns>
        public ContactUpdateResponse ContactsDeleteContacts (string accountId, ContactModRequest contactModRequest = null)
        {
             ApiResponse<ContactUpdateResponse> localVarResponse = ContactsDeleteContactsWithHttpInfo(accountId, contactModRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete contacts associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ApiResponse of ContactUpdateResponse</returns>
        public ApiResponse< ContactUpdateResponse > ContactsDeleteContactsWithHttpInfo (string accountId, ContactModRequest contactModRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ContactsApi->ContactsDeleteContacts");

            var localVarPath = "/v2/accounts/{accountId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (contactModRequest != null && contactModRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactModRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactModRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeleteContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactUpdateResponse)));
            
        }

        /// <summary>
        /// Delete contacts associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ContactUpdateResponse</returns>
        public async System.Threading.Tasks.Task<ContactUpdateResponse> ContactsDeleteContactsAsync (string accountId, ContactModRequest contactModRequest = null)
        {
             ApiResponse<ContactUpdateResponse> localVarResponse = await ContactsDeleteContactsAsyncWithHttpInfo(accountId, contactModRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete contacts associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (ContactUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactUpdateResponse>> ContactsDeleteContactsAsyncWithHttpInfo (string accountId, ContactModRequest contactModRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ContactsApi->ContactsDeleteContacts");

            var localVarPath = "/v2/accounts/{accountId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (contactModRequest != null && contactModRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactModRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactModRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsDeleteContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactUpdateResponse)));
            
        }

        /// <summary>
        /// Gets a particular contact associated with the user&#39;s account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <param name="cloudProvider"> (optional)</param>
        /// <returns>ContactGetResponse</returns>
        public ContactGetResponse ContactsGetContactById (string accountId, string contactId, string cloudProvider = null)
        {
             ApiResponse<ContactGetResponse> localVarResponse = ContactsGetContactByIdWithHttpInfo(accountId, contactId, cloudProvider);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a particular contact associated with the user&#39;s account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <param name="cloudProvider"> (optional)</param>
        /// <returns>ApiResponse of ContactGetResponse</returns>
        public ApiResponse< ContactGetResponse > ContactsGetContactByIdWithHttpInfo (string accountId, string contactId, string cloudProvider = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ContactsApi->ContactsGetContactById");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->ContactsGetContactById");

            var localVarPath = "/v2/accounts/{accountId}/contacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (cloudProvider != null) localVarQueryParams.Add("cloud_provider", Configuration.ApiClient.ParameterToString(cloudProvider)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactGetResponse)));
            
        }

        /// <summary>
        /// Gets a particular contact associated with the user&#39;s account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <param name="cloudProvider"> (optional)</param>
        /// <returns>Task of ContactGetResponse</returns>
        public async System.Threading.Tasks.Task<ContactGetResponse> ContactsGetContactByIdAsync (string accountId, string contactId, string cloudProvider = null)
        {
             ApiResponse<ContactGetResponse> localVarResponse = await ContactsGetContactByIdAsyncWithHttpInfo(accountId, contactId, cloudProvider);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a particular contact associated with the user&#39;s account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactId">The unique identifier of a person in the contacts address book.</param>
        /// <param name="cloudProvider"> (optional)</param>
        /// <returns>Task of ApiResponse (ContactGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactGetResponse>> ContactsGetContactByIdAsyncWithHttpInfo (string accountId, string contactId, string cloudProvider = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ContactsApi->ContactsGetContactById");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->ContactsGetContactById");

            var localVarPath = "/v2/accounts/{accountId}/contacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (cloudProvider != null) localVarQueryParams.Add("cloud_provider", Configuration.ApiClient.ParameterToString(cloudProvider)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsGetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactGetResponse)));
            
        }

        /// <summary>
        /// Imports multiple new contacts into the contacts collection from CSV, JSON, or XML (based on content type). 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ContactUpdateResponse</returns>
        public ContactUpdateResponse ContactsPostContacts (string accountId, ContactModRequest contactModRequest = null)
        {
             ApiResponse<ContactUpdateResponse> localVarResponse = ContactsPostContactsWithHttpInfo(accountId, contactModRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Imports multiple new contacts into the contacts collection from CSV, JSON, or XML (based on content type). 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ApiResponse of ContactUpdateResponse</returns>
        public ApiResponse< ContactUpdateResponse > ContactsPostContactsWithHttpInfo (string accountId, ContactModRequest contactModRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ContactsApi->ContactsPostContacts");

            var localVarPath = "/v2/accounts/{accountId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (contactModRequest != null && contactModRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactModRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactModRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsPostContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactUpdateResponse)));
            
        }

        /// <summary>
        /// Imports multiple new contacts into the contacts collection from CSV, JSON, or XML (based on content type). 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ContactUpdateResponse</returns>
        public async System.Threading.Tasks.Task<ContactUpdateResponse> ContactsPostContactsAsync (string accountId, ContactModRequest contactModRequest = null)
        {
             ApiResponse<ContactUpdateResponse> localVarResponse = await ContactsPostContactsAsyncWithHttpInfo(accountId, contactModRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Imports multiple new contacts into the contacts collection from CSV, JSON, or XML (based on content type). 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (ContactUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactUpdateResponse>> ContactsPostContactsAsyncWithHttpInfo (string accountId, ContactModRequest contactModRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ContactsApi->ContactsPostContacts");

            var localVarPath = "/v2/accounts/{accountId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (contactModRequest != null && contactModRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactModRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactModRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsPostContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactUpdateResponse)));
            
        }

        /// <summary>
        /// Replaces contacts associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ContactUpdateResponse</returns>
        public ContactUpdateResponse ContactsPutContacts (string accountId, ContactModRequest contactModRequest = null)
        {
             ApiResponse<ContactUpdateResponse> localVarResponse = ContactsPutContactsWithHttpInfo(accountId, contactModRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces contacts associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>ApiResponse of ContactUpdateResponse</returns>
        public ApiResponse< ContactUpdateResponse > ContactsPutContactsWithHttpInfo (string accountId, ContactModRequest contactModRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ContactsApi->ContactsPutContacts");

            var localVarPath = "/v2/accounts/{accountId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (contactModRequest != null && contactModRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactModRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactModRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsPutContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactUpdateResponse)));
            
        }

        /// <summary>
        /// Replaces contacts associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ContactUpdateResponse</returns>
        public async System.Threading.Tasks.Task<ContactUpdateResponse> ContactsPutContactsAsync (string accountId, ContactModRequest contactModRequest = null)
        {
             ApiResponse<ContactUpdateResponse> localVarResponse = await ContactsPutContactsAsyncWithHttpInfo(accountId, contactModRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces contacts associated with an account for the DocuSign service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="contactModRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (ContactUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactUpdateResponse>> ContactsPutContactsAsyncWithHttpInfo (string accountId, ContactModRequest contactModRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ContactsApi->ContactsPutContacts");

            var localVarPath = "/v2/accounts/{accountId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (contactModRequest != null && contactModRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contactModRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactModRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactsPutContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactUpdateResponse)));
            
        }

    }
}
