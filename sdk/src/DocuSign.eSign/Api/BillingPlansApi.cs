/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBillingPlansApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Account Billing Plan
        /// </summary>
        /// <remarks>
        /// Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.  By default the successor plan and credit card information is included in the response. This information can be excluded from the response by adding the appropriate optional query string with the &#x60;setting&#x60; set to **false**.   Response  The response returns the billing plan information, including the currency code, for the plan. The &#x60;billingPlan&#x60; and &#x60;succesorPlans&#x60; property values are the same as those shown in the [ML:Get Billing Plan Details] reference. the &#x60;billingAddress&#x60; and &#x60;creditCardInformation&#x60; property values are the same as those shown in the [ML:Update Billing Plan] reference.  ###### Note: When credit card number information is shown, a mask is applied to the response so that only the last 4 digits of the card number are visible. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="includeCreditCardInformation">When set to **true**, excludes credit card information from the response. (optional)</param>
        /// <param name="includeMetadata">When set to **true**, the &#x60;canUpgrade&#x60; and &#x60;renewalStatus&#x60; properities are included the response and an array of &#x60;supportedCountries&#x60; property is added to the &#x60;billingAddress&#x60; information.  (optional)</param>
        /// <param name="includeSuccessorPlans">When set to **true**, excludes successor information from the response. (optional)</param>
        /// <returns>BillingPlans</returns>
        BillingPlans BillingPlanGetBillingPlan (string accountId, string includeCreditCardInformation = null, string includeMetadata = null, string includeSuccessorPlans = null);

        /// <summary>
        /// Get Account Billing Plan
        /// </summary>
        /// <remarks>
        /// Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.  By default the successor plan and credit card information is included in the response. This information can be excluded from the response by adding the appropriate optional query string with the &#x60;setting&#x60; set to **false**.   Response  The response returns the billing plan information, including the currency code, for the plan. The &#x60;billingPlan&#x60; and &#x60;succesorPlans&#x60; property values are the same as those shown in the [ML:Get Billing Plan Details] reference. the &#x60;billingAddress&#x60; and &#x60;creditCardInformation&#x60; property values are the same as those shown in the [ML:Update Billing Plan] reference.  ###### Note: When credit card number information is shown, a mask is applied to the response so that only the last 4 digits of the card number are visible. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="includeCreditCardInformation">When set to **true**, excludes credit card information from the response. (optional)</param>
        /// <param name="includeMetadata">When set to **true**, the &#x60;canUpgrade&#x60; and &#x60;renewalStatus&#x60; properities are included the response and an array of &#x60;supportedCountries&#x60; property is added to the &#x60;billingAddress&#x60; information.  (optional)</param>
        /// <param name="includeSuccessorPlans">When set to **true**, excludes successor information from the response. (optional)</param>
        /// <returns>ApiResponse of BillingPlans</returns>
        ApiResponse<BillingPlans> BillingPlanGetBillingPlanWithHttpInfo (string accountId, string includeCreditCardInformation = null, string includeMetadata = null, string includeSuccessorPlans = null);
        /// <summary>
        /// Get metadata for a given credit card.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>CreditCardInformation</returns>
        CreditCardInformation BillingPlanGetCreditCardInfo (string accountId);

        /// <summary>
        /// Get metadata for a given credit card.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of CreditCardInformation</returns>
        ApiResponse<CreditCardInformation> BillingPlanGetCreditCardInfoWithHttpInfo (string accountId);
        /// <summary>
        /// Updates the account billing plan.
        /// </summary>
        /// <remarks>
        /// Updates the billing plan information, billing address, and credit card information for the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="previewBillingPlan">When set to **true**, updates the account using a preview billing plan. (optional)</param>
        /// <param name="billingPlanInformation"> (optional)</param>
        /// <returns>BillingPlanUpdateResponse</returns>
        BillingPlanUpdateResponse BillingPlanPutBillingPlan (string accountId, string previewBillingPlan = null, BillingPlanInformation billingPlanInformation = null);

        /// <summary>
        /// Updates the account billing plan.
        /// </summary>
        /// <remarks>
        /// Updates the billing plan information, billing address, and credit card information for the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="previewBillingPlan">When set to **true**, updates the account using a preview billing plan. (optional)</param>
        /// <param name="billingPlanInformation"> (optional)</param>
        /// <returns>ApiResponse of BillingPlanUpdateResponse</returns>
        ApiResponse<BillingPlanUpdateResponse> BillingPlanPutBillingPlanWithHttpInfo (string accountId, string previewBillingPlan = null, BillingPlanInformation billingPlanInformation = null);
        /// <summary>
        /// Get the billing plan details.
        /// </summary>
        /// <remarks>
        /// Retrieves the billing plan details for the specified billing plan ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingPlanId">The ID of the billing plan being accessed.</param>
        /// <returns>BillingPlanResponse</returns>
        BillingPlanResponse BillingPlansGetBillingPlan (string billingPlanId);

        /// <summary>
        /// Get the billing plan details.
        /// </summary>
        /// <remarks>
        /// Retrieves the billing plan details for the specified billing plan ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingPlanId">The ID of the billing plan being accessed.</param>
        /// <returns>ApiResponse of BillingPlanResponse</returns>
        ApiResponse<BillingPlanResponse> BillingPlansGetBillingPlanWithHttpInfo (string billingPlanId);
        /// <summary>
        /// Gets the list of available billing plans.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the billing plans associated with a distributor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>BillingPlansResponse</returns>
        BillingPlansResponse BillingPlansGetBillingPlans ();

        /// <summary>
        /// Gets the list of available billing plans.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the billing plans associated with a distributor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BillingPlansResponse</returns>
        ApiResponse<BillingPlansResponse> BillingPlansGetBillingPlansWithHttpInfo ();
        /// <summary>
        /// Reserverd: Purchase additional envelopes.
        /// </summary>
        /// <remarks>
        /// Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="purchasedEnvelopesInformation"> (optional)</param>
        /// <returns></returns>
        void PurchasedEnvelopesPutPurchasedEnvelopes (string accountId, PurchasedEnvelopesInformation purchasedEnvelopesInformation = null);

        /// <summary>
        /// Reserverd: Purchase additional envelopes.
        /// </summary>
        /// <remarks>
        /// Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="purchasedEnvelopesInformation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PurchasedEnvelopesPutPurchasedEnvelopesWithHttpInfo (string accountId, PurchasedEnvelopesInformation purchasedEnvelopesInformation = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Account Billing Plan
        /// </summary>
        /// <remarks>
        /// Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.  By default the successor plan and credit card information is included in the response. This information can be excluded from the response by adding the appropriate optional query string with the &#x60;setting&#x60; set to **false**.   Response  The response returns the billing plan information, including the currency code, for the plan. The &#x60;billingPlan&#x60; and &#x60;succesorPlans&#x60; property values are the same as those shown in the [ML:Get Billing Plan Details] reference. the &#x60;billingAddress&#x60; and &#x60;creditCardInformation&#x60; property values are the same as those shown in the [ML:Update Billing Plan] reference.  ###### Note: When credit card number information is shown, a mask is applied to the response so that only the last 4 digits of the card number are visible. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="includeCreditCardInformation">When set to **true**, excludes credit card information from the response. (optional)</param>
        /// <param name="includeMetadata">When set to **true**, the &#x60;canUpgrade&#x60; and &#x60;renewalStatus&#x60; properities are included the response and an array of &#x60;supportedCountries&#x60; property is added to the &#x60;billingAddress&#x60; information.  (optional)</param>
        /// <param name="includeSuccessorPlans">When set to **true**, excludes successor information from the response. (optional)</param>
        /// <returns>Task of BillingPlans</returns>
        System.Threading.Tasks.Task<BillingPlans> BillingPlanGetBillingPlanAsync (string accountId, string includeCreditCardInformation = null, string includeMetadata = null, string includeSuccessorPlans = null);

        /// <summary>
        /// Get Account Billing Plan
        /// </summary>
        /// <remarks>
        /// Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.  By default the successor plan and credit card information is included in the response. This information can be excluded from the response by adding the appropriate optional query string with the &#x60;setting&#x60; set to **false**.   Response  The response returns the billing plan information, including the currency code, for the plan. The &#x60;billingPlan&#x60; and &#x60;succesorPlans&#x60; property values are the same as those shown in the [ML:Get Billing Plan Details] reference. the &#x60;billingAddress&#x60; and &#x60;creditCardInformation&#x60; property values are the same as those shown in the [ML:Update Billing Plan] reference.  ###### Note: When credit card number information is shown, a mask is applied to the response so that only the last 4 digits of the card number are visible. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="includeCreditCardInformation">When set to **true**, excludes credit card information from the response. (optional)</param>
        /// <param name="includeMetadata">When set to **true**, the &#x60;canUpgrade&#x60; and &#x60;renewalStatus&#x60; properities are included the response and an array of &#x60;supportedCountries&#x60; property is added to the &#x60;billingAddress&#x60; information.  (optional)</param>
        /// <param name="includeSuccessorPlans">When set to **true**, excludes successor information from the response. (optional)</param>
        /// <returns>Task of ApiResponse (BillingPlans)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingPlans>> BillingPlanGetBillingPlanAsyncWithHttpInfo (string accountId, string includeCreditCardInformation = null, string includeMetadata = null, string includeSuccessorPlans = null);
        /// <summary>
        /// Get metadata for a given credit card.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of CreditCardInformation</returns>
        System.Threading.Tasks.Task<CreditCardInformation> BillingPlanGetCreditCardInfoAsync (string accountId);

        /// <summary>
        /// Get metadata for a given credit card.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse (CreditCardInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditCardInformation>> BillingPlanGetCreditCardInfoAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Updates the account billing plan.
        /// </summary>
        /// <remarks>
        /// Updates the billing plan information, billing address, and credit card information for the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="previewBillingPlan">When set to **true**, updates the account using a preview billing plan. (optional)</param>
        /// <param name="billingPlanInformation"> (optional)</param>
        /// <returns>Task of BillingPlanUpdateResponse</returns>
        System.Threading.Tasks.Task<BillingPlanUpdateResponse> BillingPlanPutBillingPlanAsync (string accountId, string previewBillingPlan = null, BillingPlanInformation billingPlanInformation = null);

        /// <summary>
        /// Updates the account billing plan.
        /// </summary>
        /// <remarks>
        /// Updates the billing plan information, billing address, and credit card information for the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="previewBillingPlan">When set to **true**, updates the account using a preview billing plan. (optional)</param>
        /// <param name="billingPlanInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (BillingPlanUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingPlanUpdateResponse>> BillingPlanPutBillingPlanAsyncWithHttpInfo (string accountId, string previewBillingPlan = null, BillingPlanInformation billingPlanInformation = null);
        /// <summary>
        /// Get the billing plan details.
        /// </summary>
        /// <remarks>
        /// Retrieves the billing plan details for the specified billing plan ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingPlanId">The ID of the billing plan being accessed.</param>
        /// <returns>Task of BillingPlanResponse</returns>
        System.Threading.Tasks.Task<BillingPlanResponse> BillingPlansGetBillingPlanAsync (string billingPlanId);

        /// <summary>
        /// Get the billing plan details.
        /// </summary>
        /// <remarks>
        /// Retrieves the billing plan details for the specified billing plan ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingPlanId">The ID of the billing plan being accessed.</param>
        /// <returns>Task of ApiResponse (BillingPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingPlanResponse>> BillingPlansGetBillingPlanAsyncWithHttpInfo (string billingPlanId);
        /// <summary>
        /// Gets the list of available billing plans.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the billing plans associated with a distributor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BillingPlansResponse</returns>
        System.Threading.Tasks.Task<BillingPlansResponse> BillingPlansGetBillingPlansAsync ();

        /// <summary>
        /// Gets the list of available billing plans.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the billing plans associated with a distributor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BillingPlansResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingPlansResponse>> BillingPlansGetBillingPlansAsyncWithHttpInfo ();
        /// <summary>
        /// Reserverd: Purchase additional envelopes.
        /// </summary>
        /// <remarks>
        /// Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="purchasedEnvelopesInformation"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PurchasedEnvelopesPutPurchasedEnvelopesAsync (string accountId, PurchasedEnvelopesInformation purchasedEnvelopesInformation = null);

        /// <summary>
        /// Reserverd: Purchase additional envelopes.
        /// </summary>
        /// <remarks>
        /// Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="purchasedEnvelopesInformation"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PurchasedEnvelopesPutPurchasedEnvelopesAsyncWithHttpInfo (string accountId, PurchasedEnvelopesInformation purchasedEnvelopesInformation = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BillingPlansApi : IBillingPlansApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingPlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BillingPlansApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingPlansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BillingPlansApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Account Billing Plan Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.  By default the successor plan and credit card information is included in the response. This information can be excluded from the response by adding the appropriate optional query string with the &#x60;setting&#x60; set to **false**.   Response  The response returns the billing plan information, including the currency code, for the plan. The &#x60;billingPlan&#x60; and &#x60;succesorPlans&#x60; property values are the same as those shown in the [ML:Get Billing Plan Details] reference. the &#x60;billingAddress&#x60; and &#x60;creditCardInformation&#x60; property values are the same as those shown in the [ML:Update Billing Plan] reference.  ###### Note: When credit card number information is shown, a mask is applied to the response so that only the last 4 digits of the card number are visible. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="includeCreditCardInformation">When set to **true**, excludes credit card information from the response. (optional)</param>
        /// <param name="includeMetadata">When set to **true**, the &#x60;canUpgrade&#x60; and &#x60;renewalStatus&#x60; properities are included the response and an array of &#x60;supportedCountries&#x60; property is added to the &#x60;billingAddress&#x60; information.  (optional)</param>
        /// <param name="includeSuccessorPlans">When set to **true**, excludes successor information from the response. (optional)</param>
        /// <returns>BillingPlans</returns>
        public BillingPlans BillingPlanGetBillingPlan (string accountId, string includeCreditCardInformation = null, string includeMetadata = null, string includeSuccessorPlans = null)
        {
             ApiResponse<BillingPlans> localVarResponse = BillingPlanGetBillingPlanWithHttpInfo(accountId, includeCreditCardInformation, includeMetadata, includeSuccessorPlans);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Billing Plan Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.  By default the successor plan and credit card information is included in the response. This information can be excluded from the response by adding the appropriate optional query string with the &#x60;setting&#x60; set to **false**.   Response  The response returns the billing plan information, including the currency code, for the plan. The &#x60;billingPlan&#x60; and &#x60;succesorPlans&#x60; property values are the same as those shown in the [ML:Get Billing Plan Details] reference. the &#x60;billingAddress&#x60; and &#x60;creditCardInformation&#x60; property values are the same as those shown in the [ML:Update Billing Plan] reference.  ###### Note: When credit card number information is shown, a mask is applied to the response so that only the last 4 digits of the card number are visible. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="includeCreditCardInformation">When set to **true**, excludes credit card information from the response. (optional)</param>
        /// <param name="includeMetadata">When set to **true**, the &#x60;canUpgrade&#x60; and &#x60;renewalStatus&#x60; properities are included the response and an array of &#x60;supportedCountries&#x60; property is added to the &#x60;billingAddress&#x60; information.  (optional)</param>
        /// <param name="includeSuccessorPlans">When set to **true**, excludes successor information from the response. (optional)</param>
        /// <returns>ApiResponse of BillingPlans</returns>
        public ApiResponse< BillingPlans > BillingPlanGetBillingPlanWithHttpInfo (string accountId, string includeCreditCardInformation = null, string includeMetadata = null, string includeSuccessorPlans = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BillingPlansApi->BillingPlanGetBillingPlan");

            var localVarPath = "/v2/accounts/{accountId}/billing_plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (includeCreditCardInformation != null) localVarQueryParams.Add("include_credit_card_information", Configuration.ApiClient.ParameterToString(includeCreditCardInformation)); // query parameter
            if (includeMetadata != null) localVarQueryParams.Add("include_metadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter
            if (includeSuccessorPlans != null) localVarQueryParams.Add("include_successor_plans", Configuration.ApiClient.ParameterToString(includeSuccessorPlans)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPlanGetBillingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPlans>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPlans) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPlans)));
            
        }

        /// <summary>
        /// Get Account Billing Plan Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.  By default the successor plan and credit card information is included in the response. This information can be excluded from the response by adding the appropriate optional query string with the &#x60;setting&#x60; set to **false**.   Response  The response returns the billing plan information, including the currency code, for the plan. The &#x60;billingPlan&#x60; and &#x60;succesorPlans&#x60; property values are the same as those shown in the [ML:Get Billing Plan Details] reference. the &#x60;billingAddress&#x60; and &#x60;creditCardInformation&#x60; property values are the same as those shown in the [ML:Update Billing Plan] reference.  ###### Note: When credit card number information is shown, a mask is applied to the response so that only the last 4 digits of the card number are visible. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="includeCreditCardInformation">When set to **true**, excludes credit card information from the response. (optional)</param>
        /// <param name="includeMetadata">When set to **true**, the &#x60;canUpgrade&#x60; and &#x60;renewalStatus&#x60; properities are included the response and an array of &#x60;supportedCountries&#x60; property is added to the &#x60;billingAddress&#x60; information.  (optional)</param>
        /// <param name="includeSuccessorPlans">When set to **true**, excludes successor information from the response. (optional)</param>
        /// <returns>Task of BillingPlans</returns>
        public async System.Threading.Tasks.Task<BillingPlans> BillingPlanGetBillingPlanAsync (string accountId, string includeCreditCardInformation = null, string includeMetadata = null, string includeSuccessorPlans = null)
        {
             ApiResponse<BillingPlans> localVarResponse = await BillingPlanGetBillingPlanAsyncWithHttpInfo(accountId, includeCreditCardInformation, includeMetadata, includeSuccessorPlans);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Billing Plan Retrieves the billing plan information for the specified account, including the current billing plan, successor plans, billing address, and billing credit card.  By default the successor plan and credit card information is included in the response. This information can be excluded from the response by adding the appropriate optional query string with the &#x60;setting&#x60; set to **false**.   Response  The response returns the billing plan information, including the currency code, for the plan. The &#x60;billingPlan&#x60; and &#x60;succesorPlans&#x60; property values are the same as those shown in the [ML:Get Billing Plan Details] reference. the &#x60;billingAddress&#x60; and &#x60;creditCardInformation&#x60; property values are the same as those shown in the [ML:Update Billing Plan] reference.  ###### Note: When credit card number information is shown, a mask is applied to the response so that only the last 4 digits of the card number are visible. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="includeCreditCardInformation">When set to **true**, excludes credit card information from the response. (optional)</param>
        /// <param name="includeMetadata">When set to **true**, the &#x60;canUpgrade&#x60; and &#x60;renewalStatus&#x60; properities are included the response and an array of &#x60;supportedCountries&#x60; property is added to the &#x60;billingAddress&#x60; information.  (optional)</param>
        /// <param name="includeSuccessorPlans">When set to **true**, excludes successor information from the response. (optional)</param>
        /// <returns>Task of ApiResponse (BillingPlans)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingPlans>> BillingPlanGetBillingPlanAsyncWithHttpInfo (string accountId, string includeCreditCardInformation = null, string includeMetadata = null, string includeSuccessorPlans = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BillingPlansApi->BillingPlanGetBillingPlan");

            var localVarPath = "/v2/accounts/{accountId}/billing_plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (includeCreditCardInformation != null) localVarQueryParams.Add("include_credit_card_information", Configuration.ApiClient.ParameterToString(includeCreditCardInformation)); // query parameter
            if (includeMetadata != null) localVarQueryParams.Add("include_metadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter
            if (includeSuccessorPlans != null) localVarQueryParams.Add("include_successor_plans", Configuration.ApiClient.ParameterToString(includeSuccessorPlans)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPlanGetBillingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPlans>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPlans) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPlans)));
            
        }

        /// <summary>
        /// Get metadata for a given credit card. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>CreditCardInformation</returns>
        public CreditCardInformation BillingPlanGetCreditCardInfo (string accountId)
        {
             ApiResponse<CreditCardInformation> localVarResponse = BillingPlanGetCreditCardInfoWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata for a given credit card. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of CreditCardInformation</returns>
        public ApiResponse< CreditCardInformation > BillingPlanGetCreditCardInfoWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BillingPlansApi->BillingPlanGetCreditCardInfo");

            var localVarPath = "/v2/accounts/{accountId}/billing_plan/credit_card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPlanGetCreditCardInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditCardInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreditCardInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditCardInformation)));
            
        }

        /// <summary>
        /// Get metadata for a given credit card. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of CreditCardInformation</returns>
        public async System.Threading.Tasks.Task<CreditCardInformation> BillingPlanGetCreditCardInfoAsync (string accountId)
        {
             ApiResponse<CreditCardInformation> localVarResponse = await BillingPlanGetCreditCardInfoAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get metadata for a given credit card. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse (CreditCardInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditCardInformation>> BillingPlanGetCreditCardInfoAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BillingPlansApi->BillingPlanGetCreditCardInfo");

            var localVarPath = "/v2/accounts/{accountId}/billing_plan/credit_card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPlanGetCreditCardInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditCardInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreditCardInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditCardInformation)));
            
        }

        /// <summary>
        /// Updates the account billing plan. Updates the billing plan information, billing address, and credit card information for the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="previewBillingPlan">When set to **true**, updates the account using a preview billing plan. (optional)</param>
        /// <param name="billingPlanInformation"> (optional)</param>
        /// <returns>BillingPlanUpdateResponse</returns>
        public BillingPlanUpdateResponse BillingPlanPutBillingPlan (string accountId, string previewBillingPlan = null, BillingPlanInformation billingPlanInformation = null)
        {
             ApiResponse<BillingPlanUpdateResponse> localVarResponse = BillingPlanPutBillingPlanWithHttpInfo(accountId, previewBillingPlan, billingPlanInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the account billing plan. Updates the billing plan information, billing address, and credit card information for the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="previewBillingPlan">When set to **true**, updates the account using a preview billing plan. (optional)</param>
        /// <param name="billingPlanInformation"> (optional)</param>
        /// <returns>ApiResponse of BillingPlanUpdateResponse</returns>
        public ApiResponse< BillingPlanUpdateResponse > BillingPlanPutBillingPlanWithHttpInfo (string accountId, string previewBillingPlan = null, BillingPlanInformation billingPlanInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BillingPlansApi->BillingPlanPutBillingPlan");

            var localVarPath = "/v2/accounts/{accountId}/billing_plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (previewBillingPlan != null) localVarQueryParams.Add("preview_billing_plan", Configuration.ApiClient.ParameterToString(previewBillingPlan)); // query parameter
            if (billingPlanInformation != null && billingPlanInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(billingPlanInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billingPlanInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPlanPutBillingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPlanUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPlanUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPlanUpdateResponse)));
            
        }

        /// <summary>
        /// Updates the account billing plan. Updates the billing plan information, billing address, and credit card information for the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="previewBillingPlan">When set to **true**, updates the account using a preview billing plan. (optional)</param>
        /// <param name="billingPlanInformation"> (optional)</param>
        /// <returns>Task of BillingPlanUpdateResponse</returns>
        public async System.Threading.Tasks.Task<BillingPlanUpdateResponse> BillingPlanPutBillingPlanAsync (string accountId, string previewBillingPlan = null, BillingPlanInformation billingPlanInformation = null)
        {
             ApiResponse<BillingPlanUpdateResponse> localVarResponse = await BillingPlanPutBillingPlanAsyncWithHttpInfo(accountId, previewBillingPlan, billingPlanInformation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the account billing plan. Updates the billing plan information, billing address, and credit card information for the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="previewBillingPlan">When set to **true**, updates the account using a preview billing plan. (optional)</param>
        /// <param name="billingPlanInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (BillingPlanUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingPlanUpdateResponse>> BillingPlanPutBillingPlanAsyncWithHttpInfo (string accountId, string previewBillingPlan = null, BillingPlanInformation billingPlanInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BillingPlansApi->BillingPlanPutBillingPlan");

            var localVarPath = "/v2/accounts/{accountId}/billing_plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (previewBillingPlan != null) localVarQueryParams.Add("preview_billing_plan", Configuration.ApiClient.ParameterToString(previewBillingPlan)); // query parameter
            if (billingPlanInformation != null && billingPlanInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(billingPlanInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billingPlanInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPlanPutBillingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPlanUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPlanUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPlanUpdateResponse)));
            
        }

        /// <summary>
        /// Get the billing plan details. Retrieves the billing plan details for the specified billing plan ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingPlanId">The ID of the billing plan being accessed.</param>
        /// <returns>BillingPlanResponse</returns>
        public BillingPlanResponse BillingPlansGetBillingPlan (string billingPlanId)
        {
             ApiResponse<BillingPlanResponse> localVarResponse = BillingPlansGetBillingPlanWithHttpInfo(billingPlanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the billing plan details. Retrieves the billing plan details for the specified billing plan ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingPlanId">The ID of the billing plan being accessed.</param>
        /// <returns>ApiResponse of BillingPlanResponse</returns>
        public ApiResponse< BillingPlanResponse > BillingPlansGetBillingPlanWithHttpInfo (string billingPlanId)
        {
            // verify the required parameter 'billingPlanId' is set
            if (billingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'billingPlanId' when calling BillingPlansApi->BillingPlansGetBillingPlan");

            var localVarPath = "/v2/billing_plans/{billingPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (billingPlanId != null) localVarPathParams.Add("billingPlanId", Configuration.ApiClient.ParameterToString(billingPlanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPlansGetBillingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPlanResponse)));
            
        }

        /// <summary>
        /// Get the billing plan details. Retrieves the billing plan details for the specified billing plan ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingPlanId">The ID of the billing plan being accessed.</param>
        /// <returns>Task of BillingPlanResponse</returns>
        public async System.Threading.Tasks.Task<BillingPlanResponse> BillingPlansGetBillingPlanAsync (string billingPlanId)
        {
             ApiResponse<BillingPlanResponse> localVarResponse = await BillingPlansGetBillingPlanAsyncWithHttpInfo(billingPlanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the billing plan details. Retrieves the billing plan details for the specified billing plan ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="billingPlanId">The ID of the billing plan being accessed.</param>
        /// <returns>Task of ApiResponse (BillingPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingPlanResponse>> BillingPlansGetBillingPlanAsyncWithHttpInfo (string billingPlanId)
        {
            // verify the required parameter 'billingPlanId' is set
            if (billingPlanId == null)
                throw new ApiException(400, "Missing required parameter 'billingPlanId' when calling BillingPlansApi->BillingPlansGetBillingPlan");

            var localVarPath = "/v2/billing_plans/{billingPlanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (billingPlanId != null) localVarPathParams.Add("billingPlanId", Configuration.ApiClient.ParameterToString(billingPlanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPlansGetBillingPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPlanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPlanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPlanResponse)));
            
        }

        /// <summary>
        /// Gets the list of available billing plans. Retrieves a list of the billing plans associated with a distributor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>BillingPlansResponse</returns>
        public BillingPlansResponse BillingPlansGetBillingPlans ()
        {
             ApiResponse<BillingPlansResponse> localVarResponse = BillingPlansGetBillingPlansWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of available billing plans. Retrieves a list of the billing plans associated with a distributor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BillingPlansResponse</returns>
        public ApiResponse< BillingPlansResponse > BillingPlansGetBillingPlansWithHttpInfo ()
        {

            var localVarPath = "/v2/billing_plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPlansGetBillingPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPlansResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPlansResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPlansResponse)));
            
        }

        /// <summary>
        /// Gets the list of available billing plans. Retrieves a list of the billing plans associated with a distributor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BillingPlansResponse</returns>
        public async System.Threading.Tasks.Task<BillingPlansResponse> BillingPlansGetBillingPlansAsync ()
        {
             ApiResponse<BillingPlansResponse> localVarResponse = await BillingPlansGetBillingPlansAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of available billing plans. Retrieves a list of the billing plans associated with a distributor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BillingPlansResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingPlansResponse>> BillingPlansGetBillingPlansAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/billing_plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPlansGetBillingPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPlansResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPlansResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPlansResponse)));
            
        }

        /// <summary>
        /// Reserverd: Purchase additional envelopes. Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="purchasedEnvelopesInformation"> (optional)</param>
        /// <returns></returns>
        public void PurchasedEnvelopesPutPurchasedEnvelopes (string accountId, PurchasedEnvelopesInformation purchasedEnvelopesInformation = null)
        {
             PurchasedEnvelopesPutPurchasedEnvelopesWithHttpInfo(accountId, purchasedEnvelopesInformation);
        }

        /// <summary>
        /// Reserverd: Purchase additional envelopes. Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="purchasedEnvelopesInformation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PurchasedEnvelopesPutPurchasedEnvelopesWithHttpInfo (string accountId, PurchasedEnvelopesInformation purchasedEnvelopesInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BillingPlansApi->PurchasedEnvelopesPutPurchasedEnvelopes");

            var localVarPath = "/v2/accounts/{accountId}/billing_plan/purchased_envelopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (purchasedEnvelopesInformation != null && purchasedEnvelopesInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(purchasedEnvelopesInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = purchasedEnvelopesInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasedEnvelopesPutPurchasedEnvelopes", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reserverd: Purchase additional envelopes. Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="purchasedEnvelopesInformation"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PurchasedEnvelopesPutPurchasedEnvelopesAsync (string accountId, PurchasedEnvelopesInformation purchasedEnvelopesInformation = null)
        {
             await PurchasedEnvelopesPutPurchasedEnvelopesAsyncWithHttpInfo(accountId, purchasedEnvelopesInformation);

        }

        /// <summary>
        /// Reserverd: Purchase additional envelopes. Reserved: At this time, this endpoint is limited to DocuSign internal use only. Completes the purchase of envelopes for your account. The actual purchase is done as part of an internal workflow interaction with an envelope vendor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="purchasedEnvelopesInformation"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PurchasedEnvelopesPutPurchasedEnvelopesAsyncWithHttpInfo (string accountId, PurchasedEnvelopesInformation purchasedEnvelopesInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BillingPlansApi->PurchasedEnvelopesPutPurchasedEnvelopes");

            var localVarPath = "/v2/accounts/{accountId}/billing_plan/purchased_envelopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (purchasedEnvelopesInformation != null && purchasedEnvelopesInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(purchasedEnvelopesInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = purchasedEnvelopesInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasedEnvelopesPutPurchasedEnvelopes", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
