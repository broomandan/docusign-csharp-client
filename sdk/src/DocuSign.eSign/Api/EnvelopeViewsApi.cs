/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvelopeViewsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a URL to the authentication view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the authentication view of the DocuSign UI in your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="consoleViewRequest"> (optional)</param>
        /// <returns>EnvelopeViews</returns>
        EnvelopeViews ViewsPostAccountConsoleView (string accountId, ConsoleViewRequest consoleViewRequest = null);

        /// <summary>
        /// Returns a URL to the authentication view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the authentication view of the DocuSign UI in your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="consoleViewRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeViews</returns>
        ApiResponse<EnvelopeViews> ViewsPostAccountConsoleViewWithHttpInfo (string accountId, ConsoleViewRequest consoleViewRequest = null);
        /// <summary>
        /// Returns a URL to the envelope correction UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the envelope correction view of the DocuSign UI in your applications.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="correctViewRequest"> (optional)</param>
        /// <returns>EnvelopeViews</returns>
        EnvelopeViews ViewsPostEnvelopeCorrectView (string accountId, string envelopeId, CorrectViewRequest correctViewRequest = null);

        /// <summary>
        /// Returns a URL to the envelope correction UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the envelope correction view of the DocuSign UI in your applications.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="correctViewRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeViews</returns>
        ApiResponse<EnvelopeViews> ViewsPostEnvelopeCorrectViewWithHttpInfo (string accountId, string envelopeId, CorrectViewRequest correctViewRequest = null);
        /// <summary>
        /// Returns a URL to the edit view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view.   Upon sending completion, the user is returned to the return URL provided by the API application.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>EnvelopeViews</returns>
        EnvelopeViews ViewsPostEnvelopeEditView (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null);

        /// <summary>
        /// Returns a URL to the edit view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view.   Upon sending completion, the user is returned to the return URL provided by the API application.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeViews</returns>
        ApiResponse<EnvelopeViews> ViewsPostEnvelopeEditViewWithHttpInfo (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null);
        /// <summary>
        /// Returns a URL to the recipient view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that enables you to embed the recipient view of the DocuSign UI in your applications. If the recipient is a signer, then the view will provide the signing ceremony.  ###### Note: Please redirect the client to the URL. iFrames should not be used, especially if the recipient may be using a mobile or tablet.   This method is only used with envelopes in the &#x60;sent&#x60; status.  Your application is responsible for authenticating the identity of the recipient or signer when you use this method. Use the parameters &#x60;assertionId&#x60;, &#x60;authenticationInstant&#x60;, &#x60;authenticationMethod&#x60;, &#x60;clientUserId&#x60;, and &#x60;securityDomain&#x60; to record information on how the recipient was authenticated. At a minimum, &#x60;authenticationMethod&#x60; and &#x60;clientUserId&#x60; are required. The information that you provide is included in the envelope&#39;s certificate of completion.  ## The event status parameter After the signer completes or ends the signing ceremony, DocuSign will redirect the user&#39;s browser back to your app via the &#x60;returnUrl&#x60; that you supply. DocuSIgn appends an &#x60;event&#x60; query parameter to the URL with the outcome of the signing ceremony. Your app should use the event parameter to determine the next step for the envelope. Don&#39;t fetch the envelope&#39;s status via Envelopes: get or a similar method; that could break the DocuSign rule against polling.  ## The URL is time-limited The URL returned by this method is valid for one use. It must be used/displayed within a couple of minutes after being generated. Once the recipient is redirected to the recipient view, they must interact with the DocuSign system periodically or their session will time out.  Because the URL is time-limited, it should not be stored or sent via email. Immediately redirect the user&#39;s browser to the URL after you receive it.  If you want to invite someone to an embedded signing session via email, the email invitation&#39;s URL must be to your application. When invoked, your app should request a recipientView URL from DocuSign and then redirect the signer to that URL.  ## Maintaining State After the recipient completes the recipient view (or signing ceremony), they are redirected to your application. Your application can recover state information about the transaction by storing information in a cookie, or by including query parameters in the &#x60;returnUrl&#x60; field. Eg, &#x60;https://myapp.eg.com/docusign_return?myState&#x3D;12345&#x60; When the user is redirected to your app, the &#x60;event&#x60; query parameter will be appended. In this example, prevent spoofing by not using a guessable value as the state value.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientViewRequest"> (optional)</param>
        /// <returns>EnvelopeViews</returns>
        EnvelopeViews ViewsPostEnvelopeRecipientView (string accountId, string envelopeId, RecipientViewRequest recipientViewRequest = null);

        /// <summary>
        /// Returns a URL to the recipient view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that enables you to embed the recipient view of the DocuSign UI in your applications. If the recipient is a signer, then the view will provide the signing ceremony.  ###### Note: Please redirect the client to the URL. iFrames should not be used, especially if the recipient may be using a mobile or tablet.   This method is only used with envelopes in the &#x60;sent&#x60; status.  Your application is responsible for authenticating the identity of the recipient or signer when you use this method. Use the parameters &#x60;assertionId&#x60;, &#x60;authenticationInstant&#x60;, &#x60;authenticationMethod&#x60;, &#x60;clientUserId&#x60;, and &#x60;securityDomain&#x60; to record information on how the recipient was authenticated. At a minimum, &#x60;authenticationMethod&#x60; and &#x60;clientUserId&#x60; are required. The information that you provide is included in the envelope&#39;s certificate of completion.  ## The event status parameter After the signer completes or ends the signing ceremony, DocuSign will redirect the user&#39;s browser back to your app via the &#x60;returnUrl&#x60; that you supply. DocuSIgn appends an &#x60;event&#x60; query parameter to the URL with the outcome of the signing ceremony. Your app should use the event parameter to determine the next step for the envelope. Don&#39;t fetch the envelope&#39;s status via Envelopes: get or a similar method; that could break the DocuSign rule against polling.  ## The URL is time-limited The URL returned by this method is valid for one use. It must be used/displayed within a couple of minutes after being generated. Once the recipient is redirected to the recipient view, they must interact with the DocuSign system periodically or their session will time out.  Because the URL is time-limited, it should not be stored or sent via email. Immediately redirect the user&#39;s browser to the URL after you receive it.  If you want to invite someone to an embedded signing session via email, the email invitation&#39;s URL must be to your application. When invoked, your app should request a recipientView URL from DocuSign and then redirect the signer to that URL.  ## Maintaining State After the recipient completes the recipient view (or signing ceremony), they are redirected to your application. Your application can recover state information about the transaction by storing information in a cookie, or by including query parameters in the &#x60;returnUrl&#x60; field. Eg, &#x60;https://myapp.eg.com/docusign_return?myState&#x3D;12345&#x60; When the user is redirected to your app, the &#x60;event&#x60; query parameter will be appended. In this example, prevent spoofing by not using a guessable value as the state value.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientViewRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeViews</returns>
        ApiResponse<EnvelopeViews> ViewsPostEnvelopeRecipientViewWithHttpInfo (string accountId, string envelopeId, RecipientViewRequest recipientViewRequest = null);
        /// <summary>
        /// Returns a URL to the sender view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that enables you to embed the sender view of the DocuSign UI in your applications.   The returned URL can only be redirected to immediately after it is generated. It can only be used once. Therefore, request the URL immediately before you redirect your user to it.  For the best user experience, don&#39;t use an iFrame. For iOS devices DocuSign recommends using a WebView.  Multiple solutions are available for maintaining your client state. See the \&quot;Maintaining State\&quot; section of the [Embedded Signing introduction.](../../../../guide/usage/embedded_signing.html#maintaining-state)  After the user has completed the sending view, their browser is redirected to the &#x60;returnUrl&#x60; you supplied.  By default, if the envelope already contains one or more documents, DocuSign will initially show the document tagging view when you redirect to the URL.   To start with the envelope&#39;s recipients and documents view instead, examine the URL in the method&#39;s response.  Then change the query parameter from &#x60;send&#x3D;1&#x60; to &#x60;send&#x3D;0&#x60; to start with the recipients/documents view.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>EnvelopeViews</returns>
        EnvelopeViews ViewsPostEnvelopeSenderView (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null);

        /// <summary>
        /// Returns a URL to the sender view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that enables you to embed the sender view of the DocuSign UI in your applications.   The returned URL can only be redirected to immediately after it is generated. It can only be used once. Therefore, request the URL immediately before you redirect your user to it.  For the best user experience, don&#39;t use an iFrame. For iOS devices DocuSign recommends using a WebView.  Multiple solutions are available for maintaining your client state. See the \&quot;Maintaining State\&quot; section of the [Embedded Signing introduction.](../../../../guide/usage/embedded_signing.html#maintaining-state)  After the user has completed the sending view, their browser is redirected to the &#x60;returnUrl&#x60; you supplied.  By default, if the envelope already contains one or more documents, DocuSign will initially show the document tagging view when you redirect to the URL.   To start with the envelope&#39;s recipients and documents view instead, examine the URL in the method&#39;s response.  Then change the query parameter from &#x60;send&#x3D;1&#x60; to &#x60;send&#x3D;0&#x60; to start with the recipients/documents view.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeViews</returns>
        ApiResponse<EnvelopeViews> ViewsPostEnvelopeSenderViewWithHttpInfo (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns a URL to the authentication view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the authentication view of the DocuSign UI in your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="consoleViewRequest"> (optional)</param>
        /// <returns>Task of EnvelopeViews</returns>
        System.Threading.Tasks.Task<EnvelopeViews> ViewsPostAccountConsoleViewAsync (string accountId, ConsoleViewRequest consoleViewRequest = null);

        /// <summary>
        /// Returns a URL to the authentication view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the authentication view of the DocuSign UI in your applications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="consoleViewRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeViews)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeViews>> ViewsPostAccountConsoleViewAsyncWithHttpInfo (string accountId, ConsoleViewRequest consoleViewRequest = null);
        /// <summary>
        /// Returns a URL to the envelope correction UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the envelope correction view of the DocuSign UI in your applications.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="correctViewRequest"> (optional)</param>
        /// <returns>Task of EnvelopeViews</returns>
        System.Threading.Tasks.Task<EnvelopeViews> ViewsPostEnvelopeCorrectViewAsync (string accountId, string envelopeId, CorrectViewRequest correctViewRequest = null);

        /// <summary>
        /// Returns a URL to the envelope correction UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the envelope correction view of the DocuSign UI in your applications.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="correctViewRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeViews)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeViews>> ViewsPostEnvelopeCorrectViewAsyncWithHttpInfo (string accountId, string envelopeId, CorrectViewRequest correctViewRequest = null);
        /// <summary>
        /// Returns a URL to the edit view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view.   Upon sending completion, the user is returned to the return URL provided by the API application.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of EnvelopeViews</returns>
        System.Threading.Tasks.Task<EnvelopeViews> ViewsPostEnvelopeEditViewAsync (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null);

        /// <summary>
        /// Returns a URL to the edit view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that allows you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view.   Upon sending completion, the user is returned to the return URL provided by the API application.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeViews)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeViews>> ViewsPostEnvelopeEditViewAsyncWithHttpInfo (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null);
        /// <summary>
        /// Returns a URL to the recipient view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that enables you to embed the recipient view of the DocuSign UI in your applications. If the recipient is a signer, then the view will provide the signing ceremony.  ###### Note: Please redirect the client to the URL. iFrames should not be used, especially if the recipient may be using a mobile or tablet.   This method is only used with envelopes in the &#x60;sent&#x60; status.  Your application is responsible for authenticating the identity of the recipient or signer when you use this method. Use the parameters &#x60;assertionId&#x60;, &#x60;authenticationInstant&#x60;, &#x60;authenticationMethod&#x60;, &#x60;clientUserId&#x60;, and &#x60;securityDomain&#x60; to record information on how the recipient was authenticated. At a minimum, &#x60;authenticationMethod&#x60; and &#x60;clientUserId&#x60; are required. The information that you provide is included in the envelope&#39;s certificate of completion.  ## The event status parameter After the signer completes or ends the signing ceremony, DocuSign will redirect the user&#39;s browser back to your app via the &#x60;returnUrl&#x60; that you supply. DocuSIgn appends an &#x60;event&#x60; query parameter to the URL with the outcome of the signing ceremony. Your app should use the event parameter to determine the next step for the envelope. Don&#39;t fetch the envelope&#39;s status via Envelopes: get or a similar method; that could break the DocuSign rule against polling.  ## The URL is time-limited The URL returned by this method is valid for one use. It must be used/displayed within a couple of minutes after being generated. Once the recipient is redirected to the recipient view, they must interact with the DocuSign system periodically or their session will time out.  Because the URL is time-limited, it should not be stored or sent via email. Immediately redirect the user&#39;s browser to the URL after you receive it.  If you want to invite someone to an embedded signing session via email, the email invitation&#39;s URL must be to your application. When invoked, your app should request a recipientView URL from DocuSign and then redirect the signer to that URL.  ## Maintaining State After the recipient completes the recipient view (or signing ceremony), they are redirected to your application. Your application can recover state information about the transaction by storing information in a cookie, or by including query parameters in the &#x60;returnUrl&#x60; field. Eg, &#x60;https://myapp.eg.com/docusign_return?myState&#x3D;12345&#x60; When the user is redirected to your app, the &#x60;event&#x60; query parameter will be appended. In this example, prevent spoofing by not using a guessable value as the state value.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientViewRequest"> (optional)</param>
        /// <returns>Task of EnvelopeViews</returns>
        System.Threading.Tasks.Task<EnvelopeViews> ViewsPostEnvelopeRecipientViewAsync (string accountId, string envelopeId, RecipientViewRequest recipientViewRequest = null);

        /// <summary>
        /// Returns a URL to the recipient view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that enables you to embed the recipient view of the DocuSign UI in your applications. If the recipient is a signer, then the view will provide the signing ceremony.  ###### Note: Please redirect the client to the URL. iFrames should not be used, especially if the recipient may be using a mobile or tablet.   This method is only used with envelopes in the &#x60;sent&#x60; status.  Your application is responsible for authenticating the identity of the recipient or signer when you use this method. Use the parameters &#x60;assertionId&#x60;, &#x60;authenticationInstant&#x60;, &#x60;authenticationMethod&#x60;, &#x60;clientUserId&#x60;, and &#x60;securityDomain&#x60; to record information on how the recipient was authenticated. At a minimum, &#x60;authenticationMethod&#x60; and &#x60;clientUserId&#x60; are required. The information that you provide is included in the envelope&#39;s certificate of completion.  ## The event status parameter After the signer completes or ends the signing ceremony, DocuSign will redirect the user&#39;s browser back to your app via the &#x60;returnUrl&#x60; that you supply. DocuSIgn appends an &#x60;event&#x60; query parameter to the URL with the outcome of the signing ceremony. Your app should use the event parameter to determine the next step for the envelope. Don&#39;t fetch the envelope&#39;s status via Envelopes: get or a similar method; that could break the DocuSign rule against polling.  ## The URL is time-limited The URL returned by this method is valid for one use. It must be used/displayed within a couple of minutes after being generated. Once the recipient is redirected to the recipient view, they must interact with the DocuSign system periodically or their session will time out.  Because the URL is time-limited, it should not be stored or sent via email. Immediately redirect the user&#39;s browser to the URL after you receive it.  If you want to invite someone to an embedded signing session via email, the email invitation&#39;s URL must be to your application. When invoked, your app should request a recipientView URL from DocuSign and then redirect the signer to that URL.  ## Maintaining State After the recipient completes the recipient view (or signing ceremony), they are redirected to your application. Your application can recover state information about the transaction by storing information in a cookie, or by including query parameters in the &#x60;returnUrl&#x60; field. Eg, &#x60;https://myapp.eg.com/docusign_return?myState&#x3D;12345&#x60; When the user is redirected to your app, the &#x60;event&#x60; query parameter will be appended. In this example, prevent spoofing by not using a guessable value as the state value.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientViewRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeViews)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeViews>> ViewsPostEnvelopeRecipientViewAsyncWithHttpInfo (string accountId, string envelopeId, RecipientViewRequest recipientViewRequest = null);
        /// <summary>
        /// Returns a URL to the sender view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that enables you to embed the sender view of the DocuSign UI in your applications.   The returned URL can only be redirected to immediately after it is generated. It can only be used once. Therefore, request the URL immediately before you redirect your user to it.  For the best user experience, don&#39;t use an iFrame. For iOS devices DocuSign recommends using a WebView.  Multiple solutions are available for maintaining your client state. See the \&quot;Maintaining State\&quot; section of the [Embedded Signing introduction.](../../../../guide/usage/embedded_signing.html#maintaining-state)  After the user has completed the sending view, their browser is redirected to the &#x60;returnUrl&#x60; you supplied.  By default, if the envelope already contains one or more documents, DocuSign will initially show the document tagging view when you redirect to the URL.   To start with the envelope&#39;s recipients and documents view instead, examine the URL in the method&#39;s response.  Then change the query parameter from &#x60;send&#x3D;1&#x60; to &#x60;send&#x3D;0&#x60; to start with the recipients/documents view.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of EnvelopeViews</returns>
        System.Threading.Tasks.Task<EnvelopeViews> ViewsPostEnvelopeSenderViewAsync (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null);

        /// <summary>
        /// Returns a URL to the sender view UI.
        /// </summary>
        /// <remarks>
        /// Returns a URL that enables you to embed the sender view of the DocuSign UI in your applications.   The returned URL can only be redirected to immediately after it is generated. It can only be used once. Therefore, request the URL immediately before you redirect your user to it.  For the best user experience, don&#39;t use an iFrame. For iOS devices DocuSign recommends using a WebView.  Multiple solutions are available for maintaining your client state. See the \&quot;Maintaining State\&quot; section of the [Embedded Signing introduction.](../../../../guide/usage/embedded_signing.html#maintaining-state)  After the user has completed the sending view, their browser is redirected to the &#x60;returnUrl&#x60; you supplied.  By default, if the envelope already contains one or more documents, DocuSign will initially show the document tagging view when you redirect to the URL.   To start with the envelope&#39;s recipients and documents view instead, examine the URL in the method&#39;s response.  Then change the query parameter from &#x60;send&#x3D;1&#x60; to &#x60;send&#x3D;0&#x60; to start with the recipients/documents view.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeViews)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeViews>> ViewsPostEnvelopeSenderViewAsyncWithHttpInfo (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnvelopeViewsApi : IEnvelopeViewsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeViewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvelopeViewsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeViewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvelopeViewsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns a URL to the authentication view UI. Returns a URL that allows you to embed the authentication view of the DocuSign UI in your applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="consoleViewRequest"> (optional)</param>
        /// <returns>EnvelopeViews</returns>
        public EnvelopeViews ViewsPostAccountConsoleView (string accountId, ConsoleViewRequest consoleViewRequest = null)
        {
             ApiResponse<EnvelopeViews> localVarResponse = ViewsPostAccountConsoleViewWithHttpInfo(accountId, consoleViewRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a URL to the authentication view UI. Returns a URL that allows you to embed the authentication view of the DocuSign UI in your applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="consoleViewRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeViews</returns>
        public ApiResponse< EnvelopeViews > ViewsPostAccountConsoleViewWithHttpInfo (string accountId, ConsoleViewRequest consoleViewRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeViewsApi->ViewsPostAccountConsoleView");

            var localVarPath = "/v2/accounts/{accountId}/views/console";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (consoleViewRequest != null && consoleViewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(consoleViewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = consoleViewRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostAccountConsoleView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeViews)));
            
        }

        /// <summary>
        /// Returns a URL to the authentication view UI. Returns a URL that allows you to embed the authentication view of the DocuSign UI in your applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="consoleViewRequest"> (optional)</param>
        /// <returns>Task of EnvelopeViews</returns>
        public async System.Threading.Tasks.Task<EnvelopeViews> ViewsPostAccountConsoleViewAsync (string accountId, ConsoleViewRequest consoleViewRequest = null)
        {
             ApiResponse<EnvelopeViews> localVarResponse = await ViewsPostAccountConsoleViewAsyncWithHttpInfo(accountId, consoleViewRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a URL to the authentication view UI. Returns a URL that allows you to embed the authentication view of the DocuSign UI in your applications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="consoleViewRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeViews)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeViews>> ViewsPostAccountConsoleViewAsyncWithHttpInfo (string accountId, ConsoleViewRequest consoleViewRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeViewsApi->ViewsPostAccountConsoleView");

            var localVarPath = "/v2/accounts/{accountId}/views/console";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (consoleViewRequest != null && consoleViewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(consoleViewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = consoleViewRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostAccountConsoleView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeViews)));
            
        }

        /// <summary>
        /// Returns a URL to the envelope correction UI. Returns a URL that allows you to embed the envelope correction view of the DocuSign UI in your applications.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="correctViewRequest"> (optional)</param>
        /// <returns>EnvelopeViews</returns>
        public EnvelopeViews ViewsPostEnvelopeCorrectView (string accountId, string envelopeId, CorrectViewRequest correctViewRequest = null)
        {
             ApiResponse<EnvelopeViews> localVarResponse = ViewsPostEnvelopeCorrectViewWithHttpInfo(accountId, envelopeId, correctViewRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a URL to the envelope correction UI. Returns a URL that allows you to embed the envelope correction view of the DocuSign UI in your applications.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="correctViewRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeViews</returns>
        public ApiResponse< EnvelopeViews > ViewsPostEnvelopeCorrectViewWithHttpInfo (string accountId, string envelopeId, CorrectViewRequest correctViewRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeViewsApi->ViewsPostEnvelopeCorrectView");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeViewsApi->ViewsPostEnvelopeCorrectView");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/correct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (correctViewRequest != null && correctViewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(correctViewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = correctViewRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostEnvelopeCorrectView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeViews)));
            
        }

        /// <summary>
        /// Returns a URL to the envelope correction UI. Returns a URL that allows you to embed the envelope correction view of the DocuSign UI in your applications.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="correctViewRequest"> (optional)</param>
        /// <returns>Task of EnvelopeViews</returns>
        public async System.Threading.Tasks.Task<EnvelopeViews> ViewsPostEnvelopeCorrectViewAsync (string accountId, string envelopeId, CorrectViewRequest correctViewRequest = null)
        {
             ApiResponse<EnvelopeViews> localVarResponse = await ViewsPostEnvelopeCorrectViewAsyncWithHttpInfo(accountId, envelopeId, correctViewRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a URL to the envelope correction UI. Returns a URL that allows you to embed the envelope correction view of the DocuSign UI in your applications.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="correctViewRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeViews)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeViews>> ViewsPostEnvelopeCorrectViewAsyncWithHttpInfo (string accountId, string envelopeId, CorrectViewRequest correctViewRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeViewsApi->ViewsPostEnvelopeCorrectView");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeViewsApi->ViewsPostEnvelopeCorrectView");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/correct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (correctViewRequest != null && correctViewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(correctViewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = correctViewRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostEnvelopeCorrectView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeViews)));
            
        }

        /// <summary>
        /// Returns a URL to the edit view UI. Returns a URL that allows you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view.   Upon sending completion, the user is returned to the return URL provided by the API application.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>EnvelopeViews</returns>
        public EnvelopeViews ViewsPostEnvelopeEditView (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null)
        {
             ApiResponse<EnvelopeViews> localVarResponse = ViewsPostEnvelopeEditViewWithHttpInfo(accountId, envelopeId, returnUrlRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a URL to the edit view UI. Returns a URL that allows you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view.   Upon sending completion, the user is returned to the return URL provided by the API application.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeViews</returns>
        public ApiResponse< EnvelopeViews > ViewsPostEnvelopeEditViewWithHttpInfo (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeViewsApi->ViewsPostEnvelopeEditView");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeViewsApi->ViewsPostEnvelopeEditView");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (returnUrlRequest != null && returnUrlRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(returnUrlRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = returnUrlRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostEnvelopeEditView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeViews)));
            
        }

        /// <summary>
        /// Returns a URL to the edit view UI. Returns a URL that allows you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view.   Upon sending completion, the user is returned to the return URL provided by the API application.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of EnvelopeViews</returns>
        public async System.Threading.Tasks.Task<EnvelopeViews> ViewsPostEnvelopeEditViewAsync (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null)
        {
             ApiResponse<EnvelopeViews> localVarResponse = await ViewsPostEnvelopeEditViewAsyncWithHttpInfo(accountId, envelopeId, returnUrlRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a URL to the edit view UI. Returns a URL that allows you to embed the edit view of the DocuSign UI in your applications. This is a one-time use login token that allows the user to be placed into the DocuSign editing view.   Upon sending completion, the user is returned to the return URL provided by the API application.  Important: iFrames should not be used for embedded operations on mobile devices due to screen space issues. For iOS devices DocuSign recommends using a WebView. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeViews)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeViews>> ViewsPostEnvelopeEditViewAsyncWithHttpInfo (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeViewsApi->ViewsPostEnvelopeEditView");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeViewsApi->ViewsPostEnvelopeEditView");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (returnUrlRequest != null && returnUrlRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(returnUrlRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = returnUrlRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostEnvelopeEditView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeViews)));
            
        }

        /// <summary>
        /// Returns a URL to the recipient view UI. Returns a URL that enables you to embed the recipient view of the DocuSign UI in your applications. If the recipient is a signer, then the view will provide the signing ceremony.  ###### Note: Please redirect the client to the URL. iFrames should not be used, especially if the recipient may be using a mobile or tablet.   This method is only used with envelopes in the &#x60;sent&#x60; status.  Your application is responsible for authenticating the identity of the recipient or signer when you use this method. Use the parameters &#x60;assertionId&#x60;, &#x60;authenticationInstant&#x60;, &#x60;authenticationMethod&#x60;, &#x60;clientUserId&#x60;, and &#x60;securityDomain&#x60; to record information on how the recipient was authenticated. At a minimum, &#x60;authenticationMethod&#x60; and &#x60;clientUserId&#x60; are required. The information that you provide is included in the envelope&#39;s certificate of completion.  ## The event status parameter After the signer completes or ends the signing ceremony, DocuSign will redirect the user&#39;s browser back to your app via the &#x60;returnUrl&#x60; that you supply. DocuSIgn appends an &#x60;event&#x60; query parameter to the URL with the outcome of the signing ceremony. Your app should use the event parameter to determine the next step for the envelope. Don&#39;t fetch the envelope&#39;s status via Envelopes: get or a similar method; that could break the DocuSign rule against polling.  ## The URL is time-limited The URL returned by this method is valid for one use. It must be used/displayed within a couple of minutes after being generated. Once the recipient is redirected to the recipient view, they must interact with the DocuSign system periodically or their session will time out.  Because the URL is time-limited, it should not be stored or sent via email. Immediately redirect the user&#39;s browser to the URL after you receive it.  If you want to invite someone to an embedded signing session via email, the email invitation&#39;s URL must be to your application. When invoked, your app should request a recipientView URL from DocuSign and then redirect the signer to that URL.  ## Maintaining State After the recipient completes the recipient view (or signing ceremony), they are redirected to your application. Your application can recover state information about the transaction by storing information in a cookie, or by including query parameters in the &#x60;returnUrl&#x60; field. Eg, &#x60;https://myapp.eg.com/docusign_return?myState&#x3D;12345&#x60; When the user is redirected to your app, the &#x60;event&#x60; query parameter will be appended. In this example, prevent spoofing by not using a guessable value as the state value.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientViewRequest"> (optional)</param>
        /// <returns>EnvelopeViews</returns>
        public EnvelopeViews ViewsPostEnvelopeRecipientView (string accountId, string envelopeId, RecipientViewRequest recipientViewRequest = null)
        {
             ApiResponse<EnvelopeViews> localVarResponse = ViewsPostEnvelopeRecipientViewWithHttpInfo(accountId, envelopeId, recipientViewRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a URL to the recipient view UI. Returns a URL that enables you to embed the recipient view of the DocuSign UI in your applications. If the recipient is a signer, then the view will provide the signing ceremony.  ###### Note: Please redirect the client to the URL. iFrames should not be used, especially if the recipient may be using a mobile or tablet.   This method is only used with envelopes in the &#x60;sent&#x60; status.  Your application is responsible for authenticating the identity of the recipient or signer when you use this method. Use the parameters &#x60;assertionId&#x60;, &#x60;authenticationInstant&#x60;, &#x60;authenticationMethod&#x60;, &#x60;clientUserId&#x60;, and &#x60;securityDomain&#x60; to record information on how the recipient was authenticated. At a minimum, &#x60;authenticationMethod&#x60; and &#x60;clientUserId&#x60; are required. The information that you provide is included in the envelope&#39;s certificate of completion.  ## The event status parameter After the signer completes or ends the signing ceremony, DocuSign will redirect the user&#39;s browser back to your app via the &#x60;returnUrl&#x60; that you supply. DocuSIgn appends an &#x60;event&#x60; query parameter to the URL with the outcome of the signing ceremony. Your app should use the event parameter to determine the next step for the envelope. Don&#39;t fetch the envelope&#39;s status via Envelopes: get or a similar method; that could break the DocuSign rule against polling.  ## The URL is time-limited The URL returned by this method is valid for one use. It must be used/displayed within a couple of minutes after being generated. Once the recipient is redirected to the recipient view, they must interact with the DocuSign system periodically or their session will time out.  Because the URL is time-limited, it should not be stored or sent via email. Immediately redirect the user&#39;s browser to the URL after you receive it.  If you want to invite someone to an embedded signing session via email, the email invitation&#39;s URL must be to your application. When invoked, your app should request a recipientView URL from DocuSign and then redirect the signer to that URL.  ## Maintaining State After the recipient completes the recipient view (or signing ceremony), they are redirected to your application. Your application can recover state information about the transaction by storing information in a cookie, or by including query parameters in the &#x60;returnUrl&#x60; field. Eg, &#x60;https://myapp.eg.com/docusign_return?myState&#x3D;12345&#x60; When the user is redirected to your app, the &#x60;event&#x60; query parameter will be appended. In this example, prevent spoofing by not using a guessable value as the state value.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientViewRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeViews</returns>
        public ApiResponse< EnvelopeViews > ViewsPostEnvelopeRecipientViewWithHttpInfo (string accountId, string envelopeId, RecipientViewRequest recipientViewRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeViewsApi->ViewsPostEnvelopeRecipientView");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeViewsApi->ViewsPostEnvelopeRecipientView");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/recipient";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientViewRequest != null && recipientViewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(recipientViewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = recipientViewRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostEnvelopeRecipientView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeViews)));
            
        }

        /// <summary>
        /// Returns a URL to the recipient view UI. Returns a URL that enables you to embed the recipient view of the DocuSign UI in your applications. If the recipient is a signer, then the view will provide the signing ceremony.  ###### Note: Please redirect the client to the URL. iFrames should not be used, especially if the recipient may be using a mobile or tablet.   This method is only used with envelopes in the &#x60;sent&#x60; status.  Your application is responsible for authenticating the identity of the recipient or signer when you use this method. Use the parameters &#x60;assertionId&#x60;, &#x60;authenticationInstant&#x60;, &#x60;authenticationMethod&#x60;, &#x60;clientUserId&#x60;, and &#x60;securityDomain&#x60; to record information on how the recipient was authenticated. At a minimum, &#x60;authenticationMethod&#x60; and &#x60;clientUserId&#x60; are required. The information that you provide is included in the envelope&#39;s certificate of completion.  ## The event status parameter After the signer completes or ends the signing ceremony, DocuSign will redirect the user&#39;s browser back to your app via the &#x60;returnUrl&#x60; that you supply. DocuSIgn appends an &#x60;event&#x60; query parameter to the URL with the outcome of the signing ceremony. Your app should use the event parameter to determine the next step for the envelope. Don&#39;t fetch the envelope&#39;s status via Envelopes: get or a similar method; that could break the DocuSign rule against polling.  ## The URL is time-limited The URL returned by this method is valid for one use. It must be used/displayed within a couple of minutes after being generated. Once the recipient is redirected to the recipient view, they must interact with the DocuSign system periodically or their session will time out.  Because the URL is time-limited, it should not be stored or sent via email. Immediately redirect the user&#39;s browser to the URL after you receive it.  If you want to invite someone to an embedded signing session via email, the email invitation&#39;s URL must be to your application. When invoked, your app should request a recipientView URL from DocuSign and then redirect the signer to that URL.  ## Maintaining State After the recipient completes the recipient view (or signing ceremony), they are redirected to your application. Your application can recover state information about the transaction by storing information in a cookie, or by including query parameters in the &#x60;returnUrl&#x60; field. Eg, &#x60;https://myapp.eg.com/docusign_return?myState&#x3D;12345&#x60; When the user is redirected to your app, the &#x60;event&#x60; query parameter will be appended. In this example, prevent spoofing by not using a guessable value as the state value.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientViewRequest"> (optional)</param>
        /// <returns>Task of EnvelopeViews</returns>
        public async System.Threading.Tasks.Task<EnvelopeViews> ViewsPostEnvelopeRecipientViewAsync (string accountId, string envelopeId, RecipientViewRequest recipientViewRequest = null)
        {
             ApiResponse<EnvelopeViews> localVarResponse = await ViewsPostEnvelopeRecipientViewAsyncWithHttpInfo(accountId, envelopeId, recipientViewRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a URL to the recipient view UI. Returns a URL that enables you to embed the recipient view of the DocuSign UI in your applications. If the recipient is a signer, then the view will provide the signing ceremony.  ###### Note: Please redirect the client to the URL. iFrames should not be used, especially if the recipient may be using a mobile or tablet.   This method is only used with envelopes in the &#x60;sent&#x60; status.  Your application is responsible for authenticating the identity of the recipient or signer when you use this method. Use the parameters &#x60;assertionId&#x60;, &#x60;authenticationInstant&#x60;, &#x60;authenticationMethod&#x60;, &#x60;clientUserId&#x60;, and &#x60;securityDomain&#x60; to record information on how the recipient was authenticated. At a minimum, &#x60;authenticationMethod&#x60; and &#x60;clientUserId&#x60; are required. The information that you provide is included in the envelope&#39;s certificate of completion.  ## The event status parameter After the signer completes or ends the signing ceremony, DocuSign will redirect the user&#39;s browser back to your app via the &#x60;returnUrl&#x60; that you supply. DocuSIgn appends an &#x60;event&#x60; query parameter to the URL with the outcome of the signing ceremony. Your app should use the event parameter to determine the next step for the envelope. Don&#39;t fetch the envelope&#39;s status via Envelopes: get or a similar method; that could break the DocuSign rule against polling.  ## The URL is time-limited The URL returned by this method is valid for one use. It must be used/displayed within a couple of minutes after being generated. Once the recipient is redirected to the recipient view, they must interact with the DocuSign system periodically or their session will time out.  Because the URL is time-limited, it should not be stored or sent via email. Immediately redirect the user&#39;s browser to the URL after you receive it.  If you want to invite someone to an embedded signing session via email, the email invitation&#39;s URL must be to your application. When invoked, your app should request a recipientView URL from DocuSign and then redirect the signer to that URL.  ## Maintaining State After the recipient completes the recipient view (or signing ceremony), they are redirected to your application. Your application can recover state information about the transaction by storing information in a cookie, or by including query parameters in the &#x60;returnUrl&#x60; field. Eg, &#x60;https://myapp.eg.com/docusign_return?myState&#x3D;12345&#x60; When the user is redirected to your app, the &#x60;event&#x60; query parameter will be appended. In this example, prevent spoofing by not using a guessable value as the state value.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientViewRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeViews)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeViews>> ViewsPostEnvelopeRecipientViewAsyncWithHttpInfo (string accountId, string envelopeId, RecipientViewRequest recipientViewRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeViewsApi->ViewsPostEnvelopeRecipientView");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeViewsApi->ViewsPostEnvelopeRecipientView");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/recipient";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientViewRequest != null && recipientViewRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(recipientViewRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = recipientViewRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostEnvelopeRecipientView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeViews)));
            
        }

        /// <summary>
        /// Returns a URL to the sender view UI. Returns a URL that enables you to embed the sender view of the DocuSign UI in your applications.   The returned URL can only be redirected to immediately after it is generated. It can only be used once. Therefore, request the URL immediately before you redirect your user to it.  For the best user experience, don&#39;t use an iFrame. For iOS devices DocuSign recommends using a WebView.  Multiple solutions are available for maintaining your client state. See the \&quot;Maintaining State\&quot; section of the [Embedded Signing introduction.](../../../../guide/usage/embedded_signing.html#maintaining-state)  After the user has completed the sending view, their browser is redirected to the &#x60;returnUrl&#x60; you supplied.  By default, if the envelope already contains one or more documents, DocuSign will initially show the document tagging view when you redirect to the URL.   To start with the envelope&#39;s recipients and documents view instead, examine the URL in the method&#39;s response.  Then change the query parameter from &#x60;send&#x3D;1&#x60; to &#x60;send&#x3D;0&#x60; to start with the recipients/documents view.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>EnvelopeViews</returns>
        public EnvelopeViews ViewsPostEnvelopeSenderView (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null)
        {
             ApiResponse<EnvelopeViews> localVarResponse = ViewsPostEnvelopeSenderViewWithHttpInfo(accountId, envelopeId, returnUrlRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a URL to the sender view UI. Returns a URL that enables you to embed the sender view of the DocuSign UI in your applications.   The returned URL can only be redirected to immediately after it is generated. It can only be used once. Therefore, request the URL immediately before you redirect your user to it.  For the best user experience, don&#39;t use an iFrame. For iOS devices DocuSign recommends using a WebView.  Multiple solutions are available for maintaining your client state. See the \&quot;Maintaining State\&quot; section of the [Embedded Signing introduction.](../../../../guide/usage/embedded_signing.html#maintaining-state)  After the user has completed the sending view, their browser is redirected to the &#x60;returnUrl&#x60; you supplied.  By default, if the envelope already contains one or more documents, DocuSign will initially show the document tagging view when you redirect to the URL.   To start with the envelope&#39;s recipients and documents view instead, examine the URL in the method&#39;s response.  Then change the query parameter from &#x60;send&#x3D;1&#x60; to &#x60;send&#x3D;0&#x60; to start with the recipients/documents view.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeViews</returns>
        public ApiResponse< EnvelopeViews > ViewsPostEnvelopeSenderViewWithHttpInfo (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeViewsApi->ViewsPostEnvelopeSenderView");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeViewsApi->ViewsPostEnvelopeSenderView");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/sender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (returnUrlRequest != null && returnUrlRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(returnUrlRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = returnUrlRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostEnvelopeSenderView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeViews)));
            
        }

        /// <summary>
        /// Returns a URL to the sender view UI. Returns a URL that enables you to embed the sender view of the DocuSign UI in your applications.   The returned URL can only be redirected to immediately after it is generated. It can only be used once. Therefore, request the URL immediately before you redirect your user to it.  For the best user experience, don&#39;t use an iFrame. For iOS devices DocuSign recommends using a WebView.  Multiple solutions are available for maintaining your client state. See the \&quot;Maintaining State\&quot; section of the [Embedded Signing introduction.](../../../../guide/usage/embedded_signing.html#maintaining-state)  After the user has completed the sending view, their browser is redirected to the &#x60;returnUrl&#x60; you supplied.  By default, if the envelope already contains one or more documents, DocuSign will initially show the document tagging view when you redirect to the URL.   To start with the envelope&#39;s recipients and documents view instead, examine the URL in the method&#39;s response.  Then change the query parameter from &#x60;send&#x3D;1&#x60; to &#x60;send&#x3D;0&#x60; to start with the recipients/documents view.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of EnvelopeViews</returns>
        public async System.Threading.Tasks.Task<EnvelopeViews> ViewsPostEnvelopeSenderViewAsync (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null)
        {
             ApiResponse<EnvelopeViews> localVarResponse = await ViewsPostEnvelopeSenderViewAsyncWithHttpInfo(accountId, envelopeId, returnUrlRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a URL to the sender view UI. Returns a URL that enables you to embed the sender view of the DocuSign UI in your applications.   The returned URL can only be redirected to immediately after it is generated. It can only be used once. Therefore, request the URL immediately before you redirect your user to it.  For the best user experience, don&#39;t use an iFrame. For iOS devices DocuSign recommends using a WebView.  Multiple solutions are available for maintaining your client state. See the \&quot;Maintaining State\&quot; section of the [Embedded Signing introduction.](../../../../guide/usage/embedded_signing.html#maintaining-state)  After the user has completed the sending view, their browser is redirected to the &#x60;returnUrl&#x60; you supplied.  By default, if the envelope already contains one or more documents, DocuSign will initially show the document tagging view when you redirect to the URL.   To start with the envelope&#39;s recipients and documents view instead, examine the URL in the method&#39;s response.  Then change the query parameter from &#x60;send&#x3D;1&#x60; to &#x60;send&#x3D;0&#x60; to start with the recipients/documents view.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeViews)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeViews>> ViewsPostEnvelopeSenderViewAsyncWithHttpInfo (string accountId, string envelopeId, ReturnUrlRequest returnUrlRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeViewsApi->ViewsPostEnvelopeSenderView");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeViewsApi->ViewsPostEnvelopeSenderView");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/views/sender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (returnUrlRequest != null && returnUrlRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(returnUrlRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = returnUrlRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostEnvelopeSenderView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeViews)));
            
        }

    }
}
