/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets login information for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves account information for the authenticated user. Since the API is sessionless, this method does not actually log you in.  Instead, the method returns information about the account or accounts that the authenticated user has access to.  ###### Important: This method must only be used for the [Legacy Header Authentication][legacyheader] flow. Use the [&#x60;AccountServer: userInfo&#x60; method](../../../../guide/authentication/userinfo.html) for the OAuth2 Authentiction Code and Implicit Grant flows.  Each account has a &#x60;baseUrl&#x60; property, returned in the response. Use this &#x60;baseUrl&#x60; in all future API calls as the base of the request URL.  For each account, the &#x60;baseUrl&#x60; property includes the DocuSign server, the API version, and the &#x60;accountId&#x60; property.  It is not uncommon for an authenticated user to have access to more than one account (and more than one &#x60;baseUrl&#x60;). Depending on your integration&#39;s use case, your integration may choose to:  * Use the account whose &#x60;isDefault&#x60; field is &#x60;true&#x60;. * List the available accounts and ask the user to choose one. * Enable the system administrator to set the account that should be used by your integration.  If this method returns successfully, then you also know that the user has successfully authenticated with the DocuSign Signature platform.   [legacyheader]: ../../../../guide/authentication/legacy_auth.html [userinfo]: ../../../../guide/authentication/userinfo.html [authcode]: ../../../../guide/authentication/oa2_auth_code.md [implicit]: ../../../../guide/authentication/oa2_implicit.md 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiPassword">Reserved for DocuSign.  (optional)</param>
        /// <param name="embedAccountIdGuid"> (optional)</param>
        /// <param name="includeAccountIdGuid">When set to **true**, shows the account ID GUID in the response. (optional)</param>
        /// <param name="loginSettings">Determines whether login settings are returned in the response.  Valid Values:  * all -  All the login settings are returned.  * none - no login settings are returned. (optional)</param>
        /// <returns>Authentication</returns>
        Authentication LoginInformationGetLoginInformation (string apiPassword = null, string embedAccountIdGuid = null, string includeAccountIdGuid = null, string loginSettings = null);

        /// <summary>
        /// Gets login information for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves account information for the authenticated user. Since the API is sessionless, this method does not actually log you in.  Instead, the method returns information about the account or accounts that the authenticated user has access to.  ###### Important: This method must only be used for the [Legacy Header Authentication][legacyheader] flow. Use the [&#x60;AccountServer: userInfo&#x60; method](../../../../guide/authentication/userinfo.html) for the OAuth2 Authentiction Code and Implicit Grant flows.  Each account has a &#x60;baseUrl&#x60; property, returned in the response. Use this &#x60;baseUrl&#x60; in all future API calls as the base of the request URL.  For each account, the &#x60;baseUrl&#x60; property includes the DocuSign server, the API version, and the &#x60;accountId&#x60; property.  It is not uncommon for an authenticated user to have access to more than one account (and more than one &#x60;baseUrl&#x60;). Depending on your integration&#39;s use case, your integration may choose to:  * Use the account whose &#x60;isDefault&#x60; field is &#x60;true&#x60;. * List the available accounts and ask the user to choose one. * Enable the system administrator to set the account that should be used by your integration.  If this method returns successfully, then you also know that the user has successfully authenticated with the DocuSign Signature platform.   [legacyheader]: ../../../../guide/authentication/legacy_auth.html [userinfo]: ../../../../guide/authentication/userinfo.html [authcode]: ../../../../guide/authentication/oa2_auth_code.md [implicit]: ../../../../guide/authentication/oa2_implicit.md 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiPassword">Reserved for DocuSign.  (optional)</param>
        /// <param name="embedAccountIdGuid"> (optional)</param>
        /// <param name="includeAccountIdGuid">When set to **true**, shows the account ID GUID in the response. (optional)</param>
        /// <param name="loginSettings">Determines whether login settings are returned in the response.  Valid Values:  * all -  All the login settings are returned.  * none - no login settings are returned. (optional)</param>
        /// <returns>ApiResponse of Authentication</returns>
        ApiResponse<Authentication> LoginInformationGetLoginInformationWithHttpInfo (string apiPassword = null, string embedAccountIdGuid = null, string includeAccountIdGuid = null, string loginSettings = null);
        /// <summary>
        /// Updates the password for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the password for a specified user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginPart">Currently, only the value **password** is supported.</param>
        /// <param name="userPasswordInformation"> (optional)</param>
        /// <returns></returns>
        void LoginInformationPutLoginInformation (string loginPart, UserPasswordInformation userPasswordInformation = null);

        /// <summary>
        /// Updates the password for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the password for a specified user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginPart">Currently, only the value **password** is supported.</param>
        /// <param name="userPasswordInformation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LoginInformationPutLoginInformationWithHttpInfo (string loginPart, UserPasswordInformation userPasswordInformation = null);
        /// <summary>
        /// **Deprecated** Revokes an authorization token. 
        /// </summary>
        /// <remarks>
        /// **Deprecated**  Revokes an OAuth2 authorization server token. After the revocation is complete, a caller must re-authenticate to restore access. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void OAuth2PostRevoke ();

        /// <summary>
        /// **Deprecated** Revokes an authorization token. 
        /// </summary>
        /// <remarks>
        /// **Deprecated**  Revokes an OAuth2 authorization server token. After the revocation is complete, a caller must re-authenticate to restore access. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OAuth2PostRevokeWithHttpInfo ();
        /// <summary>
        /// **Deprecated** Creates an authorization token. 
        /// </summary>
        /// <remarks>
        /// **Deprecated**  Creates an OAuth2 authorization server token endpoint. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>OauthAccess</returns>
        OauthAccess OAuth2PostToken ();

        /// <summary>
        /// **Deprecated** Creates an authorization token. 
        /// </summary>
        /// <remarks>
        /// **Deprecated**  Creates an OAuth2 authorization server token endpoint. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OauthAccess</returns>
        ApiResponse<OauthAccess> OAuth2PostTokenWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets login information for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves account information for the authenticated user. Since the API is sessionless, this method does not actually log you in.  Instead, the method returns information about the account or accounts that the authenticated user has access to.  ###### Important: This method must only be used for the [Legacy Header Authentication][legacyheader] flow. Use the [&#x60;AccountServer: userInfo&#x60; method](../../../../guide/authentication/userinfo.html) for the OAuth2 Authentiction Code and Implicit Grant flows.  Each account has a &#x60;baseUrl&#x60; property, returned in the response. Use this &#x60;baseUrl&#x60; in all future API calls as the base of the request URL.  For each account, the &#x60;baseUrl&#x60; property includes the DocuSign server, the API version, and the &#x60;accountId&#x60; property.  It is not uncommon for an authenticated user to have access to more than one account (and more than one &#x60;baseUrl&#x60;). Depending on your integration&#39;s use case, your integration may choose to:  * Use the account whose &#x60;isDefault&#x60; field is &#x60;true&#x60;. * List the available accounts and ask the user to choose one. * Enable the system administrator to set the account that should be used by your integration.  If this method returns successfully, then you also know that the user has successfully authenticated with the DocuSign Signature platform.   [legacyheader]: ../../../../guide/authentication/legacy_auth.html [userinfo]: ../../../../guide/authentication/userinfo.html [authcode]: ../../../../guide/authentication/oa2_auth_code.md [implicit]: ../../../../guide/authentication/oa2_implicit.md 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiPassword">Reserved for DocuSign.  (optional)</param>
        /// <param name="embedAccountIdGuid"> (optional)</param>
        /// <param name="includeAccountIdGuid">When set to **true**, shows the account ID GUID in the response. (optional)</param>
        /// <param name="loginSettings">Determines whether login settings are returned in the response.  Valid Values:  * all -  All the login settings are returned.  * none - no login settings are returned. (optional)</param>
        /// <returns>Task of Authentication</returns>
        System.Threading.Tasks.Task<Authentication> LoginInformationGetLoginInformationAsync (string apiPassword = null, string embedAccountIdGuid = null, string includeAccountIdGuid = null, string loginSettings = null);

        /// <summary>
        /// Gets login information for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves account information for the authenticated user. Since the API is sessionless, this method does not actually log you in.  Instead, the method returns information about the account or accounts that the authenticated user has access to.  ###### Important: This method must only be used for the [Legacy Header Authentication][legacyheader] flow. Use the [&#x60;AccountServer: userInfo&#x60; method](../../../../guide/authentication/userinfo.html) for the OAuth2 Authentiction Code and Implicit Grant flows.  Each account has a &#x60;baseUrl&#x60; property, returned in the response. Use this &#x60;baseUrl&#x60; in all future API calls as the base of the request URL.  For each account, the &#x60;baseUrl&#x60; property includes the DocuSign server, the API version, and the &#x60;accountId&#x60; property.  It is not uncommon for an authenticated user to have access to more than one account (and more than one &#x60;baseUrl&#x60;). Depending on your integration&#39;s use case, your integration may choose to:  * Use the account whose &#x60;isDefault&#x60; field is &#x60;true&#x60;. * List the available accounts and ask the user to choose one. * Enable the system administrator to set the account that should be used by your integration.  If this method returns successfully, then you also know that the user has successfully authenticated with the DocuSign Signature platform.   [legacyheader]: ../../../../guide/authentication/legacy_auth.html [userinfo]: ../../../../guide/authentication/userinfo.html [authcode]: ../../../../guide/authentication/oa2_auth_code.md [implicit]: ../../../../guide/authentication/oa2_implicit.md 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiPassword">Reserved for DocuSign.  (optional)</param>
        /// <param name="embedAccountIdGuid"> (optional)</param>
        /// <param name="includeAccountIdGuid">When set to **true**, shows the account ID GUID in the response. (optional)</param>
        /// <param name="loginSettings">Determines whether login settings are returned in the response.  Valid Values:  * all -  All the login settings are returned.  * none - no login settings are returned. (optional)</param>
        /// <returns>Task of ApiResponse (Authentication)</returns>
        System.Threading.Tasks.Task<ApiResponse<Authentication>> LoginInformationGetLoginInformationAsyncWithHttpInfo (string apiPassword = null, string embedAccountIdGuid = null, string includeAccountIdGuid = null, string loginSettings = null);
        /// <summary>
        /// Updates the password for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the password for a specified user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginPart">Currently, only the value **password** is supported.</param>
        /// <param name="userPasswordInformation"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LoginInformationPutLoginInformationAsync (string loginPart, UserPasswordInformation userPasswordInformation = null);

        /// <summary>
        /// Updates the password for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the password for a specified user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginPart">Currently, only the value **password** is supported.</param>
        /// <param name="userPasswordInformation"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LoginInformationPutLoginInformationAsyncWithHttpInfo (string loginPart, UserPasswordInformation userPasswordInformation = null);
        /// <summary>
        /// **Deprecated** Revokes an authorization token. 
        /// </summary>
        /// <remarks>
        /// **Deprecated**  Revokes an OAuth2 authorization server token. After the revocation is complete, a caller must re-authenticate to restore access. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OAuth2PostRevokeAsync ();

        /// <summary>
        /// **Deprecated** Revokes an authorization token. 
        /// </summary>
        /// <remarks>
        /// **Deprecated**  Revokes an OAuth2 authorization server token. After the revocation is complete, a caller must re-authenticate to restore access. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OAuth2PostRevokeAsyncWithHttpInfo ();
        /// <summary>
        /// **Deprecated** Creates an authorization token. 
        /// </summary>
        /// <remarks>
        /// **Deprecated**  Creates an OAuth2 authorization server token endpoint. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OauthAccess</returns>
        System.Threading.Tasks.Task<OauthAccess> OAuth2PostTokenAsync ();

        /// <summary>
        /// **Deprecated** Creates an authorization token. 
        /// </summary>
        /// <remarks>
        /// **Deprecated**  Creates an OAuth2 authorization server token endpoint. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OauthAccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<OauthAccess>> OAuth2PostTokenAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets login information for a specified user. Retrieves account information for the authenticated user. Since the API is sessionless, this method does not actually log you in.  Instead, the method returns information about the account or accounts that the authenticated user has access to.  ###### Important: This method must only be used for the [Legacy Header Authentication][legacyheader] flow. Use the [&#x60;AccountServer: userInfo&#x60; method](../../../../guide/authentication/userinfo.html) for the OAuth2 Authentiction Code and Implicit Grant flows.  Each account has a &#x60;baseUrl&#x60; property, returned in the response. Use this &#x60;baseUrl&#x60; in all future API calls as the base of the request URL.  For each account, the &#x60;baseUrl&#x60; property includes the DocuSign server, the API version, and the &#x60;accountId&#x60; property.  It is not uncommon for an authenticated user to have access to more than one account (and more than one &#x60;baseUrl&#x60;). Depending on your integration&#39;s use case, your integration may choose to:  * Use the account whose &#x60;isDefault&#x60; field is &#x60;true&#x60;. * List the available accounts and ask the user to choose one. * Enable the system administrator to set the account that should be used by your integration.  If this method returns successfully, then you also know that the user has successfully authenticated with the DocuSign Signature platform.   [legacyheader]: ../../../../guide/authentication/legacy_auth.html [userinfo]: ../../../../guide/authentication/userinfo.html [authcode]: ../../../../guide/authentication/oa2_auth_code.md [implicit]: ../../../../guide/authentication/oa2_implicit.md 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiPassword">Reserved for DocuSign.  (optional)</param>
        /// <param name="embedAccountIdGuid"> (optional)</param>
        /// <param name="includeAccountIdGuid">When set to **true**, shows the account ID GUID in the response. (optional)</param>
        /// <param name="loginSettings">Determines whether login settings are returned in the response.  Valid Values:  * all -  All the login settings are returned.  * none - no login settings are returned. (optional)</param>
        /// <returns>Authentication</returns>
        public Authentication LoginInformationGetLoginInformation (string apiPassword = null, string embedAccountIdGuid = null, string includeAccountIdGuid = null, string loginSettings = null)
        {
             ApiResponse<Authentication> localVarResponse = LoginInformationGetLoginInformationWithHttpInfo(apiPassword, embedAccountIdGuid, includeAccountIdGuid, loginSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets login information for a specified user. Retrieves account information for the authenticated user. Since the API is sessionless, this method does not actually log you in.  Instead, the method returns information about the account or accounts that the authenticated user has access to.  ###### Important: This method must only be used for the [Legacy Header Authentication][legacyheader] flow. Use the [&#x60;AccountServer: userInfo&#x60; method](../../../../guide/authentication/userinfo.html) for the OAuth2 Authentiction Code and Implicit Grant flows.  Each account has a &#x60;baseUrl&#x60; property, returned in the response. Use this &#x60;baseUrl&#x60; in all future API calls as the base of the request URL.  For each account, the &#x60;baseUrl&#x60; property includes the DocuSign server, the API version, and the &#x60;accountId&#x60; property.  It is not uncommon for an authenticated user to have access to more than one account (and more than one &#x60;baseUrl&#x60;). Depending on your integration&#39;s use case, your integration may choose to:  * Use the account whose &#x60;isDefault&#x60; field is &#x60;true&#x60;. * List the available accounts and ask the user to choose one. * Enable the system administrator to set the account that should be used by your integration.  If this method returns successfully, then you also know that the user has successfully authenticated with the DocuSign Signature platform.   [legacyheader]: ../../../../guide/authentication/legacy_auth.html [userinfo]: ../../../../guide/authentication/userinfo.html [authcode]: ../../../../guide/authentication/oa2_auth_code.md [implicit]: ../../../../guide/authentication/oa2_implicit.md 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiPassword">Reserved for DocuSign.  (optional)</param>
        /// <param name="embedAccountIdGuid"> (optional)</param>
        /// <param name="includeAccountIdGuid">When set to **true**, shows the account ID GUID in the response. (optional)</param>
        /// <param name="loginSettings">Determines whether login settings are returned in the response.  Valid Values:  * all -  All the login settings are returned.  * none - no login settings are returned. (optional)</param>
        /// <returns>ApiResponse of Authentication</returns>
        public ApiResponse< Authentication > LoginInformationGetLoginInformationWithHttpInfo (string apiPassword = null, string embedAccountIdGuid = null, string includeAccountIdGuid = null, string loginSettings = null)
        {

            var localVarPath = "/v2/login_information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiPassword != null) localVarQueryParams.Add("api_password", Configuration.ApiClient.ParameterToString(apiPassword)); // query parameter
            if (embedAccountIdGuid != null) localVarQueryParams.Add("embed_account_id_guid", Configuration.ApiClient.ParameterToString(embedAccountIdGuid)); // query parameter
            if (includeAccountIdGuid != null) localVarQueryParams.Add("include_account_id_guid", Configuration.ApiClient.ParameterToString(includeAccountIdGuid)); // query parameter
            if (loginSettings != null) localVarQueryParams.Add("login_settings", Configuration.ApiClient.ParameterToString(loginSettings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginInformationGetLoginInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authentication>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Authentication) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authentication)));
            
        }

        /// <summary>
        /// Gets login information for a specified user. Retrieves account information for the authenticated user. Since the API is sessionless, this method does not actually log you in.  Instead, the method returns information about the account or accounts that the authenticated user has access to.  ###### Important: This method must only be used for the [Legacy Header Authentication][legacyheader] flow. Use the [&#x60;AccountServer: userInfo&#x60; method](../../../../guide/authentication/userinfo.html) for the OAuth2 Authentiction Code and Implicit Grant flows.  Each account has a &#x60;baseUrl&#x60; property, returned in the response. Use this &#x60;baseUrl&#x60; in all future API calls as the base of the request URL.  For each account, the &#x60;baseUrl&#x60; property includes the DocuSign server, the API version, and the &#x60;accountId&#x60; property.  It is not uncommon for an authenticated user to have access to more than one account (and more than one &#x60;baseUrl&#x60;). Depending on your integration&#39;s use case, your integration may choose to:  * Use the account whose &#x60;isDefault&#x60; field is &#x60;true&#x60;. * List the available accounts and ask the user to choose one. * Enable the system administrator to set the account that should be used by your integration.  If this method returns successfully, then you also know that the user has successfully authenticated with the DocuSign Signature platform.   [legacyheader]: ../../../../guide/authentication/legacy_auth.html [userinfo]: ../../../../guide/authentication/userinfo.html [authcode]: ../../../../guide/authentication/oa2_auth_code.md [implicit]: ../../../../guide/authentication/oa2_implicit.md 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiPassword">Reserved for DocuSign.  (optional)</param>
        /// <param name="embedAccountIdGuid"> (optional)</param>
        /// <param name="includeAccountIdGuid">When set to **true**, shows the account ID GUID in the response. (optional)</param>
        /// <param name="loginSettings">Determines whether login settings are returned in the response.  Valid Values:  * all -  All the login settings are returned.  * none - no login settings are returned. (optional)</param>
        /// <returns>Task of Authentication</returns>
        public async System.Threading.Tasks.Task<Authentication> LoginInformationGetLoginInformationAsync (string apiPassword = null, string embedAccountIdGuid = null, string includeAccountIdGuid = null, string loginSettings = null)
        {
             ApiResponse<Authentication> localVarResponse = await LoginInformationGetLoginInformationAsyncWithHttpInfo(apiPassword, embedAccountIdGuid, includeAccountIdGuid, loginSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets login information for a specified user. Retrieves account information for the authenticated user. Since the API is sessionless, this method does not actually log you in.  Instead, the method returns information about the account or accounts that the authenticated user has access to.  ###### Important: This method must only be used for the [Legacy Header Authentication][legacyheader] flow. Use the [&#x60;AccountServer: userInfo&#x60; method](../../../../guide/authentication/userinfo.html) for the OAuth2 Authentiction Code and Implicit Grant flows.  Each account has a &#x60;baseUrl&#x60; property, returned in the response. Use this &#x60;baseUrl&#x60; in all future API calls as the base of the request URL.  For each account, the &#x60;baseUrl&#x60; property includes the DocuSign server, the API version, and the &#x60;accountId&#x60; property.  It is not uncommon for an authenticated user to have access to more than one account (and more than one &#x60;baseUrl&#x60;). Depending on your integration&#39;s use case, your integration may choose to:  * Use the account whose &#x60;isDefault&#x60; field is &#x60;true&#x60;. * List the available accounts and ask the user to choose one. * Enable the system administrator to set the account that should be used by your integration.  If this method returns successfully, then you also know that the user has successfully authenticated with the DocuSign Signature platform.   [legacyheader]: ../../../../guide/authentication/legacy_auth.html [userinfo]: ../../../../guide/authentication/userinfo.html [authcode]: ../../../../guide/authentication/oa2_auth_code.md [implicit]: ../../../../guide/authentication/oa2_implicit.md 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiPassword">Reserved for DocuSign.  (optional)</param>
        /// <param name="embedAccountIdGuid"> (optional)</param>
        /// <param name="includeAccountIdGuid">When set to **true**, shows the account ID GUID in the response. (optional)</param>
        /// <param name="loginSettings">Determines whether login settings are returned in the response.  Valid Values:  * all -  All the login settings are returned.  * none - no login settings are returned. (optional)</param>
        /// <returns>Task of ApiResponse (Authentication)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Authentication>> LoginInformationGetLoginInformationAsyncWithHttpInfo (string apiPassword = null, string embedAccountIdGuid = null, string includeAccountIdGuid = null, string loginSettings = null)
        {

            var localVarPath = "/v2/login_information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiPassword != null) localVarQueryParams.Add("api_password", Configuration.ApiClient.ParameterToString(apiPassword)); // query parameter
            if (embedAccountIdGuid != null) localVarQueryParams.Add("embed_account_id_guid", Configuration.ApiClient.ParameterToString(embedAccountIdGuid)); // query parameter
            if (includeAccountIdGuid != null) localVarQueryParams.Add("include_account_id_guid", Configuration.ApiClient.ParameterToString(includeAccountIdGuid)); // query parameter
            if (loginSettings != null) localVarQueryParams.Add("login_settings", Configuration.ApiClient.ParameterToString(loginSettings)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginInformationGetLoginInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authentication>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Authentication) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authentication)));
            
        }

        /// <summary>
        /// Updates the password for a specified user. Updates the password for a specified user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginPart">Currently, only the value **password** is supported.</param>
        /// <param name="userPasswordInformation"> (optional)</param>
        /// <returns></returns>
        public void LoginInformationPutLoginInformation (string loginPart, UserPasswordInformation userPasswordInformation = null)
        {
             LoginInformationPutLoginInformationWithHttpInfo(loginPart, userPasswordInformation);
        }

        /// <summary>
        /// Updates the password for a specified user. Updates the password for a specified user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginPart">Currently, only the value **password** is supported.</param>
        /// <param name="userPasswordInformation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LoginInformationPutLoginInformationWithHttpInfo (string loginPart, UserPasswordInformation userPasswordInformation = null)
        {
            // verify the required parameter 'loginPart' is set
            if (loginPart == null)
                throw new ApiException(400, "Missing required parameter 'loginPart' when calling AuthenticationApi->LoginInformationPutLoginInformation");

            var localVarPath = "/v2/login_information/{loginPart}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loginPart != null) localVarPathParams.Add("loginPart", Configuration.ApiClient.ParameterToString(loginPart)); // path parameter
            if (userPasswordInformation != null && userPasswordInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userPasswordInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userPasswordInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginInformationPutLoginInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the password for a specified user. Updates the password for a specified user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginPart">Currently, only the value **password** is supported.</param>
        /// <param name="userPasswordInformation"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LoginInformationPutLoginInformationAsync (string loginPart, UserPasswordInformation userPasswordInformation = null)
        {
             await LoginInformationPutLoginInformationAsyncWithHttpInfo(loginPart, userPasswordInformation);

        }

        /// <summary>
        /// Updates the password for a specified user. Updates the password for a specified user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginPart">Currently, only the value **password** is supported.</param>
        /// <param name="userPasswordInformation"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LoginInformationPutLoginInformationAsyncWithHttpInfo (string loginPart, UserPasswordInformation userPasswordInformation = null)
        {
            // verify the required parameter 'loginPart' is set
            if (loginPart == null)
                throw new ApiException(400, "Missing required parameter 'loginPart' when calling AuthenticationApi->LoginInformationPutLoginInformation");

            var localVarPath = "/v2/login_information/{loginPart}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (loginPart != null) localVarPathParams.Add("loginPart", Configuration.ApiClient.ParameterToString(loginPart)); // path parameter
            if (userPasswordInformation != null && userPasswordInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userPasswordInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userPasswordInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginInformationPutLoginInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// **Deprecated** Revokes an authorization token.  **Deprecated**  Revokes an OAuth2 authorization server token. After the revocation is complete, a caller must re-authenticate to restore access. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void OAuth2PostRevoke ()
        {
             OAuth2PostRevokeWithHttpInfo();
        }

        /// <summary>
        /// **Deprecated** Revokes an authorization token.  **Deprecated**  Revokes an OAuth2 authorization server token. After the revocation is complete, a caller must re-authenticate to restore access. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OAuth2PostRevokeWithHttpInfo ()
        {

            var localVarPath = "/v2/oauth2/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OAuth2PostRevoke", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// **Deprecated** Revokes an authorization token.  **Deprecated**  Revokes an OAuth2 authorization server token. After the revocation is complete, a caller must re-authenticate to restore access. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OAuth2PostRevokeAsync ()
        {
             await OAuth2PostRevokeAsyncWithHttpInfo();

        }

        /// <summary>
        /// **Deprecated** Revokes an authorization token.  **Deprecated**  Revokes an OAuth2 authorization server token. After the revocation is complete, a caller must re-authenticate to restore access. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OAuth2PostRevokeAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/oauth2/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OAuth2PostRevoke", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// **Deprecated** Creates an authorization token.  **Deprecated**  Creates an OAuth2 authorization server token endpoint. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>OauthAccess</returns>
        public OauthAccess OAuth2PostToken ()
        {
             ApiResponse<OauthAccess> localVarResponse = OAuth2PostTokenWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// **Deprecated** Creates an authorization token.  **Deprecated**  Creates an OAuth2 authorization server token endpoint. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OauthAccess</returns>
        public ApiResponse< OauthAccess > OAuth2PostTokenWithHttpInfo ()
        {

            var localVarPath = "/v2/oauth2/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OAuth2PostToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OauthAccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OauthAccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OauthAccess)));
            
        }

        /// <summary>
        /// **Deprecated** Creates an authorization token.  **Deprecated**  Creates an OAuth2 authorization server token endpoint. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OauthAccess</returns>
        public async System.Threading.Tasks.Task<OauthAccess> OAuth2PostTokenAsync ()
        {
             ApiResponse<OauthAccess> localVarResponse = await OAuth2PostTokenAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// **Deprecated** Creates an authorization token.  **Deprecated**  Creates an OAuth2 authorization server token endpoint. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OauthAccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OauthAccess>> OAuth2PostTokenAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/oauth2/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OAuth2PostToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OauthAccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OauthAccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OauthAccess)));
            
        }

    }
}
