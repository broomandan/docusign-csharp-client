/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets a list of the envelopes in the specified folder.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="fromDate"> Only return items on or after this date. If no value is provided, the default search is the previous 30 days.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="ownerEmail"> The email of the folder owner.  (optional)</param>
        /// <param name="ownerName"> The name of the folder owner.  (optional)</param>
        /// <param name="searchText"> The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.  (optional)</param>
        /// <param name="startPosition">The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0. (optional)</param>
        /// <param name="status">The current status of the envelope. If no value is provided, the default search is all/any status. (optional)</param>
        /// <param name="toDate">Only return items up to this date. If no value is provided, the default search is to the current date. (optional)</param>
        /// <returns>FolderItemsResponse</returns>
        FolderItemsResponse FoldersGetFolderItems (string accountId, string folderId, string fromDate = null, string includeItems = null, string ownerEmail = null, string ownerName = null, string searchText = null, string startPosition = null, string status = null, string toDate = null);

        /// <summary>
        /// Gets a list of the envelopes in the specified folder.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="fromDate"> Only return items on or after this date. If no value is provided, the default search is the previous 30 days.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="ownerEmail"> The email of the folder owner.  (optional)</param>
        /// <param name="ownerName"> The name of the folder owner.  (optional)</param>
        /// <param name="searchText"> The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.  (optional)</param>
        /// <param name="startPosition">The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0. (optional)</param>
        /// <param name="status">The current status of the envelope. If no value is provided, the default search is all/any status. (optional)</param>
        /// <param name="toDate">Only return items up to this date. If no value is provided, the default search is to the current date. (optional)</param>
        /// <returns>ApiResponse of FolderItemsResponse</returns>
        ApiResponse<FolderItemsResponse> FoldersGetFolderItemsWithHttpInfo (string accountId, string folderId, string fromDate = null, string includeItems = null, string ownerEmail = null, string ownerName = null, string searchText = null, string startPosition = null, string status = null, string toDate = null);
        /// <summary>
        /// Gets a list of the folders for the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="template">Specifies the items that are returned. Valid values are:   * include - The folder list will return normal folders plus template folders.  * only - Only the list of template folders are returned. (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <returns>Folders</returns>
        Folders FoldersGetFolders (string accountId, string include = null, string includeItems = null, string startPosition = null, string template = null, string userFilter = null);

        /// <summary>
        /// Gets a list of the folders for the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="template">Specifies the items that are returned. Valid values are:   * include - The folder list will return normal folders plus template folders.  * only - Only the list of template folders are returned. (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <returns>ApiResponse of Folders</returns>
        ApiResponse<Folders> FoldersGetFoldersWithHttpInfo (string accountId, string include = null, string includeItems = null, string startPosition = null, string template = null, string userFilter = null);
        /// <summary>
        /// Moves an envelope from its current folder to the specified folder.
        /// </summary>
        /// <remarks>
        /// Moves an envelope from its current folder to the specified folder.  ###### Note: You can use this endpoint to delete envelopes by specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter of the endpoint. Placing an in process envelope (envelope status of &#x60;sent&#x60; or &#x60;delivered&#x60;) in the recycle bin voids the envelope. You can also use this endpoint to delete templates by specifying a template ID instead of an envelope ID in the &#39;envelopeIds&#39; property and specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        /// <returns>Folders</returns>
        Folders FoldersPutFolderById (string accountId, string folderId, FoldersRequest foldersRequest = null);

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder.
        /// </summary>
        /// <remarks>
        /// Moves an envelope from its current folder to the specified folder.  ###### Note: You can use this endpoint to delete envelopes by specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter of the endpoint. Placing an in process envelope (envelope status of &#x60;sent&#x60; or &#x60;delivered&#x60;) in the recycle bin voids the envelope. You can also use this endpoint to delete templates by specifying a template ID instead of an envelope ID in the &#39;envelopeIds&#39; property and specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        /// <returns>ApiResponse of Folders</returns>
        ApiResponse<Folders> FoldersPutFolderByIdWithHttpInfo (string accountId, string folderId, FoldersRequest foldersRequest = null);
        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        /// <param name="all">Specifies that all envelopes that match the criteria are returned. (optional)</param>
        /// <param name="count">Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. (optional)</param>
        /// <param name="fromDate">Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. (optional)</param>
        /// <param name="includeRecipients">When set to **true**, the recipient information is returned in the response. (optional)</param>
        /// <param name="order">Specifies the order in which the list is returned. Valid values are: &#x60;asc&#x60; for ascending order, and &#x60;desc&#x60; for descending order. (optional)</param>
        /// <param name="orderBy">Specifies the property used to sort the list. Valid values are: &#x60;action_required&#x60;, &#x60;created&#x60;, &#x60;completed&#x60;, &#x60;sent&#x60;, &#x60;signer_list&#x60;, &#x60;status&#x60;, or &#x60;subject&#x60;. (optional)</param>
        /// <param name="startPosition">Specifies the the starting location in the result set of the items that are returned. (optional)</param>
        /// <param name="toDate">Specifies the end of the date range to return. (optional)</param>
        /// <returns>FolderItemResponse</returns>
        FolderItemResponse SearchFoldersGetSearchFolderContents (string accountId, string searchFolderId, string all = null, string count = null, string fromDate = null, string includeRecipients = null, string order = null, string orderBy = null, string startPosition = null, string toDate = null);

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        /// <param name="all">Specifies that all envelopes that match the criteria are returned. (optional)</param>
        /// <param name="count">Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. (optional)</param>
        /// <param name="fromDate">Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. (optional)</param>
        /// <param name="includeRecipients">When set to **true**, the recipient information is returned in the response. (optional)</param>
        /// <param name="order">Specifies the order in which the list is returned. Valid values are: &#x60;asc&#x60; for ascending order, and &#x60;desc&#x60; for descending order. (optional)</param>
        /// <param name="orderBy">Specifies the property used to sort the list. Valid values are: &#x60;action_required&#x60;, &#x60;created&#x60;, &#x60;completed&#x60;, &#x60;sent&#x60;, &#x60;signer_list&#x60;, &#x60;status&#x60;, or &#x60;subject&#x60;. (optional)</param>
        /// <param name="startPosition">Specifies the the starting location in the result set of the items that are returned. (optional)</param>
        /// <param name="toDate">Specifies the end of the date range to return. (optional)</param>
        /// <returns>ApiResponse of FolderItemResponse</returns>
        ApiResponse<FolderItemResponse> SearchFoldersGetSearchFolderContentsWithHttpInfo (string accountId, string searchFolderId, string all = null, string count = null, string fromDate = null, string includeRecipients = null, string order = null, string orderBy = null, string startPosition = null, string toDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets a list of the envelopes in the specified folder.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="fromDate"> Only return items on or after this date. If no value is provided, the default search is the previous 30 days.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="ownerEmail"> The email of the folder owner.  (optional)</param>
        /// <param name="ownerName"> The name of the folder owner.  (optional)</param>
        /// <param name="searchText"> The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.  (optional)</param>
        /// <param name="startPosition">The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0. (optional)</param>
        /// <param name="status">The current status of the envelope. If no value is provided, the default search is all/any status. (optional)</param>
        /// <param name="toDate">Only return items up to this date. If no value is provided, the default search is to the current date. (optional)</param>
        /// <returns>Task of FolderItemsResponse</returns>
        System.Threading.Tasks.Task<FolderItemsResponse> FoldersGetFolderItemsAsync (string accountId, string folderId, string fromDate = null, string includeItems = null, string ownerEmail = null, string ownerName = null, string searchText = null, string startPosition = null, string status = null, string toDate = null);

        /// <summary>
        /// Gets a list of the envelopes in the specified folder.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="fromDate"> Only return items on or after this date. If no value is provided, the default search is the previous 30 days.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="ownerEmail"> The email of the folder owner.  (optional)</param>
        /// <param name="ownerName"> The name of the folder owner.  (optional)</param>
        /// <param name="searchText"> The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.  (optional)</param>
        /// <param name="startPosition">The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0. (optional)</param>
        /// <param name="status">The current status of the envelope. If no value is provided, the default search is all/any status. (optional)</param>
        /// <param name="toDate">Only return items up to this date. If no value is provided, the default search is to the current date. (optional)</param>
        /// <returns>Task of ApiResponse (FolderItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderItemsResponse>> FoldersGetFolderItemsAsyncWithHttpInfo (string accountId, string folderId, string fromDate = null, string includeItems = null, string ownerEmail = null, string ownerName = null, string searchText = null, string startPosition = null, string status = null, string toDate = null);
        /// <summary>
        /// Gets a list of the folders for the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="template">Specifies the items that are returned. Valid values are:   * include - The folder list will return normal folders plus template folders.  * only - Only the list of template folders are returned. (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of Folders</returns>
        System.Threading.Tasks.Task<Folders> FoldersGetFoldersAsync (string accountId, string include = null, string includeItems = null, string startPosition = null, string template = null, string userFilter = null);

        /// <summary>
        /// Gets a list of the folders for the account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="template">Specifies the items that are returned. Valid values are:   * include - The folder list will return normal folders plus template folders.  * only - Only the list of template folders are returned. (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of ApiResponse (Folders)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folders>> FoldersGetFoldersAsyncWithHttpInfo (string accountId, string include = null, string includeItems = null, string startPosition = null, string template = null, string userFilter = null);
        /// <summary>
        /// Moves an envelope from its current folder to the specified folder.
        /// </summary>
        /// <remarks>
        /// Moves an envelope from its current folder to the specified folder.  ###### Note: You can use this endpoint to delete envelopes by specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter of the endpoint. Placing an in process envelope (envelope status of &#x60;sent&#x60; or &#x60;delivered&#x60;) in the recycle bin voids the envelope. You can also use this endpoint to delete templates by specifying a template ID instead of an envelope ID in the &#39;envelopeIds&#39; property and specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        /// <returns>Task of Folders</returns>
        System.Threading.Tasks.Task<Folders> FoldersPutFolderByIdAsync (string accountId, string folderId, FoldersRequest foldersRequest = null);

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder.
        /// </summary>
        /// <remarks>
        /// Moves an envelope from its current folder to the specified folder.  ###### Note: You can use this endpoint to delete envelopes by specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter of the endpoint. Placing an in process envelope (envelope status of &#x60;sent&#x60; or &#x60;delivered&#x60;) in the recycle bin voids the envelope. You can also use this endpoint to delete templates by specifying a template ID instead of an envelope ID in the &#39;envelopeIds&#39; property and specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Folders)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folders>> FoldersPutFolderByIdAsyncWithHttpInfo (string accountId, string folderId, FoldersRequest foldersRequest = null);
        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        /// <param name="all">Specifies that all envelopes that match the criteria are returned. (optional)</param>
        /// <param name="count">Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. (optional)</param>
        /// <param name="fromDate">Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. (optional)</param>
        /// <param name="includeRecipients">When set to **true**, the recipient information is returned in the response. (optional)</param>
        /// <param name="order">Specifies the order in which the list is returned. Valid values are: &#x60;asc&#x60; for ascending order, and &#x60;desc&#x60; for descending order. (optional)</param>
        /// <param name="orderBy">Specifies the property used to sort the list. Valid values are: &#x60;action_required&#x60;, &#x60;created&#x60;, &#x60;completed&#x60;, &#x60;sent&#x60;, &#x60;signer_list&#x60;, &#x60;status&#x60;, or &#x60;subject&#x60;. (optional)</param>
        /// <param name="startPosition">Specifies the the starting location in the result set of the items that are returned. (optional)</param>
        /// <param name="toDate">Specifies the end of the date range to return. (optional)</param>
        /// <returns>Task of FolderItemResponse</returns>
        System.Threading.Tasks.Task<FolderItemResponse> SearchFoldersGetSearchFolderContentsAsync (string accountId, string searchFolderId, string all = null, string count = null, string fromDate = null, string includeRecipients = null, string order = null, string orderBy = null, string startPosition = null, string toDate = null);

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        /// <param name="all">Specifies that all envelopes that match the criteria are returned. (optional)</param>
        /// <param name="count">Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. (optional)</param>
        /// <param name="fromDate">Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. (optional)</param>
        /// <param name="includeRecipients">When set to **true**, the recipient information is returned in the response. (optional)</param>
        /// <param name="order">Specifies the order in which the list is returned. Valid values are: &#x60;asc&#x60; for ascending order, and &#x60;desc&#x60; for descending order. (optional)</param>
        /// <param name="orderBy">Specifies the property used to sort the list. Valid values are: &#x60;action_required&#x60;, &#x60;created&#x60;, &#x60;completed&#x60;, &#x60;sent&#x60;, &#x60;signer_list&#x60;, &#x60;status&#x60;, or &#x60;subject&#x60;. (optional)</param>
        /// <param name="startPosition">Specifies the the starting location in the result set of the items that are returned. (optional)</param>
        /// <param name="toDate">Specifies the end of the date range to return. (optional)</param>
        /// <returns>Task of ApiResponse (FolderItemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderItemResponse>> SearchFoldersGetSearchFolderContentsAsyncWithHttpInfo (string accountId, string searchFolderId, string all = null, string count = null, string fromDate = null, string includeRecipients = null, string order = null, string orderBy = null, string startPosition = null, string toDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersApi : IFoldersApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets a list of the envelopes in the specified folder. Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="fromDate"> Only return items on or after this date. If no value is provided, the default search is the previous 30 days.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="ownerEmail"> The email of the folder owner.  (optional)</param>
        /// <param name="ownerName"> The name of the folder owner.  (optional)</param>
        /// <param name="searchText"> The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.  (optional)</param>
        /// <param name="startPosition">The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0. (optional)</param>
        /// <param name="status">The current status of the envelope. If no value is provided, the default search is all/any status. (optional)</param>
        /// <param name="toDate">Only return items up to this date. If no value is provided, the default search is to the current date. (optional)</param>
        /// <returns>FolderItemsResponse</returns>
        public FolderItemsResponse FoldersGetFolderItems (string accountId, string folderId, string fromDate = null, string includeItems = null, string ownerEmail = null, string ownerName = null, string searchText = null, string startPosition = null, string status = null, string toDate = null)
        {
             ApiResponse<FolderItemsResponse> localVarResponse = FoldersGetFolderItemsWithHttpInfo(accountId, folderId, fromDate, includeItems, ownerEmail, ownerName, searchText, startPosition, status, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the envelopes in the specified folder. Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="fromDate"> Only return items on or after this date. If no value is provided, the default search is the previous 30 days.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="ownerEmail"> The email of the folder owner.  (optional)</param>
        /// <param name="ownerName"> The name of the folder owner.  (optional)</param>
        /// <param name="searchText"> The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.  (optional)</param>
        /// <param name="startPosition">The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0. (optional)</param>
        /// <param name="status">The current status of the envelope. If no value is provided, the default search is all/any status. (optional)</param>
        /// <param name="toDate">Only return items up to this date. If no value is provided, the default search is to the current date. (optional)</param>
        /// <returns>ApiResponse of FolderItemsResponse</returns>
        public ApiResponse< FolderItemsResponse > FoldersGetFolderItemsWithHttpInfo (string accountId, string folderId, string fromDate = null, string includeItems = null, string ownerEmail = null, string ownerName = null, string searchText = null, string startPosition = null, string status = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->FoldersGetFolderItems");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->FoldersGetFolderItems");

            var localVarPath = "/v2/accounts/{accountId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (includeItems != null) localVarQueryParams.Add("include_items", Configuration.ApiClient.ParameterToString(includeItems)); // query parameter
            if (ownerEmail != null) localVarQueryParams.Add("owner_email", Configuration.ApiClient.ParameterToString(ownerEmail)); // query parameter
            if (ownerName != null) localVarQueryParams.Add("owner_name", Configuration.ApiClient.ParameterToString(ownerName)); // query parameter
            if (searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetFolderItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderItemsResponse)));
            
        }

        /// <summary>
        /// Gets a list of the envelopes in the specified folder. Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="fromDate"> Only return items on or after this date. If no value is provided, the default search is the previous 30 days.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="ownerEmail"> The email of the folder owner.  (optional)</param>
        /// <param name="ownerName"> The name of the folder owner.  (optional)</param>
        /// <param name="searchText"> The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.  (optional)</param>
        /// <param name="startPosition">The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0. (optional)</param>
        /// <param name="status">The current status of the envelope. If no value is provided, the default search is all/any status. (optional)</param>
        /// <param name="toDate">Only return items up to this date. If no value is provided, the default search is to the current date. (optional)</param>
        /// <returns>Task of FolderItemsResponse</returns>
        public async System.Threading.Tasks.Task<FolderItemsResponse> FoldersGetFolderItemsAsync (string accountId, string folderId, string fromDate = null, string includeItems = null, string ownerEmail = null, string ownerName = null, string searchText = null, string startPosition = null, string status = null, string toDate = null)
        {
             ApiResponse<FolderItemsResponse> localVarResponse = await FoldersGetFolderItemsAsyncWithHttpInfo(accountId, folderId, fromDate, includeItems, ownerEmail, ownerName, searchText, startPosition, status, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the envelopes in the specified folder. Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="fromDate"> Only return items on or after this date. If no value is provided, the default search is the previous 30 days.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="ownerEmail"> The email of the folder owner.  (optional)</param>
        /// <param name="ownerName"> The name of the folder owner.  (optional)</param>
        /// <param name="searchText"> The search text used to search the items of the envelope. The search looks at recipient names and emails, envelope custom fields, sender name, and subject.  (optional)</param>
        /// <param name="startPosition">The position of the folder items to return. This is used for repeated calls, when the number of envelopes returned is too much for one return (calls return 100 envelopes at a time). The default value is 0. (optional)</param>
        /// <param name="status">The current status of the envelope. If no value is provided, the default search is all/any status. (optional)</param>
        /// <param name="toDate">Only return items up to this date. If no value is provided, the default search is to the current date. (optional)</param>
        /// <returns>Task of ApiResponse (FolderItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderItemsResponse>> FoldersGetFolderItemsAsyncWithHttpInfo (string accountId, string folderId, string fromDate = null, string includeItems = null, string ownerEmail = null, string ownerName = null, string searchText = null, string startPosition = null, string status = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->FoldersGetFolderItems");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->FoldersGetFolderItems");

            var localVarPath = "/v2/accounts/{accountId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (includeItems != null) localVarQueryParams.Add("include_items", Configuration.ApiClient.ParameterToString(includeItems)); // query parameter
            if (ownerEmail != null) localVarQueryParams.Add("owner_email", Configuration.ApiClient.ParameterToString(ownerEmail)); // query parameter
            if (ownerName != null) localVarQueryParams.Add("owner_name", Configuration.ApiClient.ParameterToString(ownerName)); // query parameter
            if (searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetFolderItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderItemsResponse)));
            
        }

        /// <summary>
        /// Gets a list of the folders for the account. Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="template">Specifies the items that are returned. Valid values are:   * include - The folder list will return normal folders plus template folders.  * only - Only the list of template folders are returned. (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <returns>Folders</returns>
        public Folders FoldersGetFolders (string accountId, string include = null, string includeItems = null, string startPosition = null, string template = null, string userFilter = null)
        {
             ApiResponse<Folders> localVarResponse = FoldersGetFoldersWithHttpInfo(accountId, include, includeItems, startPosition, template, userFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the folders for the account. Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="template">Specifies the items that are returned. Valid values are:   * include - The folder list will return normal folders plus template folders.  * only - Only the list of template folders are returned. (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <returns>ApiResponse of Folders</returns>
        public ApiResponse< Folders > FoldersGetFoldersWithHttpInfo (string accountId, string include = null, string includeItems = null, string startPosition = null, string template = null, string userFilter = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->FoldersGetFolders");

            var localVarPath = "/v2/accounts/{accountId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (includeItems != null) localVarQueryParams.Add("include_items", Configuration.ApiClient.ParameterToString(includeItems)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (template != null) localVarQueryParams.Add("template", Configuration.ApiClient.ParameterToString(template)); // query parameter
            if (userFilter != null) localVarQueryParams.Add("user_filter", Configuration.ApiClient.ParameterToString(userFilter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Folders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folders)));
            
        }

        /// <summary>
        /// Gets a list of the folders for the account. Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="template">Specifies the items that are returned. Valid values are:   * include - The folder list will return normal folders plus template folders.  * only - Only the list of template folders are returned. (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of Folders</returns>
        public async System.Threading.Tasks.Task<Folders> FoldersGetFoldersAsync (string accountId, string include = null, string includeItems = null, string startPosition = null, string template = null, string userFilter = null)
        {
             ApiResponse<Folders> localVarResponse = await FoldersGetFoldersAsyncWithHttpInfo(accountId, include, includeItems, startPosition, template, userFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the folders for the account. Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the &#x60;template&#x60; query string parameter.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeItems"> (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="template">Specifies the items that are returned. Valid values are:   * include - The folder list will return normal folders plus template folders.  * only - Only the list of template folders are returned. (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of ApiResponse (Folders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Folders>> FoldersGetFoldersAsyncWithHttpInfo (string accountId, string include = null, string includeItems = null, string startPosition = null, string template = null, string userFilter = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->FoldersGetFolders");

            var localVarPath = "/v2/accounts/{accountId}/folders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (includeItems != null) localVarQueryParams.Add("include_items", Configuration.ApiClient.ParameterToString(includeItems)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (template != null) localVarQueryParams.Add("template", Configuration.ApiClient.ParameterToString(template)); // query parameter
            if (userFilter != null) localVarQueryParams.Add("user_filter", Configuration.ApiClient.ParameterToString(userFilter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersGetFolders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Folders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folders)));
            
        }

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder. Moves an envelope from its current folder to the specified folder.  ###### Note: You can use this endpoint to delete envelopes by specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter of the endpoint. Placing an in process envelope (envelope status of &#x60;sent&#x60; or &#x60;delivered&#x60;) in the recycle bin voids the envelope. You can also use this endpoint to delete templates by specifying a template ID instead of an envelope ID in the &#39;envelopeIds&#39; property and specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        /// <returns>Folders</returns>
        public Folders FoldersPutFolderById (string accountId, string folderId, FoldersRequest foldersRequest = null)
        {
             ApiResponse<Folders> localVarResponse = FoldersPutFolderByIdWithHttpInfo(accountId, folderId, foldersRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder. Moves an envelope from its current folder to the specified folder.  ###### Note: You can use this endpoint to delete envelopes by specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter of the endpoint. Placing an in process envelope (envelope status of &#x60;sent&#x60; or &#x60;delivered&#x60;) in the recycle bin voids the envelope. You can also use this endpoint to delete templates by specifying a template ID instead of an envelope ID in the &#39;envelopeIds&#39; property and specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        /// <returns>ApiResponse of Folders</returns>
        public ApiResponse< Folders > FoldersPutFolderByIdWithHttpInfo (string accountId, string folderId, FoldersRequest foldersRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->FoldersPutFolderById");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->FoldersPutFolderById");

            var localVarPath = "/v2/accounts/{accountId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (foldersRequest != null && foldersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(foldersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = foldersRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersPutFolderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Folders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folders)));
            
        }

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder. Moves an envelope from its current folder to the specified folder.  ###### Note: You can use this endpoint to delete envelopes by specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter of the endpoint. Placing an in process envelope (envelope status of &#x60;sent&#x60; or &#x60;delivered&#x60;) in the recycle bin voids the envelope. You can also use this endpoint to delete templates by specifying a template ID instead of an envelope ID in the &#39;envelopeIds&#39; property and specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        /// <returns>Task of Folders</returns>
        public async System.Threading.Tasks.Task<Folders> FoldersPutFolderByIdAsync (string accountId, string folderId, FoldersRequest foldersRequest = null)
        {
             ApiResponse<Folders> localVarResponse = await FoldersPutFolderByIdAsyncWithHttpInfo(accountId, folderId, foldersRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Moves an envelope from its current folder to the specified folder. Moves an envelope from its current folder to the specified folder.  ###### Note: You can use this endpoint to delete envelopes by specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter of the endpoint. Placing an in process envelope (envelope status of &#x60;sent&#x60; or &#x60;delivered&#x60;) in the recycle bin voids the envelope. You can also use this endpoint to delete templates by specifying a template ID instead of an envelope ID in the &#39;envelopeIds&#39; property and specifying &#x60;recyclebin&#x60; in the &#x60;folderId&#x60; parameter. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="foldersRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Folders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Folders>> FoldersPutFolderByIdAsyncWithHttpInfo (string accountId, string folderId, FoldersRequest foldersRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->FoldersPutFolderById");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling FoldersApi->FoldersPutFolderById");

            var localVarPath = "/v2/accounts/{accountId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (foldersRequest != null && foldersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(foldersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = foldersRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FoldersPutFolderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Folders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Folders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Folders)));
            
        }

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria. Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        /// <param name="all">Specifies that all envelopes that match the criteria are returned. (optional)</param>
        /// <param name="count">Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. (optional)</param>
        /// <param name="fromDate">Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. (optional)</param>
        /// <param name="includeRecipients">When set to **true**, the recipient information is returned in the response. (optional)</param>
        /// <param name="order">Specifies the order in which the list is returned. Valid values are: &#x60;asc&#x60; for ascending order, and &#x60;desc&#x60; for descending order. (optional)</param>
        /// <param name="orderBy">Specifies the property used to sort the list. Valid values are: &#x60;action_required&#x60;, &#x60;created&#x60;, &#x60;completed&#x60;, &#x60;sent&#x60;, &#x60;signer_list&#x60;, &#x60;status&#x60;, or &#x60;subject&#x60;. (optional)</param>
        /// <param name="startPosition">Specifies the the starting location in the result set of the items that are returned. (optional)</param>
        /// <param name="toDate">Specifies the end of the date range to return. (optional)</param>
        /// <returns>FolderItemResponse</returns>
        public FolderItemResponse SearchFoldersGetSearchFolderContents (string accountId, string searchFolderId, string all = null, string count = null, string fromDate = null, string includeRecipients = null, string order = null, string orderBy = null, string startPosition = null, string toDate = null)
        {
             ApiResponse<FolderItemResponse> localVarResponse = SearchFoldersGetSearchFolderContentsWithHttpInfo(accountId, searchFolderId, all, count, fromDate, includeRecipients, order, orderBy, startPosition, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria. Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        /// <param name="all">Specifies that all envelopes that match the criteria are returned. (optional)</param>
        /// <param name="count">Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. (optional)</param>
        /// <param name="fromDate">Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. (optional)</param>
        /// <param name="includeRecipients">When set to **true**, the recipient information is returned in the response. (optional)</param>
        /// <param name="order">Specifies the order in which the list is returned. Valid values are: &#x60;asc&#x60; for ascending order, and &#x60;desc&#x60; for descending order. (optional)</param>
        /// <param name="orderBy">Specifies the property used to sort the list. Valid values are: &#x60;action_required&#x60;, &#x60;created&#x60;, &#x60;completed&#x60;, &#x60;sent&#x60;, &#x60;signer_list&#x60;, &#x60;status&#x60;, or &#x60;subject&#x60;. (optional)</param>
        /// <param name="startPosition">Specifies the the starting location in the result set of the items that are returned. (optional)</param>
        /// <param name="toDate">Specifies the end of the date range to return. (optional)</param>
        /// <returns>ApiResponse of FolderItemResponse</returns>
        public ApiResponse< FolderItemResponse > SearchFoldersGetSearchFolderContentsWithHttpInfo (string accountId, string searchFolderId, string all = null, string count = null, string fromDate = null, string includeRecipients = null, string order = null, string orderBy = null, string startPosition = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->SearchFoldersGetSearchFolderContents");
            // verify the required parameter 'searchFolderId' is set
            if (searchFolderId == null)
                throw new ApiException(400, "Missing required parameter 'searchFolderId' when calling FoldersApi->SearchFoldersGetSearchFolderContents");

            var localVarPath = "/v2/accounts/{accountId}/search_folders/{searchFolderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (searchFolderId != null) localVarPathParams.Add("searchFolderId", Configuration.ApiClient.ParameterToString(searchFolderId)); // path parameter
            if (all != null) localVarQueryParams.Add("all", Configuration.ApiClient.ParameterToString(all)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (includeRecipients != null) localVarQueryParams.Add("include_recipients", Configuration.ApiClient.ParameterToString(includeRecipients)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchFoldersGetSearchFolderContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderItemResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderItemResponse)));
            
        }

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria. Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        /// <param name="all">Specifies that all envelopes that match the criteria are returned. (optional)</param>
        /// <param name="count">Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. (optional)</param>
        /// <param name="fromDate">Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. (optional)</param>
        /// <param name="includeRecipients">When set to **true**, the recipient information is returned in the response. (optional)</param>
        /// <param name="order">Specifies the order in which the list is returned. Valid values are: &#x60;asc&#x60; for ascending order, and &#x60;desc&#x60; for descending order. (optional)</param>
        /// <param name="orderBy">Specifies the property used to sort the list. Valid values are: &#x60;action_required&#x60;, &#x60;created&#x60;, &#x60;completed&#x60;, &#x60;sent&#x60;, &#x60;signer_list&#x60;, &#x60;status&#x60;, or &#x60;subject&#x60;. (optional)</param>
        /// <param name="startPosition">Specifies the the starting location in the result set of the items that are returned. (optional)</param>
        /// <param name="toDate">Specifies the end of the date range to return. (optional)</param>
        /// <returns>Task of FolderItemResponse</returns>
        public async System.Threading.Tasks.Task<FolderItemResponse> SearchFoldersGetSearchFolderContentsAsync (string accountId, string searchFolderId, string all = null, string count = null, string fromDate = null, string includeRecipients = null, string order = null, string orderBy = null, string startPosition = null, string toDate = null)
        {
             ApiResponse<FolderItemResponse> localVarResponse = await SearchFoldersGetSearchFolderContentsAsyncWithHttpInfo(accountId, searchFolderId, all, count, fromDate, includeRecipients, order, orderBy, startPosition, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of envelopes in folders matching the specified criteria. Retrieves a list of envelopes that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="searchFolderId">Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.</param>
        /// <param name="all">Specifies that all envelopes that match the criteria are returned. (optional)</param>
        /// <param name="count">Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. (optional)</param>
        /// <param name="fromDate">Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. (optional)</param>
        /// <param name="includeRecipients">When set to **true**, the recipient information is returned in the response. (optional)</param>
        /// <param name="order">Specifies the order in which the list is returned. Valid values are: &#x60;asc&#x60; for ascending order, and &#x60;desc&#x60; for descending order. (optional)</param>
        /// <param name="orderBy">Specifies the property used to sort the list. Valid values are: &#x60;action_required&#x60;, &#x60;created&#x60;, &#x60;completed&#x60;, &#x60;sent&#x60;, &#x60;signer_list&#x60;, &#x60;status&#x60;, or &#x60;subject&#x60;. (optional)</param>
        /// <param name="startPosition">Specifies the the starting location in the result set of the items that are returned. (optional)</param>
        /// <param name="toDate">Specifies the end of the date range to return. (optional)</param>
        /// <returns>Task of ApiResponse (FolderItemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FolderItemResponse>> SearchFoldersGetSearchFolderContentsAsyncWithHttpInfo (string accountId, string searchFolderId, string all = null, string count = null, string fromDate = null, string includeRecipients = null, string order = null, string orderBy = null, string startPosition = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FoldersApi->SearchFoldersGetSearchFolderContents");
            // verify the required parameter 'searchFolderId' is set
            if (searchFolderId == null)
                throw new ApiException(400, "Missing required parameter 'searchFolderId' when calling FoldersApi->SearchFoldersGetSearchFolderContents");

            var localVarPath = "/v2/accounts/{accountId}/search_folders/{searchFolderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (searchFolderId != null) localVarPathParams.Add("searchFolderId", Configuration.ApiClient.ParameterToString(searchFolderId)); // path parameter
            if (all != null) localVarQueryParams.Add("all", Configuration.ApiClient.ParameterToString(all)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (includeRecipients != null) localVarQueryParams.Add("include_recipients", Configuration.ApiClient.ParameterToString(includeRecipients)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchFoldersGetSearchFolderContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FolderItemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FolderItemResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FolderItemResponse)));
            
        }

    }
}
