/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes documents from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>TemplateDocuments</returns>
        TemplateDocuments DocumentsDeleteTemplateDocuments (string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Deletes documents from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of TemplateDocuments</returns>
        ApiResponse<TemplateDocuments> DocumentsDeleteTemplateDocumentsWithHttpInfo (string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Gets PDF documents from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="encrypt"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DocumentsGetTemplateDocument (string accountId, string documentId, string templateId, string encrypt = null, string showChanges = null);

        /// <summary>
        /// Gets PDF documents from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="encrypt"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DocumentsGetTemplateDocumentWithHttpInfo (string accountId, string documentId, string templateId, string encrypt = null, string showChanges = null);
        /// <summary>
        /// Gets a list of documents associated with a template.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>TemplateDocuments</returns>
        TemplateDocuments DocumentsGetTemplateDocuments (string accountId, string templateId);

        /// <summary>
        /// Gets a list of documents associated with a template.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of TemplateDocuments</returns>
        ApiResponse<TemplateDocuments> DocumentsGetTemplateDocumentsWithHttpInfo (string accountId, string templateId);
        /// <summary>
        /// Adds a document to a template document.
        /// </summary>
        /// <remarks>
        /// Adds the specified document to an existing template document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="isEnvelopeDefinition"> (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>EnvelopeDocument</returns>
        EnvelopeDocument DocumentsPutTemplateDocument (string accountId, string documentId, string templateId, string applyDocumentFields = null, string isEnvelopeDefinition = null, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Adds a document to a template document.
        /// </summary>
        /// <remarks>
        /// Adds the specified document to an existing template document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="isEnvelopeDefinition"> (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeDocument</returns>
        ApiResponse<EnvelopeDocument> DocumentsPutTemplateDocumentWithHttpInfo (string accountId, string documentId, string templateId, string applyDocumentFields = null, string isEnvelopeDefinition = null, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Adds documents to a template document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing template document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>TemplateDocuments</returns>
        TemplateDocuments DocumentsPutTemplateDocuments (string accountId, string templateId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Adds documents to a template document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing template document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of TemplateDocuments</returns>
        ApiResponse<TemplateDocuments> DocumentsPutTemplateDocumentsWithHttpInfo (string accountId, string templateId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes documents from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of TemplateDocuments</returns>
        System.Threading.Tasks.Task<TemplateDocuments> DocumentsDeleteTemplateDocumentsAsync (string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Deletes documents from a template.
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents from an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateDocuments>> DocumentsDeleteTemplateDocumentsAsyncWithHttpInfo (string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Gets PDF documents from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="encrypt"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetTemplateDocumentAsync (string accountId, string documentId, string templateId, string encrypt = null, string showChanges = null);

        /// <summary>
        /// Gets PDF documents from a template.
        /// </summary>
        /// <remarks>
        /// Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="encrypt"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetTemplateDocumentAsyncWithHttpInfo (string accountId, string documentId, string templateId, string encrypt = null, string showChanges = null);
        /// <summary>
        /// Gets a list of documents associated with a template.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of TemplateDocuments</returns>
        System.Threading.Tasks.Task<TemplateDocuments> DocumentsGetTemplateDocumentsAsync (string accountId, string templateId);

        /// <summary>
        /// Gets a list of documents associated with a template.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of documents associated with the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (TemplateDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateDocuments>> DocumentsGetTemplateDocumentsAsyncWithHttpInfo (string accountId, string templateId);
        /// <summary>
        /// Adds a document to a template document.
        /// </summary>
        /// <remarks>
        /// Adds the specified document to an existing template document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="isEnvelopeDefinition"> (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of EnvelopeDocument</returns>
        System.Threading.Tasks.Task<EnvelopeDocument> DocumentsPutTemplateDocumentAsync (string accountId, string documentId, string templateId, string applyDocumentFields = null, string isEnvelopeDefinition = null, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Adds a document to a template document.
        /// </summary>
        /// <remarks>
        /// Adds the specified document to an existing template document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="isEnvelopeDefinition"> (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeDocument>> DocumentsPutTemplateDocumentAsyncWithHttpInfo (string accountId, string documentId, string templateId, string applyDocumentFields = null, string isEnvelopeDefinition = null, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Adds documents to a template document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing template document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of TemplateDocuments</returns>
        System.Threading.Tasks.Task<TemplateDocuments> DocumentsPutTemplateDocumentsAsync (string accountId, string templateId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Adds documents to a template document.
        /// </summary>
        /// <remarks>
        /// Adds one or more documents to an existing template document.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateDocuments>> DocumentsPutTemplateDocumentsAsyncWithHttpInfo (string accountId, string templateId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateDocumentsApi : ITemplateDocumentsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateDocumentsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateDocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateDocumentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes documents from a template. Deletes one or more documents from an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>TemplateDocuments</returns>
        public TemplateDocuments DocumentsDeleteTemplateDocuments (string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<TemplateDocuments> localVarResponse = DocumentsDeleteTemplateDocumentsWithHttpInfo(accountId, templateId, envelopeDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes documents from a template. Deletes one or more documents from an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of TemplateDocuments</returns>
        public ApiResponse< TemplateDocuments > DocumentsDeleteTemplateDocumentsWithHttpInfo (string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateDocumentsApi->DocumentsDeleteTemplateDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateDocumentsApi->DocumentsDeleteTemplateDocuments");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsDeleteTemplateDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocuments)));
            
        }

        /// <summary>
        /// Deletes documents from a template. Deletes one or more documents from an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of TemplateDocuments</returns>
        public async System.Threading.Tasks.Task<TemplateDocuments> DocumentsDeleteTemplateDocumentsAsync (string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<TemplateDocuments> localVarResponse = await DocumentsDeleteTemplateDocumentsAsyncWithHttpInfo(accountId, templateId, envelopeDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes documents from a template. Deletes one or more documents from an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateDocuments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateDocuments>> DocumentsDeleteTemplateDocumentsAsyncWithHttpInfo (string accountId, string templateId, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateDocumentsApi->DocumentsDeleteTemplateDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateDocumentsApi->DocumentsDeleteTemplateDocuments");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsDeleteTemplateDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocuments)));
            
        }

        /// <summary>
        /// Gets PDF documents from a template. Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="encrypt"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DocumentsGetTemplateDocument (string accountId, string documentId, string templateId, string encrypt = null, string showChanges = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DocumentsGetTemplateDocumentWithHttpInfo(accountId, documentId, templateId, encrypt, showChanges);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets PDF documents from a template. Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="encrypt"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > DocumentsGetTemplateDocumentWithHttpInfo (string accountId, string documentId, string templateId, string encrypt = null, string showChanges = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateDocumentsApi->DocumentsGetTemplateDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplateDocumentsApi->DocumentsGetTemplateDocument");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateDocumentsApi->DocumentsGetTemplateDocument");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (encrypt != null) localVarQueryParams.Add("encrypt", Configuration.ApiClient.ParameterToString(encrypt)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetTemplateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Gets PDF documents from a template. Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="encrypt"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DocumentsGetTemplateDocumentAsync (string accountId, string documentId, string templateId, string encrypt = null, string showChanges = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DocumentsGetTemplateDocumentAsyncWithHttpInfo(accountId, documentId, templateId, encrypt, showChanges);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets PDF documents from a template. Retrieves one or more PDF documents from the specified template.  You can specify the ID of the document to retrieve or can specify &#x60;combined&#x60; to retrieve all documents in the template as one pdf.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="encrypt"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DocumentsGetTemplateDocumentAsyncWithHttpInfo (string accountId, string documentId, string templateId, string encrypt = null, string showChanges = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateDocumentsApi->DocumentsGetTemplateDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplateDocumentsApi->DocumentsGetTemplateDocument");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateDocumentsApi->DocumentsGetTemplateDocument");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (encrypt != null) localVarQueryParams.Add("encrypt", Configuration.ApiClient.ParameterToString(encrypt)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetTemplateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Gets a list of documents associated with a template. Retrieves a list of documents associated with the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>TemplateDocuments</returns>
        public TemplateDocuments DocumentsGetTemplateDocuments (string accountId, string templateId)
        {
             ApiResponse<TemplateDocuments> localVarResponse = DocumentsGetTemplateDocumentsWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of documents associated with a template. Retrieves a list of documents associated with the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of TemplateDocuments</returns>
        public ApiResponse< TemplateDocuments > DocumentsGetTemplateDocumentsWithHttpInfo (string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateDocumentsApi->DocumentsGetTemplateDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateDocumentsApi->DocumentsGetTemplateDocuments");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetTemplateDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocuments)));
            
        }

        /// <summary>
        /// Gets a list of documents associated with a template. Retrieves a list of documents associated with the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of TemplateDocuments</returns>
        public async System.Threading.Tasks.Task<TemplateDocuments> DocumentsGetTemplateDocumentsAsync (string accountId, string templateId)
        {
             ApiResponse<TemplateDocuments> localVarResponse = await DocumentsGetTemplateDocumentsAsyncWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of documents associated with a template. Retrieves a list of documents associated with the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (TemplateDocuments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateDocuments>> DocumentsGetTemplateDocumentsAsyncWithHttpInfo (string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateDocumentsApi->DocumentsGetTemplateDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateDocumentsApi->DocumentsGetTemplateDocuments");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsGetTemplateDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocuments)));
            
        }

        /// <summary>
        /// Adds a document to a template document. Adds the specified document to an existing template document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="isEnvelopeDefinition"> (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>EnvelopeDocument</returns>
        public EnvelopeDocument DocumentsPutTemplateDocument (string accountId, string documentId, string templateId, string applyDocumentFields = null, string isEnvelopeDefinition = null, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<EnvelopeDocument> localVarResponse = DocumentsPutTemplateDocumentWithHttpInfo(accountId, documentId, templateId, applyDocumentFields, isEnvelopeDefinition, envelopeDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a document to a template document. Adds the specified document to an existing template document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="isEnvelopeDefinition"> (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeDocument</returns>
        public ApiResponse< EnvelopeDocument > DocumentsPutTemplateDocumentWithHttpInfo (string accountId, string documentId, string templateId, string applyDocumentFields = null, string isEnvelopeDefinition = null, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateDocumentsApi->DocumentsPutTemplateDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplateDocumentsApi->DocumentsPutTemplateDocument");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateDocumentsApi->DocumentsPutTemplateDocument");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (applyDocumentFields != null) localVarQueryParams.Add("apply_document_fields", Configuration.ApiClient.ParameterToString(applyDocumentFields)); // query parameter
            if (isEnvelopeDefinition != null) localVarQueryParams.Add("is_envelope_definition", Configuration.ApiClient.ParameterToString(isEnvelopeDefinition)); // query parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsPutTemplateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeDocument)));
            
        }

        /// <summary>
        /// Adds a document to a template document. Adds the specified document to an existing template document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="isEnvelopeDefinition"> (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of EnvelopeDocument</returns>
        public async System.Threading.Tasks.Task<EnvelopeDocument> DocumentsPutTemplateDocumentAsync (string accountId, string documentId, string templateId, string applyDocumentFields = null, string isEnvelopeDefinition = null, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<EnvelopeDocument> localVarResponse = await DocumentsPutTemplateDocumentAsyncWithHttpInfo(accountId, documentId, templateId, applyDocumentFields, isEnvelopeDefinition, envelopeDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a document to a template document. Adds the specified document to an existing template document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="isEnvelopeDefinition"> (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeDocument>> DocumentsPutTemplateDocumentAsyncWithHttpInfo (string accountId, string documentId, string templateId, string applyDocumentFields = null, string isEnvelopeDefinition = null, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateDocumentsApi->DocumentsPutTemplateDocument");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplateDocumentsApi->DocumentsPutTemplateDocument");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateDocumentsApi->DocumentsPutTemplateDocument");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (applyDocumentFields != null) localVarQueryParams.Add("apply_document_fields", Configuration.ApiClient.ParameterToString(applyDocumentFields)); // query parameter
            if (isEnvelopeDefinition != null) localVarQueryParams.Add("is_envelope_definition", Configuration.ApiClient.ParameterToString(isEnvelopeDefinition)); // query parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsPutTemplateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeDocument)));
            
        }

        /// <summary>
        /// Adds documents to a template document. Adds one or more documents to an existing template document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>TemplateDocuments</returns>
        public TemplateDocuments DocumentsPutTemplateDocuments (string accountId, string templateId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<TemplateDocuments> localVarResponse = DocumentsPutTemplateDocumentsWithHttpInfo(accountId, templateId, applyDocumentFields, envelopeDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds documents to a template document. Adds one or more documents to an existing template document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of TemplateDocuments</returns>
        public ApiResponse< TemplateDocuments > DocumentsPutTemplateDocumentsWithHttpInfo (string accountId, string templateId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateDocumentsApi->DocumentsPutTemplateDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateDocumentsApi->DocumentsPutTemplateDocuments");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (applyDocumentFields != null) localVarQueryParams.Add("apply_document_fields", Configuration.ApiClient.ParameterToString(applyDocumentFields)); // query parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsPutTemplateDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocuments)));
            
        }

        /// <summary>
        /// Adds documents to a template document. Adds one or more documents to an existing template document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of TemplateDocuments</returns>
        public async System.Threading.Tasks.Task<TemplateDocuments> DocumentsPutTemplateDocumentsAsync (string accountId, string templateId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<TemplateDocuments> localVarResponse = await DocumentsPutTemplateDocumentsAsyncWithHttpInfo(accountId, templateId, applyDocumentFields, envelopeDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds documents to a template document. Adds one or more documents to an existing template document.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="applyDocumentFields">When **true**, document fields can be added or modified while adding or modifying envelope documents.  (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateDocuments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateDocuments>> DocumentsPutTemplateDocumentsAsyncWithHttpInfo (string accountId, string templateId, string applyDocumentFields = null, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateDocumentsApi->DocumentsPutTemplateDocuments");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateDocumentsApi->DocumentsPutTemplateDocuments");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (applyDocumentFields != null) localVarQueryParams.Add("apply_document_fields", Configuration.ApiClient.ParameterToString(applyDocumentFields)); // query parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsPutTemplateDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateDocuments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateDocuments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateDocuments)));
            
        }

    }
}
