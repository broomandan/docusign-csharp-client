/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvelopesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the envelope audit events for an envelope.
        /// </summary>
        /// <remarks>
        /// Gets the envelope audit events for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>EnvelopeAuditEventResponse</returns>
        EnvelopeAuditEventResponse AuditEventsGetAuditEvents (string accountId, string envelopeId);

        /// <summary>
        /// Gets the envelope audit events for an envelope.
        /// </summary>
        /// <remarks>
        /// Gets the envelope audit events for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of EnvelopeAuditEventResponse</returns>
        ApiResponse<EnvelopeAuditEventResponse> AuditEventsGetAuditEventsWithHttpInfo (string accountId, string envelopeId);
        /// <summary>
        /// Gets the status of a envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the overall status for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When true, envelope information can be added or modified. (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>Envelopes</returns>
        Envelopes EnvelopesGetEnvelope (string accountId, string envelopeId, string advancedUpdate = null, string include = null);

        /// <summary>
        /// Gets the status of a envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the overall status for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When true, envelope information can be added or modified. (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>ApiResponse of Envelopes</returns>
        ApiResponse<Envelopes> EnvelopesGetEnvelopeWithHttpInfo (string accountId, string envelopeId, string advancedUpdate = null, string include = null);
        /// <summary>
        /// Gets status changes for one or more envelopes.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match your request.  A large set of optional filters let you filter by date, by envelope ID, or by status codes.  Your request must include one or more of the following parameters:  * &#x60;from_date&#x60; * &#x60;envelope_ids&#x60; * &#x60;transaction_ids&#x60;   Getting envelope status using &#x60;transaction_ids&#x60; is useful for offline signing situations where it can be used determine if an envelope was created or not. It can be used for the cases where a network connection was lost, before the envelope status could be returned.  To avoid unnecessary database queries, the DocuSign signature platform first checks requests to ensure that the filter set supplied does not result in a zero-size response before querying the database.   For example, for a request with a &#x60;from_to_status&#x60; of &#x60;delivered&#x60; and a current &#x60;status&#x60; of &#x60;created,sent&#x60;, DocuSign will always return an empty list.  This is because the request translates to: find the envelopes that were delivered between the &#x60;from_date&#x60; and &#x60;to_date&#x60; dates that have a current status of &#x60;created&#x60; or &#x60;sent&#x60;. Since an envelope that has been delivered can never have a status of &#x60;created&#x60; or &#x60;sent&#x60;, a zero-size response would be generated.  In this case, DocuSign does not query the database and returns an empty list immediately.   The following table shows the valid current envelope statuses (&#x60;status&#x60; parameter) for the different status qualifiers (&#x60;from_to_status&#x60; parameter) in the request. If the status and status qualifiers in the API request do not contain any of the values shown in the Valid Current Statuses column, then an empty list is returned.  Client applications should check that the statuses (&#x60;status&#x60; parameter) they are requesting make sense for a given &#x60;from_to_status&#x60; parameter value.  | Status Qualifier&lt;br&gt;(&#x60;from_to_status&#x60;) | Effective Status Qualifier | Valid Current Statuses                                                      |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |   | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |   | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |   | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |   | declined                               | StatusChanged              | any, declined, voided, deleted                                              |   | timedout&lt;br&gt;always return zero results | StatusChanged              | any, voided, deleted                                                        |   | voided                                 | Voided                     | any, voided, deleted                                                        |   | deleted                                | StatusChanged              | any, deleted                                                                |    ## Extraneous results  In some cases, a request for a specific envelope status will include envelopes with additional statuses. For example, in a request with a &#x60;from_date&#x60; of 2017-01-01, a &#x60;to_date&#x60; of 2017-01-07 and the status qualifier (&#x60;from_to_status&#x60;) set to &#x60;delivered&#x60;, the response set might contain envelopes that were created during that time period, but not delivered during the time period. As a workaround, check the envelope status values in the result set as needed.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="acStatus">Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed. (optional)</param>
        /// <param name="block">Reserved for DocuSign.  (optional)</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="customField">Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: &#x60;custom_envelope_field_name&#x3D;desired_value&#x60;  The value portion of the query can use partial strings by adding &#39;%&#39; (percent sign) around the custom field query value.   Example 1: If you have an envelope custom field named \&quot;Region\&quot; and you want to search for all envelopes where the value is \&quot;West\&quot; you would use set this parameter to &#x60;Region&#x3D;West&#x60;.   Example 2: To search for envelopes where the &#x60;ApplicationID&#x60; custom field has the value or partial value of \&quot;DocuSign\&quot; in the field, set this parameter to &#x60;ApplicationId&#x3D;%DocuSign%&#x60; This would match envelopes where the custom field&#39;s value is \&quot;DocuSign for Salesforce\&quot; or \&quot;DocuSign envelope\&quot;.   (optional)</param>
        /// <param name="email">Limit results to envelopes sent by the account user with this email address.  &#x60;user_name&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <param name="envelopeIds">Comma separated list of &#x60;envelopeId&#x60; values. (optional)</param>
        /// <param name="exclude">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderTypes">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">Specifies the date and time to start looking for status changes. This parameter is required unless &#x60;envelopeIds&#x60; or &#x60;transactionIds&#x60; are set.   Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 (optional)</param>
        /// <param name="fromToStatus">The status value checked for in the &#x60;from_date&#x60; to &#x60;to_date&#x60; time period.   Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.  If &#x60;Changed&#x60; is specified, then envelopes that changed status during the period will be returned.   For example, if &#x60;Created&#x60; is specified, then envelopes created during the period are found.   The default is &#x60;Changed&#x60;.  (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includePurgeInformation"> (optional)</param>
        /// <param name="intersectingFolderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="order">Reserved for DocuSign.  (optional)</param>
        /// <param name="orderBy">Reserved for DocuSign.  (optional)</param>
        /// <param name="powerformids">Reserved for DocuSign.  (optional)</param>
        /// <param name="searchText">Reserved for DocuSign.  (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="status">A comma-separated list of current envelope statuses to included in the response. Possible values are:  * completed * created * declined * deleted * delivered * processing * sent * signed * timedout * voided  The &#x60;any&#x60; value is equivalent to any status.   (optional)</param>
        /// <param name="toDate">Specifies the date and time to stop looking for status changes. The default is the current date and time.  Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)</param>
        /// <param name="transactionIds">A comma-separated list of envelope transaction IDs. Transaction IDs are only valid for seven days.  (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <param name="userId">Reserved for DocuSign.  (optional)</param>
        /// <param name="userName">Limit results to envelopes sent by the account user with this user name.  &#x60;email&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <returns>EnvelopesInformation</returns>
        EnvelopesInformation EnvelopesGetEnvelopes (string accountId, string acStatus = null, string block = null, string count = null, string customField = null, string email = null, string envelopeIds = null, string exclude = null, string folderIds = null, string folderTypes = null, string fromDate = null, string fromToStatus = null, string include = null, string includePurgeInformation = null, string intersectingFolderIds = null, string order = null, string orderBy = null, string powerformids = null, string searchText = null, string startPosition = null, string status = null, string toDate = null, string transactionIds = null, string userFilter = null, string userId = null, string userName = null);

        /// <summary>
        /// Gets status changes for one or more envelopes.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match your request.  A large set of optional filters let you filter by date, by envelope ID, or by status codes.  Your request must include one or more of the following parameters:  * &#x60;from_date&#x60; * &#x60;envelope_ids&#x60; * &#x60;transaction_ids&#x60;   Getting envelope status using &#x60;transaction_ids&#x60; is useful for offline signing situations where it can be used determine if an envelope was created or not. It can be used for the cases where a network connection was lost, before the envelope status could be returned.  To avoid unnecessary database queries, the DocuSign signature platform first checks requests to ensure that the filter set supplied does not result in a zero-size response before querying the database.   For example, for a request with a &#x60;from_to_status&#x60; of &#x60;delivered&#x60; and a current &#x60;status&#x60; of &#x60;created,sent&#x60;, DocuSign will always return an empty list.  This is because the request translates to: find the envelopes that were delivered between the &#x60;from_date&#x60; and &#x60;to_date&#x60; dates that have a current status of &#x60;created&#x60; or &#x60;sent&#x60;. Since an envelope that has been delivered can never have a status of &#x60;created&#x60; or &#x60;sent&#x60;, a zero-size response would be generated.  In this case, DocuSign does not query the database and returns an empty list immediately.   The following table shows the valid current envelope statuses (&#x60;status&#x60; parameter) for the different status qualifiers (&#x60;from_to_status&#x60; parameter) in the request. If the status and status qualifiers in the API request do not contain any of the values shown in the Valid Current Statuses column, then an empty list is returned.  Client applications should check that the statuses (&#x60;status&#x60; parameter) they are requesting make sense for a given &#x60;from_to_status&#x60; parameter value.  | Status Qualifier&lt;br&gt;(&#x60;from_to_status&#x60;) | Effective Status Qualifier | Valid Current Statuses                                                      |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |   | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |   | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |   | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |   | declined                               | StatusChanged              | any, declined, voided, deleted                                              |   | timedout&lt;br&gt;always return zero results | StatusChanged              | any, voided, deleted                                                        |   | voided                                 | Voided                     | any, voided, deleted                                                        |   | deleted                                | StatusChanged              | any, deleted                                                                |    ## Extraneous results  In some cases, a request for a specific envelope status will include envelopes with additional statuses. For example, in a request with a &#x60;from_date&#x60; of 2017-01-01, a &#x60;to_date&#x60; of 2017-01-07 and the status qualifier (&#x60;from_to_status&#x60;) set to &#x60;delivered&#x60;, the response set might contain envelopes that were created during that time period, but not delivered during the time period. As a workaround, check the envelope status values in the result set as needed.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="acStatus">Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed. (optional)</param>
        /// <param name="block">Reserved for DocuSign.  (optional)</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="customField">Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: &#x60;custom_envelope_field_name&#x3D;desired_value&#x60;  The value portion of the query can use partial strings by adding &#39;%&#39; (percent sign) around the custom field query value.   Example 1: If you have an envelope custom field named \&quot;Region\&quot; and you want to search for all envelopes where the value is \&quot;West\&quot; you would use set this parameter to &#x60;Region&#x3D;West&#x60;.   Example 2: To search for envelopes where the &#x60;ApplicationID&#x60; custom field has the value or partial value of \&quot;DocuSign\&quot; in the field, set this parameter to &#x60;ApplicationId&#x3D;%DocuSign%&#x60; This would match envelopes where the custom field&#39;s value is \&quot;DocuSign for Salesforce\&quot; or \&quot;DocuSign envelope\&quot;.   (optional)</param>
        /// <param name="email">Limit results to envelopes sent by the account user with this email address.  &#x60;user_name&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <param name="envelopeIds">Comma separated list of &#x60;envelopeId&#x60; values. (optional)</param>
        /// <param name="exclude">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderTypes">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">Specifies the date and time to start looking for status changes. This parameter is required unless &#x60;envelopeIds&#x60; or &#x60;transactionIds&#x60; are set.   Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 (optional)</param>
        /// <param name="fromToStatus">The status value checked for in the &#x60;from_date&#x60; to &#x60;to_date&#x60; time period.   Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.  If &#x60;Changed&#x60; is specified, then envelopes that changed status during the period will be returned.   For example, if &#x60;Created&#x60; is specified, then envelopes created during the period are found.   The default is &#x60;Changed&#x60;.  (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includePurgeInformation"> (optional)</param>
        /// <param name="intersectingFolderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="order">Reserved for DocuSign.  (optional)</param>
        /// <param name="orderBy">Reserved for DocuSign.  (optional)</param>
        /// <param name="powerformids">Reserved for DocuSign.  (optional)</param>
        /// <param name="searchText">Reserved for DocuSign.  (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="status">A comma-separated list of current envelope statuses to included in the response. Possible values are:  * completed * created * declined * deleted * delivered * processing * sent * signed * timedout * voided  The &#x60;any&#x60; value is equivalent to any status.   (optional)</param>
        /// <param name="toDate">Specifies the date and time to stop looking for status changes. The default is the current date and time.  Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)</param>
        /// <param name="transactionIds">A comma-separated list of envelope transaction IDs. Transaction IDs are only valid for seven days.  (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <param name="userId">Reserved for DocuSign.  (optional)</param>
        /// <param name="userName">Limit results to envelopes sent by the account user with this user name.  &#x60;email&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <returns>ApiResponse of EnvelopesInformation</returns>
        ApiResponse<EnvelopesInformation> EnvelopesGetEnvelopesWithHttpInfo (string accountId, string acStatus = null, string block = null, string count = null, string customField = null, string email = null, string envelopeIds = null, string exclude = null, string folderIds = null, string folderTypes = null, string fromDate = null, string fromToStatus = null, string include = null, string includePurgeInformation = null, string intersectingFolderIds = null, string order = null, string orderBy = null, string powerformids = null, string searchText = null, string startPosition = null, string status = null, string toDate = null, string transactionIds = null, string userFilter = null, string userId = null, string userName = null);
        /// <summary>
        /// Creates an envelope.
        /// </summary>
        /// <remarks>
        /// Creates and sends an envelope or creates a draft envelope. Envelopes are fundamental resources in the DocuSign platform and are used in a variety of ways.  With this method you can:  * Create and send an envelope   with documents, recipients, and tabs. * Create and send an envelope from a template. * Create and send an envelope from   a combination of documents and templates. * Create a draft envelope.  There are many ways to use envelopes. You can create and send an envelope with a single API request, or you can use several API requests to create, populate, and send envelopes.  When you use this method to create and send an envelope in a single request, the following parameters are required:  | Parameter      | Description | | :- -- -- -- -      | :- -- -- -- -- - | | &#x60;status&#x60;       | Set to &#x60;sent&#x60; to send the envelope to recipients.&lt;br&gt;Set to &#x60;created&#x60; (or don&#39;t set at all) to save the envelope as a draft. | | &#x60;emailSubject&#x60; | The subject of the email used to send the envelope. | | &#x60;documents&#x60;    | The documents to be signed. | | &#x60;recipients&#x60;   | The email addresses of the envelope recipients. |  If you are creating an envelope to be sent later, save it as a draft by either setting &#x60;status&#x60; to &#x60;created&#x60; or leaving it unset. For instance, you can create a draft envelope with documents only. Using additional API requests, you can add the recipients and send the envelope in subsequent API requests.    ## Feature Availability  Not all DocuSign features are available to all accounts. Use DocuSign Admin to check and enable feature availability. You can also check feature availability via the web application. For example, if the web application allows you to send an envelope with SMS authentication, then you can use the same feature through the API.  ## Sending Envelopes  Documents can be included with the Envelopes:create method, or a template can include documents. Documents can be added by using a multipart/form request or by using the &#x60;documentBase64&#x60; property of the [&#x60;document&#x60; object][documentDef].  ### Adding Documents to Requests  There are two ways to add documents to your envelopes:  1. Use the &#x60;documents&#x60; property of the envelope definition. 2. Send this request as a multipart/form-data &#x60;POST&#x60;    with documents added through additional request parts.  Using the &#x60;documents&#x60; property is the simpler option, but the request may be quite large due to the base64 encoding. This example shows how to add a document using this method.  &#x60;&#x60;&#x60;json {   \&quot;status\&quot;: \&quot;sent\&quot;,   \&quot;emailSubject\&quot;: \&quot;Example of one recipient, type signer\&quot;,   \&quot;documents\&quot;: [{     \&quot;documentId\&quot;: \&quot;1\&quot;,     \&quot;name\&quot;: \&quot;contract.pdf\&quot;,     \&quot;documentBase64\&quot;: \&quot;base64 document bytes...\&quot;,   }],   \&quot;recipients\&quot;: {     \&quot;signers\&quot;: [{       \&quot;name\&quot;: \&quot;Lisa Simpson\&quot;,       \&quot;email\&quot;: \&quot;lisa@email.com\&quot;,       \&quot;recipientId\&quot;: \&quot;1\&quot;,       \&quot;routingOrder\&quot;: \&quot;1\&quot;,       \&quot;tabs\&quot;: {         \&quot;signHereTabs\&quot;: [{           \&quot;xPosition\&quot;: \&quot;150\&quot;,           \&quot;yPosition\&quot;: \&quot;200\&quot;,           \&quot;documentId\&quot;: \&quot;1\&quot;,           \&quot;pageNumber\&quot;: \&quot;1\&quot;         }],       }     }]   } } &#x60;&#x60;&#x60;  If you are using a multipart/form-data &#x60;POST&#x60; request, you do not have to base64 encode your documents. You place the envelope definition in one part and the document bytes in another:  &#x60;&#x60;&#x60; - -AAA Content-Type: application/json Content-Disposition: form-data  &lt;ENVELOPE DEFINITION GOES HERE&gt; - -AAA Content-Type:application/pdf Content-Disposition: file; filename&#x3D;\&quot;contract.pdf\&quot;; documentid&#x3D;1  &lt;DOCUMENT BYTES GO HERE&gt; - -AAA- - &#x60;&#x60;&#x60;  ### Using Supplemental Documents  Supplemental documents are supporting materials such as disclosures and other informational documents that need to accompany a document sent for signature. These supplemental documents are available to the signer to view and acknowledge, without making the envelope too large or confusing for signers.  Supplemental documents use the following properties in the [&#x60;document&#x60; object][documentDef].  | Name                  | Type    | Description| | :- -- -- -- -- -- -- -- -- -- - | :- -- -- - || | includeInDownload     | Boolean | When set to **true**, the document is included in the combined document download. The default value is **true| | display               | String  | This string sets the display and behavior properties of the document during signing. The possible values are:&lt;br&gt;&#x60;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;modal&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a modal window. This is the recommended value for supplemental documents.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;download&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a new browser window.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;inline&lt;/code&gt;&lt;br&gt;This value is not used with supplemental documents, but is the default value for all other documents. The document is shown in the normal signing window.&lt;/li&gt;&lt;/ul&gt; | | signerMustAcknowledge | String  | Sets how the signer interacts with the supplemental document. The possible values are:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;no_interaction&lt;/code&gt;&lt;br&gt;No recipient action is required.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view&lt;/code&gt;&lt;br&gt;The recipient is required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;accept&lt;/code&gt;&lt;br&gt;The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view_accept&lt;/code&gt;&lt;br&gt;The recipient is required to view and accept the document.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;                                                                                                                                                    |   [viewtab]: /esign/restapi/Envelopes/EnvelopeRecipientTabs/#view-tab  The [View][viewtab] and Approve tabs are used to set the interactions for individual recipients. The View tab includes a &#x60;required&#x60; property that requires the recipient to view the supplemental document. If the View tab &#x60;required&#x60; property is not set, the recipient can, but is not required to, view the supplemental document.  To use the View and Approve tabs for supplemental documents, the document &#x60;display&#x60; property must be set to &#x60;modal&#x60; or &#x60;download&#x60;.  The actions that the recipient must take depend on the value of the &#x60;signerMustAcknowledge&#x60; document property and whether the signer is assigned View or Approve tabs on the document.  To set the interactions for individual recipients, set the &#x60;signerMustAcknowledge&#x60; property to &#x60;no_interaction&#x60;, then add View and Approve tabs on the appropriate document for the recipient.   The action that a signer must take depends on the value of the &#x60;signerMustAcknowledge&#x60; document property, whether the signer has an Approve tab, and the value of the &#x60;required&#x60; property of the View tab. The following table shows the actions a recipient must take for different combinations of these tabs and properties.    | Document &#x60;signerMustAcknowledge&#x60;property  | Approve Tab | View Tab &#x60;required&#x60; property  | Recipient is required to ...  | | :- -- -                                     | :- -- -       | :- -- -                         | :- -- -                         | | no_interaction                            | No          |  - -                           |  Take no action               | | no_interaction                            | No          |  false                        |  Take no action               | | no_interaction                            | No          |  true                         |  View                         | | no_interaction                            | Yes         |  false                        |  Accept                       | | no_interaction                            | Yes         |  true                         |  View and Accept              | | view                                      | No          |  - -                           |  View                         | | view                                      | Yes         |  - -                           |  View and Accept              | | accept                                    | - -          |  false                        |  Accept                       | | accept                                    | - -          |  true                         |  View and Accept              | | view_accept                               | - -          |  - -                           |  View and Accept              |     ### Recipient Types  An [&#x60;envelopeDefinition&#x60; object][envelopeDef] is used as the method&#39;s body. Envelope recipients can be defined in the envelope or in templates. The &#x60;envelopeDefinition&#x60; object&#39;s &#x60;recipients&#x60; property is an [&#x60;EnvelopeRecipients&#x60; resource object][envelopeRecipientsDef]. It includes arrays of the seven types of recipients defined by DocuSign:  | Recipient type                      | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - || | [Agents][agentDef]                  | An agent recipient can add name and email information for recipients that appear after the agent in routing order.                                                                                                                                                                                                                                                                                                                                                                                  | | [Carbon Copies][ccDef]              | Carbon copy recipients get a copy of the envelope but don&#39;t need to sign, initial, date or add information to any of the documents. This type of recipient can be used in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient&#39;s order in the process flow and when the envelope is completed.                                                                                                                                      | | [Certified Deliveries][certfiedDef] | Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don&#39;t need to sign, initial, date or add information to any of the documents.                                                                                                                                                                                                                                                                                                    | | [Editors][editorDef]                | Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor. | | [In-Person Signers][inPersonDef]    | An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer.                                                                                                                                                                                                                                                                                                                                                                            | | [Intermediaries][intermediaryDef]   | An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.                                                                                                                                                                                                                                                                  | | [Signers][signerDef]                | A signer is a recipient who must sign, initial, date, or add data to form fields on the documents in the envelope.                                                                                                                                                                                                                                                                                                                                                                                  |   Additional information about the different types of recipients is available from the [&#x60;EnvelopeRecipients&#x60; resource page][envelopeRecipientsRes] and from the Developer Center [Recipients][devecenterrecipients] topic.    ### Tabs  Tabs (also referred to as tags and fields in the web application), can be defined in the &#x60;envelopeDefinition&#x60;, in templates, by transforming PDF Form Fields, or by using Composite Templates (see below).  The &#x60;inPersonSigner&#x60;, and &#x60;signer&#x60; recipient objects include a &#x60;tabs&#x60; property. It is an [&#x60;EnvelopeRecipientTabs&#x60; resource object][envRecipientTabsDef] that includes arrays of the different tab types available. See the [&#x60;EnvelopeRecipientTabs&#x60; resource][envRecipientTabsRes] for more information.   ## Using Templates  Envelopes use specific people or groups as recipients. Templates can specify a role, eg &#x60;account_manager.&#x60; When a template is used in an envelope, the roles must be replaced with specific people or groups.  When you create an envelope using a &#x60;templateId&#x60;, the different recipient type objects within the [&#x60;EnvelopeRecipients&#x60; property][envelopeRecipientsDef] are used to assign recipients to the template&#39;s roles via the &#x60;roleName&#x60; property. The recipient objects can also override settings that were specified in the template, and set values for tab fields that were defined in the template.  ### Message Lock  When a template is added or applied to an envelope, and the template has a locked email subject and message, that subject and message are used for the envelope and cannot be changed even if another locked template is subsequently added or applied to the envelope. The &#x60;messageLock&#x60; property is used to lock the email subject and message.  If an email subject or message is entered before adding or applying a template with &#x60;messageLock&#x60; set to **true**, the email subject and message is overwritten with the locked email subject and message from the template.  ## Envelope Status  The status of sent envelopes can be determined through the DocuSign webhook system or by polling. Webhooks are highly recommended: they provide your application with the quickest updates when an envelope&#39;s status changes. DocuSign limits polling to once every 15 minutes or less frequently. See [API Rules and Limits][apirules] for more information and examples.   When a webhook is used, DocuSign calls your application via the URL you provide, with a notification XML message.  See the [Webhook recipe](https://www.docusign.com/developer-center/recipes/webhook-status) for examples and live demos of using webhooks.  ## Webhook Options  The two webhook options, &#x60;eventNotification&#x60; and Connect, use the same notification mechanism and message formats. Use &#x60;eventNotification&#x60; to create a webhook for a specific envelope sent via the API. Connect webhooks can be used for any envelope sent from an account, from any user, from any client. The [Connect guide][connectGuide] discusses the webhook notification message format.  ### eventNotification Webhooks  The Envelopes:create method includes an optional [&#x60;eventNotification&#x60; object][eventNotificationDef] property that adds a webhook to the envelope. &#x60;eventNotification&#x60; webhooks are available for all DocuSign accounts with API access.  ### Connect Webhooks  Connect can be used to create a webhook for all envelopes sent by all users in an account, either through the API or through other DocuSign clients (web, mobile, etc). Connect configurations are independent of specific envelopes. A Connect configuration includes a filter that may be used to limit the webhook to specific users, envelope statuses, etc.  You can create and manage Connect configurations with the [ConnectConfigurations resource][connectConfigurationsRes]. Configurations can also be created and managed from DocuSign Admin accessed by selecting **Go to Admin** from the menu next to your picture on the DocuSign web app. See the **Connect** topic in the **Integrations** section of DocuSign Admin. For repeatability, and to minimize support questions, creating Connect configurations via the API is recommended, especially for ISVs.  Connect is available for some DocuSign account types. Please contact DocuSign Sales for more information.  ## Composite Templates  The Composite Templates feature, like [compositing in film production](https://en.wikipedia.org/wiki/Compositing), enables you to overlay document, recipient, and tab definitions from multiple sources, including PDF Form Field definitions, templates defined on the server, and more.  Each Composite Template consists of optional elements: server templates, inline templates, PDF Metadata templates, and documents.  * The Composite Template ID is an optional element used to identify the   composite template. It is used as a reference when adding document   object information via a multipart HTTP message. If used, the document   content-disposition must include the &#x60;compositeTemplateId&#x60; to which the   document should be added. If &#x60;compositeTemplateId&#x60; is not specified in   the content-disposition, the document is applied based on the   &#x60;documentId&#x60; only. If no document object is specified, the composite   template inherits the first document.  * Server Templates are server-side templates stored on the DocuSign   platform. If supplied, they are overlaid into the envelope in the order   of their Sequence value.  * Inline Templates provide a container to add documents, recipients,   tabs, and custom fields. If inline templates are supplied, they are   overlaid into the envelope in the order of their Sequence value.  * Document objects are optional structures that provide a container to   pass in a document or form. If this object is not included, the   composite template inherits the *first* document it finds from a server   template or inline template, starting with the lowest sequence value.  PDF Form objects are only transformed from the document object. DocuSign does not derive PDF form properties from server templates or inline templates. To instruct DocuSign to transform fields from the PDF form, set &#x60;transformPdfFields&#x60; to **true** for the document.  See [PDF Form Field Transformation](#pdf-form-field-transformation) for more information about process.  * PDF Metadata Templates provide a container to embed design-time   template information into a PDF document. DocuSign uses this information   when processing the Envelope. This convention allows the document to   carry the signing instructions with it, so that less information needs   to be provided at run-time through an inline template or synchronized   with an external structure like a server template. PDF Metadata   templates are stored in the Metadata layer of a PDF in accordance with   Acrobat&#39;s XMP specification. DocuSign will only find PDF Metadata   templates inside documents passed in the Document object (see below). If   supplied, the PDF metadata template will be overlaid into the envelope   in the order of its Sequence value.  ### Compositing the Definitions  Each Composite Template adds a new document and templates overlay into the envelope. For each Composite Template these rules are applied:  * Templates are overlaid in the order of their Sequence value. * If Document is not passed into the Composite Template&#39;s &#x60;document&#x60;   field, the *first* template&#39;s document (based on the template&#39;s Sequence   value) is used. * Last in wins in all cases except for the document (i.e. envelope   information, recipient information, secure field information). There is   no special casing.  For example, if you want higher security on a tab, then that needs to be specified in a later template (by sequence number) than where the tab is included. If you want higher security on a role recipient, then it needs to be in a later template than where that role recipient is specified.  * Recipient matching is based on Recipient Role and Routing Order. If   there are matches, the recipient information is merged together. A final   pass is done on all Composite Templates, after all template overlays   have been applied, to collapse recipients with the same email, username   and routing order. This prevents having the same recipients at the same   routing order.  * If you specify in a template that a recipient is locked, once that   recipient is overlaid the recipient attributes can no longer be changed.   The only items that can be changed for the recipient in this case are   the email, username, access code and IDCheckInformationInput.  * Tab matching is based on Tab Labels, Tab Types and Documents. If a Tab   Label matches but the Document is not supplied, the Tab is overlaid for   all the Documents.  For example, if you have a simple inline template with only one tab in it with a label and a value, the Signature, Initial, Company, Envelope ID, User Name tabs will only be matched and collapsed if they fall in the exact same X and Y locations.  * &#x60;roleName&#x60; and &#x60;tabLabel&#x60; matching is case sensitive.  * The &#x60;defaultRecipient&#x60; property enables you to specify which recipient   the tabs generated from a PDF form are mapped to. You can also set PDF   form generated tabs to a recipient other than the default recipient by   specifying the mapping of the tab label that is created to one of the   template recipients.  * You can use &#x60;tabLabel&#x60; wild carding to map a series of tabs from the PDF   form. To use this you must end a tab label with \&quot;\\*\&quot; and then the system   matches tabs that start with the label.  * If no &#x60;defaultRecipient&#x60; is specified, tabs must be explicitly mapped   to recipients in order to be generated from the form. Unmapped form   objects will not be generated into their DocuSign equivalents. (In the   case of Signature/Initials, the tabs will be disregarded entirely; in   the case of pdf text fields, the field data will be flattened on the   Envelope document, but there will not be a corresponding DocuSign data   tab.)  ### Including the Document Content for Composite Templates  Document content can be supplied inline, using the &#x60;documentBase64&#x60; or can be included in a multipart HTTP message. If a multipart message is used and there are multiple Composite Templates, the document content-disposition can include the &#x60;compositeTemplateId&#x60; to which the document should be added. Using the &#x60;compositeTemplateId&#x60; sets which documents are associated with particular composite templates. An example of this usage is:  &#x60;&#x60;&#x60; - -5cd3320a-5aac-4453-b3a4-cbb52a4cba5d Content-Type: application/pdf Content-Disposition: file; filename&#x3D;\&quot;eula.pdf\&quot;; documentId&#x3D;1; compositeTemplateId&#x3D;\&quot;1\&quot; Content-Transfer-Encoding: base64 &#x60;&#x60;&#x60;  ### PDF Form Field Transformation  Only the following PDF Form FieldTypes are transformed to DocuSign tabs:  * CheckBox * DateTime * ListBox * Numeric * Password * Radio * Signature, * Text  Field Properties that are transformed:  * Read Only * Required * Max Length * Positions * Initial Data  When transforming a PDF Form Digital Signature Field, the following rules apply. Any other PDF Form Digital Signature Field will be transformed to a DocuSign Signature tab   | If the PDF Field Name contains                              | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                       | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional       | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                 | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional | Optional Initials             |   When transforming PDF Form Text Fields, the following rules apply. Any other PDF Form Text Field will be transformed to a DocuSign data (text) tab.   | If the PDF Field Name contains                                        | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                                 | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional                 | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                           | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional           | Optional Initials             | | DocuSignEnvelopeID or&lt;br&gt; eSignEnvelopeID                             | EnvelopeID                    | | DocuSignCompany or&lt;br&gt; eSignCompany                                   | Company                       | | DocuSignDateSigned or&lt;br&gt; eSignDateSigned                             | Date Signed                   | | DocuSignTitle or&lt;br&gt; eSignTitle                                       | Title                         | | DocuSignFullName or&lt;br&gt; eSignFullName                                 | Full Name                     | | DocuSignSignerAttachmentOptional or&lt;br&gt; eSignSignerAttachmentOptional | Optional Signer Attachment    |   PDF Form Field Names that include &#x60;DocuSignIgnoreTransform&#x60; or &#x60;eSignIgnoreTransform&#x60; will not be transformed.  PDF Form Date fields that include &#x60;DocuSignDateSigned&#x60; or &#x60;eSignDateSigned&#x60; will be transformed to Date Signed fields.  ## Template Email Subject Merge Fields  This feature enables you to insert recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s &#x60;roleName&#x60;, are added to the &#x60;emailSubject&#x60; when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient.  If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  * To add a recipient&#39;s name in the subject line add the following text   in the &#x60;emailSubject&#x60; when creating the template or when sending an   envelope from a template:     &#x60;[[&lt;roleName&gt;_UserName]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;&#x60;  * To add a recipient&#39;s email address in the subject line add the   following text in the emailSubject when creating the template or when   sending an envelope from a template:     &#x60;[[&lt;roleName&gt;_Email]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;&#x60;  In both cases &#x60;&lt;roleName&gt;&#x60; is the recipient&#39;s &#x60;roleName&#x60; in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.  ## Branding an Envelope  The following rules are used to determine the &#x60;brandId&#x60; used in an envelope:  * If a &#x60;brandId&#x60; is specified in the envelope or template   and that &#x60;brandId&#x60; is available to the account,   that brand is used in the envelope. * If more than one template is used in an envelope,   and more than one &#x60;brandId&#x60; is specified,   the first &#x60;brandId&#x60; specified is used throughout the envelope. * In cases where no brand is specified,   and the sender belongs to a group:   - If there is only one brand associated with the group,     then that brand is used in the envelope.   - Otherwise, the account&#39;s default signing brand is used. * For envelopes that do not meet any of the previous criteria,   the account&#39;s default signing brand is used for the envelope.   ## BCC Email Address Feature  The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options.  Do **not** use this feature to send a copy of the envelope to a recipient who does not need to sign. Use a Carbon Copy or Certified Delivery Recipient type instead.  ## Merge Recipient Roles for Draft Envelopes  When an envelope with multiple templates is sent, the recipients from the templates are merged according to the template roles, and empty recipients are removed. When creating an envelope with multiple templates, but not sending it (keeping it in a created state), duplicate recipients are not merged, which could leave duplicate recipients in the envelope.  To prevent this, the query parameter &#x60;merge_roles_on_draft&#x60; should be added when posting a draft envelope (&#x60;status&#x60; is &#x60;created&#x60;) with multiple templates. Doing this will merge template roles and remove empty recipients.   DocuSign recommends that the &#x60;merge_roles_on_draft&#x60; query parameter be used any time you are creating an envelope with multiple templates and keeping it in draft (&#x60;status&#x60; is &#x60;created&#x60;) status.   [agentDef]:                 #/definitions/agent [apirules]:                 /esign/guide/appendix/resource_limits.html#api-rules-and-limits [ccDef]:                     #/definitions/carbonCopy [certfiedDef]:               #/definitions/certifiedDelivery [connectConfigurationsRes]: /esign/restapi/Connect/ConnectConfigurations/ [connectGuide]:             https://www.docusign.com/supportdocs/pdf/connect-guide.pdf [devecenterrecipients]:     https://www.docusign.com/developer-center/explore/features/recipients [documentDef]:               #/definitions/document [editorDef]:                 #/definitions/editor [envelopeDef]:               #/definitions/envelopeDefinition [envelopeRecipientsDef]:     #/definitions/EnvelopeRecipients [envelopeRecipientsRes]:    /esign/restapi/Envelopes/EnvelopeRecipients/ [envRecipientTabsDef]:       #/definitions/EnvelopeRecipientTabs [envRecipientTabsRes]:      /esign/restapi/Envelopes/EnvelopeRecipientTabs/ [eventNotificationDef]:      #/definitions/eventNotification [inPersonDef]:               #/definitions/inPersonSigner [intermediaryDef]:           #/definitions/intermediary [signerDef]:                 #/definitions/signer 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="cdseMode">Reserved for DocuSign.  (optional)</param>
        /// <param name="completedDocumentsOnly">Reserved for DocuSign.  (optional)</param>
        /// <param name="mergeRolesOnDraft">When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the &#x60;status&#x60; field is set to &#x60;created&#x60;.)  ###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates. (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>EnvelopeSummary</returns>
        EnvelopeSummary EnvelopesPostEnvelopes (string accountId, string cdseMode = null, string completedDocumentsOnly = null, string mergeRolesOnDraft = null, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Creates an envelope.
        /// </summary>
        /// <remarks>
        /// Creates and sends an envelope or creates a draft envelope. Envelopes are fundamental resources in the DocuSign platform and are used in a variety of ways.  With this method you can:  * Create and send an envelope   with documents, recipients, and tabs. * Create and send an envelope from a template. * Create and send an envelope from   a combination of documents and templates. * Create a draft envelope.  There are many ways to use envelopes. You can create and send an envelope with a single API request, or you can use several API requests to create, populate, and send envelopes.  When you use this method to create and send an envelope in a single request, the following parameters are required:  | Parameter      | Description | | :- -- -- -- -      | :- -- -- -- -- - | | &#x60;status&#x60;       | Set to &#x60;sent&#x60; to send the envelope to recipients.&lt;br&gt;Set to &#x60;created&#x60; (or don&#39;t set at all) to save the envelope as a draft. | | &#x60;emailSubject&#x60; | The subject of the email used to send the envelope. | | &#x60;documents&#x60;    | The documents to be signed. | | &#x60;recipients&#x60;   | The email addresses of the envelope recipients. |  If you are creating an envelope to be sent later, save it as a draft by either setting &#x60;status&#x60; to &#x60;created&#x60; or leaving it unset. For instance, you can create a draft envelope with documents only. Using additional API requests, you can add the recipients and send the envelope in subsequent API requests.    ## Feature Availability  Not all DocuSign features are available to all accounts. Use DocuSign Admin to check and enable feature availability. You can also check feature availability via the web application. For example, if the web application allows you to send an envelope with SMS authentication, then you can use the same feature through the API.  ## Sending Envelopes  Documents can be included with the Envelopes:create method, or a template can include documents. Documents can be added by using a multipart/form request or by using the &#x60;documentBase64&#x60; property of the [&#x60;document&#x60; object][documentDef].  ### Adding Documents to Requests  There are two ways to add documents to your envelopes:  1. Use the &#x60;documents&#x60; property of the envelope definition. 2. Send this request as a multipart/form-data &#x60;POST&#x60;    with documents added through additional request parts.  Using the &#x60;documents&#x60; property is the simpler option, but the request may be quite large due to the base64 encoding. This example shows how to add a document using this method.  &#x60;&#x60;&#x60;json {   \&quot;status\&quot;: \&quot;sent\&quot;,   \&quot;emailSubject\&quot;: \&quot;Example of one recipient, type signer\&quot;,   \&quot;documents\&quot;: [{     \&quot;documentId\&quot;: \&quot;1\&quot;,     \&quot;name\&quot;: \&quot;contract.pdf\&quot;,     \&quot;documentBase64\&quot;: \&quot;base64 document bytes...\&quot;,   }],   \&quot;recipients\&quot;: {     \&quot;signers\&quot;: [{       \&quot;name\&quot;: \&quot;Lisa Simpson\&quot;,       \&quot;email\&quot;: \&quot;lisa@email.com\&quot;,       \&quot;recipientId\&quot;: \&quot;1\&quot;,       \&quot;routingOrder\&quot;: \&quot;1\&quot;,       \&quot;tabs\&quot;: {         \&quot;signHereTabs\&quot;: [{           \&quot;xPosition\&quot;: \&quot;150\&quot;,           \&quot;yPosition\&quot;: \&quot;200\&quot;,           \&quot;documentId\&quot;: \&quot;1\&quot;,           \&quot;pageNumber\&quot;: \&quot;1\&quot;         }],       }     }]   } } &#x60;&#x60;&#x60;  If you are using a multipart/form-data &#x60;POST&#x60; request, you do not have to base64 encode your documents. You place the envelope definition in one part and the document bytes in another:  &#x60;&#x60;&#x60; - -AAA Content-Type: application/json Content-Disposition: form-data  &lt;ENVELOPE DEFINITION GOES HERE&gt; - -AAA Content-Type:application/pdf Content-Disposition: file; filename&#x3D;\&quot;contract.pdf\&quot;; documentid&#x3D;1  &lt;DOCUMENT BYTES GO HERE&gt; - -AAA- - &#x60;&#x60;&#x60;  ### Using Supplemental Documents  Supplemental documents are supporting materials such as disclosures and other informational documents that need to accompany a document sent for signature. These supplemental documents are available to the signer to view and acknowledge, without making the envelope too large or confusing for signers.  Supplemental documents use the following properties in the [&#x60;document&#x60; object][documentDef].  | Name                  | Type    | Description| | :- -- -- -- -- -- -- -- -- -- - | :- -- -- - || | includeInDownload     | Boolean | When set to **true**, the document is included in the combined document download. The default value is **true| | display               | String  | This string sets the display and behavior properties of the document during signing. The possible values are:&lt;br&gt;&#x60;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;modal&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a modal window. This is the recommended value for supplemental documents.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;download&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a new browser window.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;inline&lt;/code&gt;&lt;br&gt;This value is not used with supplemental documents, but is the default value for all other documents. The document is shown in the normal signing window.&lt;/li&gt;&lt;/ul&gt; | | signerMustAcknowledge | String  | Sets how the signer interacts with the supplemental document. The possible values are:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;no_interaction&lt;/code&gt;&lt;br&gt;No recipient action is required.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view&lt;/code&gt;&lt;br&gt;The recipient is required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;accept&lt;/code&gt;&lt;br&gt;The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view_accept&lt;/code&gt;&lt;br&gt;The recipient is required to view and accept the document.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;                                                                                                                                                    |   [viewtab]: /esign/restapi/Envelopes/EnvelopeRecipientTabs/#view-tab  The [View][viewtab] and Approve tabs are used to set the interactions for individual recipients. The View tab includes a &#x60;required&#x60; property that requires the recipient to view the supplemental document. If the View tab &#x60;required&#x60; property is not set, the recipient can, but is not required to, view the supplemental document.  To use the View and Approve tabs for supplemental documents, the document &#x60;display&#x60; property must be set to &#x60;modal&#x60; or &#x60;download&#x60;.  The actions that the recipient must take depend on the value of the &#x60;signerMustAcknowledge&#x60; document property and whether the signer is assigned View or Approve tabs on the document.  To set the interactions for individual recipients, set the &#x60;signerMustAcknowledge&#x60; property to &#x60;no_interaction&#x60;, then add View and Approve tabs on the appropriate document for the recipient.   The action that a signer must take depends on the value of the &#x60;signerMustAcknowledge&#x60; document property, whether the signer has an Approve tab, and the value of the &#x60;required&#x60; property of the View tab. The following table shows the actions a recipient must take for different combinations of these tabs and properties.    | Document &#x60;signerMustAcknowledge&#x60;property  | Approve Tab | View Tab &#x60;required&#x60; property  | Recipient is required to ...  | | :- -- -                                     | :- -- -       | :- -- -                         | :- -- -                         | | no_interaction                            | No          |  - -                           |  Take no action               | | no_interaction                            | No          |  false                        |  Take no action               | | no_interaction                            | No          |  true                         |  View                         | | no_interaction                            | Yes         |  false                        |  Accept                       | | no_interaction                            | Yes         |  true                         |  View and Accept              | | view                                      | No          |  - -                           |  View                         | | view                                      | Yes         |  - -                           |  View and Accept              | | accept                                    | - -          |  false                        |  Accept                       | | accept                                    | - -          |  true                         |  View and Accept              | | view_accept                               | - -          |  - -                           |  View and Accept              |     ### Recipient Types  An [&#x60;envelopeDefinition&#x60; object][envelopeDef] is used as the method&#39;s body. Envelope recipients can be defined in the envelope or in templates. The &#x60;envelopeDefinition&#x60; object&#39;s &#x60;recipients&#x60; property is an [&#x60;EnvelopeRecipients&#x60; resource object][envelopeRecipientsDef]. It includes arrays of the seven types of recipients defined by DocuSign:  | Recipient type                      | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - || | [Agents][agentDef]                  | An agent recipient can add name and email information for recipients that appear after the agent in routing order.                                                                                                                                                                                                                                                                                                                                                                                  | | [Carbon Copies][ccDef]              | Carbon copy recipients get a copy of the envelope but don&#39;t need to sign, initial, date or add information to any of the documents. This type of recipient can be used in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient&#39;s order in the process flow and when the envelope is completed.                                                                                                                                      | | [Certified Deliveries][certfiedDef] | Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don&#39;t need to sign, initial, date or add information to any of the documents.                                                                                                                                                                                                                                                                                                    | | [Editors][editorDef]                | Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor. | | [In-Person Signers][inPersonDef]    | An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer.                                                                                                                                                                                                                                                                                                                                                                            | | [Intermediaries][intermediaryDef]   | An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.                                                                                                                                                                                                                                                                  | | [Signers][signerDef]                | A signer is a recipient who must sign, initial, date, or add data to form fields on the documents in the envelope.                                                                                                                                                                                                                                                                                                                                                                                  |   Additional information about the different types of recipients is available from the [&#x60;EnvelopeRecipients&#x60; resource page][envelopeRecipientsRes] and from the Developer Center [Recipients][devecenterrecipients] topic.    ### Tabs  Tabs (also referred to as tags and fields in the web application), can be defined in the &#x60;envelopeDefinition&#x60;, in templates, by transforming PDF Form Fields, or by using Composite Templates (see below).  The &#x60;inPersonSigner&#x60;, and &#x60;signer&#x60; recipient objects include a &#x60;tabs&#x60; property. It is an [&#x60;EnvelopeRecipientTabs&#x60; resource object][envRecipientTabsDef] that includes arrays of the different tab types available. See the [&#x60;EnvelopeRecipientTabs&#x60; resource][envRecipientTabsRes] for more information.   ## Using Templates  Envelopes use specific people or groups as recipients. Templates can specify a role, eg &#x60;account_manager.&#x60; When a template is used in an envelope, the roles must be replaced with specific people or groups.  When you create an envelope using a &#x60;templateId&#x60;, the different recipient type objects within the [&#x60;EnvelopeRecipients&#x60; property][envelopeRecipientsDef] are used to assign recipients to the template&#39;s roles via the &#x60;roleName&#x60; property. The recipient objects can also override settings that were specified in the template, and set values for tab fields that were defined in the template.  ### Message Lock  When a template is added or applied to an envelope, and the template has a locked email subject and message, that subject and message are used for the envelope and cannot be changed even if another locked template is subsequently added or applied to the envelope. The &#x60;messageLock&#x60; property is used to lock the email subject and message.  If an email subject or message is entered before adding or applying a template with &#x60;messageLock&#x60; set to **true**, the email subject and message is overwritten with the locked email subject and message from the template.  ## Envelope Status  The status of sent envelopes can be determined through the DocuSign webhook system or by polling. Webhooks are highly recommended: they provide your application with the quickest updates when an envelope&#39;s status changes. DocuSign limits polling to once every 15 minutes or less frequently. See [API Rules and Limits][apirules] for more information and examples.   When a webhook is used, DocuSign calls your application via the URL you provide, with a notification XML message.  See the [Webhook recipe](https://www.docusign.com/developer-center/recipes/webhook-status) for examples and live demos of using webhooks.  ## Webhook Options  The two webhook options, &#x60;eventNotification&#x60; and Connect, use the same notification mechanism and message formats. Use &#x60;eventNotification&#x60; to create a webhook for a specific envelope sent via the API. Connect webhooks can be used for any envelope sent from an account, from any user, from any client. The [Connect guide][connectGuide] discusses the webhook notification message format.  ### eventNotification Webhooks  The Envelopes:create method includes an optional [&#x60;eventNotification&#x60; object][eventNotificationDef] property that adds a webhook to the envelope. &#x60;eventNotification&#x60; webhooks are available for all DocuSign accounts with API access.  ### Connect Webhooks  Connect can be used to create a webhook for all envelopes sent by all users in an account, either through the API or through other DocuSign clients (web, mobile, etc). Connect configurations are independent of specific envelopes. A Connect configuration includes a filter that may be used to limit the webhook to specific users, envelope statuses, etc.  You can create and manage Connect configurations with the [ConnectConfigurations resource][connectConfigurationsRes]. Configurations can also be created and managed from DocuSign Admin accessed by selecting **Go to Admin** from the menu next to your picture on the DocuSign web app. See the **Connect** topic in the **Integrations** section of DocuSign Admin. For repeatability, and to minimize support questions, creating Connect configurations via the API is recommended, especially for ISVs.  Connect is available for some DocuSign account types. Please contact DocuSign Sales for more information.  ## Composite Templates  The Composite Templates feature, like [compositing in film production](https://en.wikipedia.org/wiki/Compositing), enables you to overlay document, recipient, and tab definitions from multiple sources, including PDF Form Field definitions, templates defined on the server, and more.  Each Composite Template consists of optional elements: server templates, inline templates, PDF Metadata templates, and documents.  * The Composite Template ID is an optional element used to identify the   composite template. It is used as a reference when adding document   object information via a multipart HTTP message. If used, the document   content-disposition must include the &#x60;compositeTemplateId&#x60; to which the   document should be added. If &#x60;compositeTemplateId&#x60; is not specified in   the content-disposition, the document is applied based on the   &#x60;documentId&#x60; only. If no document object is specified, the composite   template inherits the first document.  * Server Templates are server-side templates stored on the DocuSign   platform. If supplied, they are overlaid into the envelope in the order   of their Sequence value.  * Inline Templates provide a container to add documents, recipients,   tabs, and custom fields. If inline templates are supplied, they are   overlaid into the envelope in the order of their Sequence value.  * Document objects are optional structures that provide a container to   pass in a document or form. If this object is not included, the   composite template inherits the *first* document it finds from a server   template or inline template, starting with the lowest sequence value.  PDF Form objects are only transformed from the document object. DocuSign does not derive PDF form properties from server templates or inline templates. To instruct DocuSign to transform fields from the PDF form, set &#x60;transformPdfFields&#x60; to **true** for the document.  See [PDF Form Field Transformation](#pdf-form-field-transformation) for more information about process.  * PDF Metadata Templates provide a container to embed design-time   template information into a PDF document. DocuSign uses this information   when processing the Envelope. This convention allows the document to   carry the signing instructions with it, so that less information needs   to be provided at run-time through an inline template or synchronized   with an external structure like a server template. PDF Metadata   templates are stored in the Metadata layer of a PDF in accordance with   Acrobat&#39;s XMP specification. DocuSign will only find PDF Metadata   templates inside documents passed in the Document object (see below). If   supplied, the PDF metadata template will be overlaid into the envelope   in the order of its Sequence value.  ### Compositing the Definitions  Each Composite Template adds a new document and templates overlay into the envelope. For each Composite Template these rules are applied:  * Templates are overlaid in the order of their Sequence value. * If Document is not passed into the Composite Template&#39;s &#x60;document&#x60;   field, the *first* template&#39;s document (based on the template&#39;s Sequence   value) is used. * Last in wins in all cases except for the document (i.e. envelope   information, recipient information, secure field information). There is   no special casing.  For example, if you want higher security on a tab, then that needs to be specified in a later template (by sequence number) than where the tab is included. If you want higher security on a role recipient, then it needs to be in a later template than where that role recipient is specified.  * Recipient matching is based on Recipient Role and Routing Order. If   there are matches, the recipient information is merged together. A final   pass is done on all Composite Templates, after all template overlays   have been applied, to collapse recipients with the same email, username   and routing order. This prevents having the same recipients at the same   routing order.  * If you specify in a template that a recipient is locked, once that   recipient is overlaid the recipient attributes can no longer be changed.   The only items that can be changed for the recipient in this case are   the email, username, access code and IDCheckInformationInput.  * Tab matching is based on Tab Labels, Tab Types and Documents. If a Tab   Label matches but the Document is not supplied, the Tab is overlaid for   all the Documents.  For example, if you have a simple inline template with only one tab in it with a label and a value, the Signature, Initial, Company, Envelope ID, User Name tabs will only be matched and collapsed if they fall in the exact same X and Y locations.  * &#x60;roleName&#x60; and &#x60;tabLabel&#x60; matching is case sensitive.  * The &#x60;defaultRecipient&#x60; property enables you to specify which recipient   the tabs generated from a PDF form are mapped to. You can also set PDF   form generated tabs to a recipient other than the default recipient by   specifying the mapping of the tab label that is created to one of the   template recipients.  * You can use &#x60;tabLabel&#x60; wild carding to map a series of tabs from the PDF   form. To use this you must end a tab label with \&quot;\\*\&quot; and then the system   matches tabs that start with the label.  * If no &#x60;defaultRecipient&#x60; is specified, tabs must be explicitly mapped   to recipients in order to be generated from the form. Unmapped form   objects will not be generated into their DocuSign equivalents. (In the   case of Signature/Initials, the tabs will be disregarded entirely; in   the case of pdf text fields, the field data will be flattened on the   Envelope document, but there will not be a corresponding DocuSign data   tab.)  ### Including the Document Content for Composite Templates  Document content can be supplied inline, using the &#x60;documentBase64&#x60; or can be included in a multipart HTTP message. If a multipart message is used and there are multiple Composite Templates, the document content-disposition can include the &#x60;compositeTemplateId&#x60; to which the document should be added. Using the &#x60;compositeTemplateId&#x60; sets which documents are associated with particular composite templates. An example of this usage is:  &#x60;&#x60;&#x60; - -5cd3320a-5aac-4453-b3a4-cbb52a4cba5d Content-Type: application/pdf Content-Disposition: file; filename&#x3D;\&quot;eula.pdf\&quot;; documentId&#x3D;1; compositeTemplateId&#x3D;\&quot;1\&quot; Content-Transfer-Encoding: base64 &#x60;&#x60;&#x60;  ### PDF Form Field Transformation  Only the following PDF Form FieldTypes are transformed to DocuSign tabs:  * CheckBox * DateTime * ListBox * Numeric * Password * Radio * Signature, * Text  Field Properties that are transformed:  * Read Only * Required * Max Length * Positions * Initial Data  When transforming a PDF Form Digital Signature Field, the following rules apply. Any other PDF Form Digital Signature Field will be transformed to a DocuSign Signature tab   | If the PDF Field Name contains                              | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                       | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional       | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                 | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional | Optional Initials             |   When transforming PDF Form Text Fields, the following rules apply. Any other PDF Form Text Field will be transformed to a DocuSign data (text) tab.   | If the PDF Field Name contains                                        | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                                 | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional                 | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                           | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional           | Optional Initials             | | DocuSignEnvelopeID or&lt;br&gt; eSignEnvelopeID                             | EnvelopeID                    | | DocuSignCompany or&lt;br&gt; eSignCompany                                   | Company                       | | DocuSignDateSigned or&lt;br&gt; eSignDateSigned                             | Date Signed                   | | DocuSignTitle or&lt;br&gt; eSignTitle                                       | Title                         | | DocuSignFullName or&lt;br&gt; eSignFullName                                 | Full Name                     | | DocuSignSignerAttachmentOptional or&lt;br&gt; eSignSignerAttachmentOptional | Optional Signer Attachment    |   PDF Form Field Names that include &#x60;DocuSignIgnoreTransform&#x60; or &#x60;eSignIgnoreTransform&#x60; will not be transformed.  PDF Form Date fields that include &#x60;DocuSignDateSigned&#x60; or &#x60;eSignDateSigned&#x60; will be transformed to Date Signed fields.  ## Template Email Subject Merge Fields  This feature enables you to insert recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s &#x60;roleName&#x60;, are added to the &#x60;emailSubject&#x60; when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient.  If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  * To add a recipient&#39;s name in the subject line add the following text   in the &#x60;emailSubject&#x60; when creating the template or when sending an   envelope from a template:     &#x60;[[&lt;roleName&gt;_UserName]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;&#x60;  * To add a recipient&#39;s email address in the subject line add the   following text in the emailSubject when creating the template or when   sending an envelope from a template:     &#x60;[[&lt;roleName&gt;_Email]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;&#x60;  In both cases &#x60;&lt;roleName&gt;&#x60; is the recipient&#39;s &#x60;roleName&#x60; in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.  ## Branding an Envelope  The following rules are used to determine the &#x60;brandId&#x60; used in an envelope:  * If a &#x60;brandId&#x60; is specified in the envelope or template   and that &#x60;brandId&#x60; is available to the account,   that brand is used in the envelope. * If more than one template is used in an envelope,   and more than one &#x60;brandId&#x60; is specified,   the first &#x60;brandId&#x60; specified is used throughout the envelope. * In cases where no brand is specified,   and the sender belongs to a group:   - If there is only one brand associated with the group,     then that brand is used in the envelope.   - Otherwise, the account&#39;s default signing brand is used. * For envelopes that do not meet any of the previous criteria,   the account&#39;s default signing brand is used for the envelope.   ## BCC Email Address Feature  The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options.  Do **not** use this feature to send a copy of the envelope to a recipient who does not need to sign. Use a Carbon Copy or Certified Delivery Recipient type instead.  ## Merge Recipient Roles for Draft Envelopes  When an envelope with multiple templates is sent, the recipients from the templates are merged according to the template roles, and empty recipients are removed. When creating an envelope with multiple templates, but not sending it (keeping it in a created state), duplicate recipients are not merged, which could leave duplicate recipients in the envelope.  To prevent this, the query parameter &#x60;merge_roles_on_draft&#x60; should be added when posting a draft envelope (&#x60;status&#x60; is &#x60;created&#x60;) with multiple templates. Doing this will merge template roles and remove empty recipients.   DocuSign recommends that the &#x60;merge_roles_on_draft&#x60; query parameter be used any time you are creating an envelope with multiple templates and keeping it in draft (&#x60;status&#x60; is &#x60;created&#x60;) status.   [agentDef]:                 #/definitions/agent [apirules]:                 /esign/guide/appendix/resource_limits.html#api-rules-and-limits [ccDef]:                     #/definitions/carbonCopy [certfiedDef]:               #/definitions/certifiedDelivery [connectConfigurationsRes]: /esign/restapi/Connect/ConnectConfigurations/ [connectGuide]:             https://www.docusign.com/supportdocs/pdf/connect-guide.pdf [devecenterrecipients]:     https://www.docusign.com/developer-center/explore/features/recipients [documentDef]:               #/definitions/document [editorDef]:                 #/definitions/editor [envelopeDef]:               #/definitions/envelopeDefinition [envelopeRecipientsDef]:     #/definitions/EnvelopeRecipients [envelopeRecipientsRes]:    /esign/restapi/Envelopes/EnvelopeRecipients/ [envRecipientTabsDef]:       #/definitions/EnvelopeRecipientTabs [envRecipientTabsRes]:      /esign/restapi/Envelopes/EnvelopeRecipientTabs/ [eventNotificationDef]:      #/definitions/eventNotification [inPersonDef]:               #/definitions/inPersonSigner [intermediaryDef]:           #/definitions/intermediary [signerDef]:                 #/definitions/signer 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="cdseMode">Reserved for DocuSign.  (optional)</param>
        /// <param name="completedDocumentsOnly">Reserved for DocuSign.  (optional)</param>
        /// <param name="mergeRolesOnDraft">When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the &#x60;status&#x60; field is set to &#x60;created&#x60;.)  ###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates. (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeSummary</returns>
        ApiResponse<EnvelopeSummary> EnvelopesPostEnvelopesWithHttpInfo (string accountId, string cdseMode = null, string completedDocumentsOnly = null, string mergeRolesOnDraft = null, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft
        /// </summary>
        /// <remarks>
        /// The Put Envelopes endpoint provides the following functionality:  * Sends the specified single draft envelope. Add {\&quot;status\&quot;:\&quot;sent\&quot;} to the request body to send the envelope.  * Voids the specified in-process envelope. Add {\&quot;status\&quot;:\&quot;voided\&quot;, \&quot;voidedReason\&quot;:\&quot;The reason for voiding the envelope\&quot;} to the request body to void the envelope.  * Replaces the current email subject and message for a draft envelope. Add {\&quot;emailSubject\&quot;:\&quot;subject\&quot;,  \&quot;emailBlurb\&quot;:\&quot;message\&quot;}  to the request body to modify the subject and message.  * Place the envelope documents and envelope metadata in a purge queue so that this information is removed from the DocuSign system. Add {\&quot;purgeState\&quot;:\&quot;purge type\&quot;} to the request body.  *Additional information on purging documents*  The purge request can only be used for completed envelopes that are not marked as the authoritative copy. The requesting user must have permission to purge documents and must be the sender (the requesting user can act as the sender using Send On Behalf Of).  ###### Note: If you have set the Document Retention policy on your account, envelope documents are automatically placed in the purge queue and the warning emails are sent at the end of the retention period.  ###### Note: You can set the Document Retention policy in the Classic DocuSign Experience by specifying the number of days to retain documents.  ###### Note: Setting a Document Retention policy is the same as setting a schedule for purging documents.  When the purge request is initiated the envelope documents, or documents and envelope metadata, are placed in a purge queue for deletion in 14 days. A warning email notification is sent to the sender and recipients associated with the envelope, notifying them that the envelope documents will be deleted in 14 days and providing a link to the documents. A second email is sent 7 days later with the same message. At the end of the 14-day period, the envelope documents are deleted from the system.  If &#x60;purgeState&#x3D;\&quot;documents_queued\&quot;&#x60; is used in the request, then only the documents are deleted and any corresponding attachments and tabs remain in the DocuSign system. If &#x60;purgeState&#x3D; \&quot;documents_and_metadata_queued\&quot;&#x60; is used in the request, then the documents, attachments, and tabs are deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes. (optional)</param>
        /// <param name="resendEnvelope">When set to **true**, sends the specified envelope again. (optional)</param>
        /// <param name="envelopes"> (optional)</param>
        /// <returns>EnvelopeUpdateSummary</returns>
        EnvelopeUpdateSummary EnvelopesPutEnvelope (string accountId, string envelopeId, string advancedUpdate = null, string resendEnvelope = null, Envelopes envelopes = null);

        /// <summary>
        /// Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft
        /// </summary>
        /// <remarks>
        /// The Put Envelopes endpoint provides the following functionality:  * Sends the specified single draft envelope. Add {\&quot;status\&quot;:\&quot;sent\&quot;} to the request body to send the envelope.  * Voids the specified in-process envelope. Add {\&quot;status\&quot;:\&quot;voided\&quot;, \&quot;voidedReason\&quot;:\&quot;The reason for voiding the envelope\&quot;} to the request body to void the envelope.  * Replaces the current email subject and message for a draft envelope. Add {\&quot;emailSubject\&quot;:\&quot;subject\&quot;,  \&quot;emailBlurb\&quot;:\&quot;message\&quot;}  to the request body to modify the subject and message.  * Place the envelope documents and envelope metadata in a purge queue so that this information is removed from the DocuSign system. Add {\&quot;purgeState\&quot;:\&quot;purge type\&quot;} to the request body.  *Additional information on purging documents*  The purge request can only be used for completed envelopes that are not marked as the authoritative copy. The requesting user must have permission to purge documents and must be the sender (the requesting user can act as the sender using Send On Behalf Of).  ###### Note: If you have set the Document Retention policy on your account, envelope documents are automatically placed in the purge queue and the warning emails are sent at the end of the retention period.  ###### Note: You can set the Document Retention policy in the Classic DocuSign Experience by specifying the number of days to retain documents.  ###### Note: Setting a Document Retention policy is the same as setting a schedule for purging documents.  When the purge request is initiated the envelope documents, or documents and envelope metadata, are placed in a purge queue for deletion in 14 days. A warning email notification is sent to the sender and recipients associated with the envelope, notifying them that the envelope documents will be deleted in 14 days and providing a link to the documents. A second email is sent 7 days later with the same message. At the end of the 14-day period, the envelope documents are deleted from the system.  If &#x60;purgeState&#x3D;\&quot;documents_queued\&quot;&#x60; is used in the request, then only the documents are deleted and any corresponding attachments and tabs remain in the DocuSign system. If &#x60;purgeState&#x3D; \&quot;documents_and_metadata_queued\&quot;&#x60; is used in the request, then the documents, attachments, and tabs are deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes. (optional)</param>
        /// <param name="resendEnvelope">When set to **true**, sends the specified envelope again. (optional)</param>
        /// <param name="envelopes"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeUpdateSummary</returns>
        ApiResponse<EnvelopeUpdateSummary> EnvelopesPutEnvelopeWithHttpInfo (string accountId, string envelopeId, string advancedUpdate = null, string resendEnvelope = null, Envelopes envelopes = null);
        /// <summary>
        /// Gets the envelope status for the specified envelopes.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope status for the specified envelopes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="email">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">The date/time setting that specifies when the request begins checking for status changes for envelopes in the account.  This is required unless parameters &#x60;envelopeIds&#x60; and/or &#x60;transactionIds&#x60; are set. (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="toDate">Optional date/time setting that specifies the last date/time  or envelope status changes in the result set.   Default: \&quot;now\&quot;, the time that you call the method.   (optional)</param>
        /// <param name="envelopeIdsRequest"> (optional)</param>
        /// <returns>EnvelopesInformation</returns>
        EnvelopesInformation EnvelopesPutStatus (string accountId, string email = null, string fromDate = null, string startPosition = null, string toDate = null, EnvelopeIdsRequest envelopeIdsRequest = null);

        /// <summary>
        /// Gets the envelope status for the specified envelopes.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope status for the specified envelopes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="email">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">The date/time setting that specifies when the request begins checking for status changes for envelopes in the account.  This is required unless parameters &#x60;envelopeIds&#x60; and/or &#x60;transactionIds&#x60; are set. (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="toDate">Optional date/time setting that specifies the last date/time  or envelope status changes in the result set.   Default: \&quot;now\&quot;, the time that you call the method.   (optional)</param>
        /// <param name="envelopeIdsRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopesInformation</returns>
        ApiResponse<EnvelopesInformation> EnvelopesPutStatusWithHttpInfo (string accountId, string email = null, string fromDate = null, string startPosition = null, string toDate = null, EnvelopeIdsRequest envelopeIdsRequest = null);
        /// <summary>
        /// Gets envelope notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Notification</returns>
        Notification NotificationGetEnvelopesEnvelopeIdNotification (string accountId, string envelopeId);

        /// <summary>
        /// Gets envelope notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> NotificationGetEnvelopesEnvelopeIdNotificationWithHttpInfo (string accountId, string envelopeId);
        /// <summary>
        /// Sets envelope notification (Reminders/Expirations) structure for an existing envelope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeNotificationRequest"> (optional)</param>
        /// <returns>Notification</returns>
        Notification NotificationPutEnvelopesEnvelopeIdNotification (string accountId, string envelopeId, EnvelopeNotificationRequest envelopeNotificationRequest = null);

        /// <summary>
        /// Sets envelope notification (Reminders/Expirations) structure for an existing envelope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeNotificationRequest"> (optional)</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> NotificationPutEnvelopesEnvelopeIdNotificationWithHttpInfo (string accountId, string envelopeId, EnvelopeNotificationRequest envelopeNotificationRequest = null);
        /// <summary>
        /// Deletes a page from a document in an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in an envelope based on the page number.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns></returns>
        void PagesDeletePage (string accountId, string documentId, string envelopeId, string pageNumber);

        /// <summary>
        /// Deletes a page from a document in an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in an envelope based on the page number.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PagesDeletePageWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber);
        /// <summary>
        /// Gets a page image from an envelope for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="dpi">Sets the dpi for the image. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PagesGetPageImage (string accountId, string documentId, string envelopeId, string pageNumber, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null);

        /// <summary>
        /// Gets a page image from an envelope for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="dpi">Sets the dpi for the image. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PagesGetPageImageWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null);
        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>PageImages</returns>
        PageImages PagesGetPageImages (string accountId, string documentId, string envelopeId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null);

        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>ApiResponse of PageImages</returns>
        ApiResponse<PageImages> PagesGetPageImagesWithHttpInfo (string accountId, string documentId, string envelopeId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null);
        /// <summary>
        /// Rotates page image from an envelope for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from an envelope for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns></returns>
        void PagesPutPageImage (string accountId, string documentId, string envelopeId, string pageNumber, PageRequest pageRequest = null);

        /// <summary>
        /// Rotates page image from an envelope for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from an envelope for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PagesPutPageImageWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber, PageRequest pageRequest = null);
        /// <summary>
        /// Gets the initials image for a user.
        /// </summary>
        /// <remarks>
        /// Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user id and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RecipientsGetRecipientInitialsImage (string accountId, string envelopeId, string recipientId, string includeChrome = null);

        /// <summary>
        /// Gets the initials image for a user.
        /// </summary>
        /// <remarks>
        /// Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user id and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RecipientsGetRecipientInitialsImageWithHttpInfo (string accountId, string envelopeId, string recipientId, string includeChrome = null);
        /// <summary>
        /// Gets signature information for a signer or sign-in-person recipient.
        /// </summary>
        /// <remarks>
        /// Retrieves signature information for a signer or sign-in-person recipient.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>UserSignatures</returns>
        UserSignatures RecipientsGetRecipientSignature (string accountId, string envelopeId, string recipientId);

        /// <summary>
        /// Gets signature information for a signer or sign-in-person recipient.
        /// </summary>
        /// <remarks>
        /// Retrieves signature information for a signer or sign-in-person recipient.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>ApiResponse of UserSignatures</returns>
        ApiResponse<UserSignatures> RecipientsGetRecipientSignatureWithHttpInfo (string accountId, string envelopeId, string recipientId);
        /// <summary>
        /// Retrieve signature image information for a signer/sign-in-person recipient.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that don&#39;t properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">When set to **true**, indicates the chromed version of the signature image should be retrieved. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RecipientsGetRecipientSignatureImage (string accountId, string envelopeId, string recipientId, string includeChrome = null);

        /// <summary>
        /// Retrieve signature image information for a signer/sign-in-person recipient.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that don&#39;t properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">When set to **true**, indicates the chromed version of the signature image should be retrieved. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RecipientsGetRecipientSignatureImageWithHttpInfo (string accountId, string envelopeId, string recipientId, string includeChrome = null);
        /// <summary>
        /// Sets the initials image for an accountless signer.
        /// </summary>
        /// <remarks>
        /// Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns></returns>
        void RecipientsPutRecipientInitialsImage (string accountId, string envelopeId, string recipientId);

        /// <summary>
        /// Sets the initials image for an accountless signer.
        /// </summary>
        /// <remarks>
        /// Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RecipientsPutRecipientInitialsImageWithHttpInfo (string accountId, string envelopeId, string recipientId);
        /// <summary>
        /// Sets the signature image for an accountless signer.
        /// </summary>
        /// <remarks>
        /// Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns></returns>
        void RecipientsPutRecipientSignatureImage (string accountId, string envelopeId, string recipientId);

        /// <summary>
        /// Sets the signature image for an accountless signer.
        /// </summary>
        /// <remarks>
        /// Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RecipientsPutRecipientSignatureImageWithHttpInfo (string accountId, string envelopeId, string recipientId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the envelope audit events for an envelope.
        /// </summary>
        /// <remarks>
        /// Gets the envelope audit events for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of EnvelopeAuditEventResponse</returns>
        System.Threading.Tasks.Task<EnvelopeAuditEventResponse> AuditEventsGetAuditEventsAsync (string accountId, string envelopeId);

        /// <summary>
        /// Gets the envelope audit events for an envelope.
        /// </summary>
        /// <remarks>
        /// Gets the envelope audit events for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (EnvelopeAuditEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeAuditEventResponse>> AuditEventsGetAuditEventsAsyncWithHttpInfo (string accountId, string envelopeId);
        /// <summary>
        /// Gets the status of a envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the overall status for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When true, envelope information can be added or modified. (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of Envelopes</returns>
        System.Threading.Tasks.Task<Envelopes> EnvelopesGetEnvelopeAsync (string accountId, string envelopeId, string advancedUpdate = null, string include = null);

        /// <summary>
        /// Gets the status of a envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the overall status for the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When true, envelope information can be added or modified. (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of ApiResponse (Envelopes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Envelopes>> EnvelopesGetEnvelopeAsyncWithHttpInfo (string accountId, string envelopeId, string advancedUpdate = null, string include = null);
        /// <summary>
        /// Gets status changes for one or more envelopes.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match your request.  A large set of optional filters let you filter by date, by envelope ID, or by status codes.  Your request must include one or more of the following parameters:  * &#x60;from_date&#x60; * &#x60;envelope_ids&#x60; * &#x60;transaction_ids&#x60;   Getting envelope status using &#x60;transaction_ids&#x60; is useful for offline signing situations where it can be used determine if an envelope was created or not. It can be used for the cases where a network connection was lost, before the envelope status could be returned.  To avoid unnecessary database queries, the DocuSign signature platform first checks requests to ensure that the filter set supplied does not result in a zero-size response before querying the database.   For example, for a request with a &#x60;from_to_status&#x60; of &#x60;delivered&#x60; and a current &#x60;status&#x60; of &#x60;created,sent&#x60;, DocuSign will always return an empty list.  This is because the request translates to: find the envelopes that were delivered between the &#x60;from_date&#x60; and &#x60;to_date&#x60; dates that have a current status of &#x60;created&#x60; or &#x60;sent&#x60;. Since an envelope that has been delivered can never have a status of &#x60;created&#x60; or &#x60;sent&#x60;, a zero-size response would be generated.  In this case, DocuSign does not query the database and returns an empty list immediately.   The following table shows the valid current envelope statuses (&#x60;status&#x60; parameter) for the different status qualifiers (&#x60;from_to_status&#x60; parameter) in the request. If the status and status qualifiers in the API request do not contain any of the values shown in the Valid Current Statuses column, then an empty list is returned.  Client applications should check that the statuses (&#x60;status&#x60; parameter) they are requesting make sense for a given &#x60;from_to_status&#x60; parameter value.  | Status Qualifier&lt;br&gt;(&#x60;from_to_status&#x60;) | Effective Status Qualifier | Valid Current Statuses                                                      |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |   | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |   | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |   | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |   | declined                               | StatusChanged              | any, declined, voided, deleted                                              |   | timedout&lt;br&gt;always return zero results | StatusChanged              | any, voided, deleted                                                        |   | voided                                 | Voided                     | any, voided, deleted                                                        |   | deleted                                | StatusChanged              | any, deleted                                                                |    ## Extraneous results  In some cases, a request for a specific envelope status will include envelopes with additional statuses. For example, in a request with a &#x60;from_date&#x60; of 2017-01-01, a &#x60;to_date&#x60; of 2017-01-07 and the status qualifier (&#x60;from_to_status&#x60;) set to &#x60;delivered&#x60;, the response set might contain envelopes that were created during that time period, but not delivered during the time period. As a workaround, check the envelope status values in the result set as needed.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="acStatus">Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed. (optional)</param>
        /// <param name="block">Reserved for DocuSign.  (optional)</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="customField">Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: &#x60;custom_envelope_field_name&#x3D;desired_value&#x60;  The value portion of the query can use partial strings by adding &#39;%&#39; (percent sign) around the custom field query value.   Example 1: If you have an envelope custom field named \&quot;Region\&quot; and you want to search for all envelopes where the value is \&quot;West\&quot; you would use set this parameter to &#x60;Region&#x3D;West&#x60;.   Example 2: To search for envelopes where the &#x60;ApplicationID&#x60; custom field has the value or partial value of \&quot;DocuSign\&quot; in the field, set this parameter to &#x60;ApplicationId&#x3D;%DocuSign%&#x60; This would match envelopes where the custom field&#39;s value is \&quot;DocuSign for Salesforce\&quot; or \&quot;DocuSign envelope\&quot;.   (optional)</param>
        /// <param name="email">Limit results to envelopes sent by the account user with this email address.  &#x60;user_name&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <param name="envelopeIds">Comma separated list of &#x60;envelopeId&#x60; values. (optional)</param>
        /// <param name="exclude">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderTypes">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">Specifies the date and time to start looking for status changes. This parameter is required unless &#x60;envelopeIds&#x60; or &#x60;transactionIds&#x60; are set.   Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 (optional)</param>
        /// <param name="fromToStatus">The status value checked for in the &#x60;from_date&#x60; to &#x60;to_date&#x60; time period.   Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.  If &#x60;Changed&#x60; is specified, then envelopes that changed status during the period will be returned.   For example, if &#x60;Created&#x60; is specified, then envelopes created during the period are found.   The default is &#x60;Changed&#x60;.  (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includePurgeInformation"> (optional)</param>
        /// <param name="intersectingFolderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="order">Reserved for DocuSign.  (optional)</param>
        /// <param name="orderBy">Reserved for DocuSign.  (optional)</param>
        /// <param name="powerformids">Reserved for DocuSign.  (optional)</param>
        /// <param name="searchText">Reserved for DocuSign.  (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="status">A comma-separated list of current envelope statuses to included in the response. Possible values are:  * completed * created * declined * deleted * delivered * processing * sent * signed * timedout * voided  The &#x60;any&#x60; value is equivalent to any status.   (optional)</param>
        /// <param name="toDate">Specifies the date and time to stop looking for status changes. The default is the current date and time.  Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)</param>
        /// <param name="transactionIds">A comma-separated list of envelope transaction IDs. Transaction IDs are only valid for seven days.  (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <param name="userId">Reserved for DocuSign.  (optional)</param>
        /// <param name="userName">Limit results to envelopes sent by the account user with this user name.  &#x60;email&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <returns>Task of EnvelopesInformation</returns>
        System.Threading.Tasks.Task<EnvelopesInformation> EnvelopesGetEnvelopesAsync (string accountId, string acStatus = null, string block = null, string count = null, string customField = null, string email = null, string envelopeIds = null, string exclude = null, string folderIds = null, string folderTypes = null, string fromDate = null, string fromToStatus = null, string include = null, string includePurgeInformation = null, string intersectingFolderIds = null, string order = null, string orderBy = null, string powerformids = null, string searchText = null, string startPosition = null, string status = null, string toDate = null, string transactionIds = null, string userFilter = null, string userId = null, string userName = null);

        /// <summary>
        /// Gets status changes for one or more envelopes.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of envelopes that match your request.  A large set of optional filters let you filter by date, by envelope ID, or by status codes.  Your request must include one or more of the following parameters:  * &#x60;from_date&#x60; * &#x60;envelope_ids&#x60; * &#x60;transaction_ids&#x60;   Getting envelope status using &#x60;transaction_ids&#x60; is useful for offline signing situations where it can be used determine if an envelope was created or not. It can be used for the cases where a network connection was lost, before the envelope status could be returned.  To avoid unnecessary database queries, the DocuSign signature platform first checks requests to ensure that the filter set supplied does not result in a zero-size response before querying the database.   For example, for a request with a &#x60;from_to_status&#x60; of &#x60;delivered&#x60; and a current &#x60;status&#x60; of &#x60;created,sent&#x60;, DocuSign will always return an empty list.  This is because the request translates to: find the envelopes that were delivered between the &#x60;from_date&#x60; and &#x60;to_date&#x60; dates that have a current status of &#x60;created&#x60; or &#x60;sent&#x60;. Since an envelope that has been delivered can never have a status of &#x60;created&#x60; or &#x60;sent&#x60;, a zero-size response would be generated.  In this case, DocuSign does not query the database and returns an empty list immediately.   The following table shows the valid current envelope statuses (&#x60;status&#x60; parameter) for the different status qualifiers (&#x60;from_to_status&#x60; parameter) in the request. If the status and status qualifiers in the API request do not contain any of the values shown in the Valid Current Statuses column, then an empty list is returned.  Client applications should check that the statuses (&#x60;status&#x60; parameter) they are requesting make sense for a given &#x60;from_to_status&#x60; parameter value.  | Status Qualifier&lt;br&gt;(&#x60;from_to_status&#x60;) | Effective Status Qualifier | Valid Current Statuses                                                      |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |   | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |   | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |   | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |   | declined                               | StatusChanged              | any, declined, voided, deleted                                              |   | timedout&lt;br&gt;always return zero results | StatusChanged              | any, voided, deleted                                                        |   | voided                                 | Voided                     | any, voided, deleted                                                        |   | deleted                                | StatusChanged              | any, deleted                                                                |    ## Extraneous results  In some cases, a request for a specific envelope status will include envelopes with additional statuses. For example, in a request with a &#x60;from_date&#x60; of 2017-01-01, a &#x60;to_date&#x60; of 2017-01-07 and the status qualifier (&#x60;from_to_status&#x60;) set to &#x60;delivered&#x60;, the response set might contain envelopes that were created during that time period, but not delivered during the time period. As a workaround, check the envelope status values in the result set as needed.  
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="acStatus">Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed. (optional)</param>
        /// <param name="block">Reserved for DocuSign.  (optional)</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="customField">Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: &#x60;custom_envelope_field_name&#x3D;desired_value&#x60;  The value portion of the query can use partial strings by adding &#39;%&#39; (percent sign) around the custom field query value.   Example 1: If you have an envelope custom field named \&quot;Region\&quot; and you want to search for all envelopes where the value is \&quot;West\&quot; you would use set this parameter to &#x60;Region&#x3D;West&#x60;.   Example 2: To search for envelopes where the &#x60;ApplicationID&#x60; custom field has the value or partial value of \&quot;DocuSign\&quot; in the field, set this parameter to &#x60;ApplicationId&#x3D;%DocuSign%&#x60; This would match envelopes where the custom field&#39;s value is \&quot;DocuSign for Salesforce\&quot; or \&quot;DocuSign envelope\&quot;.   (optional)</param>
        /// <param name="email">Limit results to envelopes sent by the account user with this email address.  &#x60;user_name&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <param name="envelopeIds">Comma separated list of &#x60;envelopeId&#x60; values. (optional)</param>
        /// <param name="exclude">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderTypes">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">Specifies the date and time to start looking for status changes. This parameter is required unless &#x60;envelopeIds&#x60; or &#x60;transactionIds&#x60; are set.   Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 (optional)</param>
        /// <param name="fromToStatus">The status value checked for in the &#x60;from_date&#x60; to &#x60;to_date&#x60; time period.   Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.  If &#x60;Changed&#x60; is specified, then envelopes that changed status during the period will be returned.   For example, if &#x60;Created&#x60; is specified, then envelopes created during the period are found.   The default is &#x60;Changed&#x60;.  (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includePurgeInformation"> (optional)</param>
        /// <param name="intersectingFolderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="order">Reserved for DocuSign.  (optional)</param>
        /// <param name="orderBy">Reserved for DocuSign.  (optional)</param>
        /// <param name="powerformids">Reserved for DocuSign.  (optional)</param>
        /// <param name="searchText">Reserved for DocuSign.  (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="status">A comma-separated list of current envelope statuses to included in the response. Possible values are:  * completed * created * declined * deleted * delivered * processing * sent * signed * timedout * voided  The &#x60;any&#x60; value is equivalent to any status.   (optional)</param>
        /// <param name="toDate">Specifies the date and time to stop looking for status changes. The default is the current date and time.  Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)</param>
        /// <param name="transactionIds">A comma-separated list of envelope transaction IDs. Transaction IDs are only valid for seven days.  (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <param name="userId">Reserved for DocuSign.  (optional)</param>
        /// <param name="userName">Limit results to envelopes sent by the account user with this user name.  &#x60;email&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopesInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopesInformation>> EnvelopesGetEnvelopesAsyncWithHttpInfo (string accountId, string acStatus = null, string block = null, string count = null, string customField = null, string email = null, string envelopeIds = null, string exclude = null, string folderIds = null, string folderTypes = null, string fromDate = null, string fromToStatus = null, string include = null, string includePurgeInformation = null, string intersectingFolderIds = null, string order = null, string orderBy = null, string powerformids = null, string searchText = null, string startPosition = null, string status = null, string toDate = null, string transactionIds = null, string userFilter = null, string userId = null, string userName = null);
        /// <summary>
        /// Creates an envelope.
        /// </summary>
        /// <remarks>
        /// Creates and sends an envelope or creates a draft envelope. Envelopes are fundamental resources in the DocuSign platform and are used in a variety of ways.  With this method you can:  * Create and send an envelope   with documents, recipients, and tabs. * Create and send an envelope from a template. * Create and send an envelope from   a combination of documents and templates. * Create a draft envelope.  There are many ways to use envelopes. You can create and send an envelope with a single API request, or you can use several API requests to create, populate, and send envelopes.  When you use this method to create and send an envelope in a single request, the following parameters are required:  | Parameter      | Description | | :- -- -- -- -      | :- -- -- -- -- - | | &#x60;status&#x60;       | Set to &#x60;sent&#x60; to send the envelope to recipients.&lt;br&gt;Set to &#x60;created&#x60; (or don&#39;t set at all) to save the envelope as a draft. | | &#x60;emailSubject&#x60; | The subject of the email used to send the envelope. | | &#x60;documents&#x60;    | The documents to be signed. | | &#x60;recipients&#x60;   | The email addresses of the envelope recipients. |  If you are creating an envelope to be sent later, save it as a draft by either setting &#x60;status&#x60; to &#x60;created&#x60; or leaving it unset. For instance, you can create a draft envelope with documents only. Using additional API requests, you can add the recipients and send the envelope in subsequent API requests.    ## Feature Availability  Not all DocuSign features are available to all accounts. Use DocuSign Admin to check and enable feature availability. You can also check feature availability via the web application. For example, if the web application allows you to send an envelope with SMS authentication, then you can use the same feature through the API.  ## Sending Envelopes  Documents can be included with the Envelopes:create method, or a template can include documents. Documents can be added by using a multipart/form request or by using the &#x60;documentBase64&#x60; property of the [&#x60;document&#x60; object][documentDef].  ### Adding Documents to Requests  There are two ways to add documents to your envelopes:  1. Use the &#x60;documents&#x60; property of the envelope definition. 2. Send this request as a multipart/form-data &#x60;POST&#x60;    with documents added through additional request parts.  Using the &#x60;documents&#x60; property is the simpler option, but the request may be quite large due to the base64 encoding. This example shows how to add a document using this method.  &#x60;&#x60;&#x60;json {   \&quot;status\&quot;: \&quot;sent\&quot;,   \&quot;emailSubject\&quot;: \&quot;Example of one recipient, type signer\&quot;,   \&quot;documents\&quot;: [{     \&quot;documentId\&quot;: \&quot;1\&quot;,     \&quot;name\&quot;: \&quot;contract.pdf\&quot;,     \&quot;documentBase64\&quot;: \&quot;base64 document bytes...\&quot;,   }],   \&quot;recipients\&quot;: {     \&quot;signers\&quot;: [{       \&quot;name\&quot;: \&quot;Lisa Simpson\&quot;,       \&quot;email\&quot;: \&quot;lisa@email.com\&quot;,       \&quot;recipientId\&quot;: \&quot;1\&quot;,       \&quot;routingOrder\&quot;: \&quot;1\&quot;,       \&quot;tabs\&quot;: {         \&quot;signHereTabs\&quot;: [{           \&quot;xPosition\&quot;: \&quot;150\&quot;,           \&quot;yPosition\&quot;: \&quot;200\&quot;,           \&quot;documentId\&quot;: \&quot;1\&quot;,           \&quot;pageNumber\&quot;: \&quot;1\&quot;         }],       }     }]   } } &#x60;&#x60;&#x60;  If you are using a multipart/form-data &#x60;POST&#x60; request, you do not have to base64 encode your documents. You place the envelope definition in one part and the document bytes in another:  &#x60;&#x60;&#x60; - -AAA Content-Type: application/json Content-Disposition: form-data  &lt;ENVELOPE DEFINITION GOES HERE&gt; - -AAA Content-Type:application/pdf Content-Disposition: file; filename&#x3D;\&quot;contract.pdf\&quot;; documentid&#x3D;1  &lt;DOCUMENT BYTES GO HERE&gt; - -AAA- - &#x60;&#x60;&#x60;  ### Using Supplemental Documents  Supplemental documents are supporting materials such as disclosures and other informational documents that need to accompany a document sent for signature. These supplemental documents are available to the signer to view and acknowledge, without making the envelope too large or confusing for signers.  Supplemental documents use the following properties in the [&#x60;document&#x60; object][documentDef].  | Name                  | Type    | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | | :- -- -- -- -- -- -- -- -- -- - | :- -- -- - || | includeInDownload     | Boolean | When set to **true**, the document is included in the combined document download. The default value is **true| | display               | String  | This string sets the display and behavior properties of the document during signing. The possible values are:&lt;br&gt;&#x60;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;modal&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a modal window. This is the recommended value for supplemental documents.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;download&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a new browser window.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;inline&lt;/code&gt;&lt;br&gt;This value is not used with supplemental documents, but is the default value for all other documents. The document is shown in the normal signing window.&lt;/li&gt;&lt;/ul&gt; | | signerMustAcknowledge | String  | Sets how the signer interacts with the supplemental document. The possible values are:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;no_interaction&lt;/code&gt;&lt;br&gt;No recipient action is required.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view&lt;/code&gt;&lt;br&gt;The recipient is required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;accept&lt;/code&gt;&lt;br&gt;The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view_accept&lt;/code&gt;&lt;br&gt;The recipient is required to view and accept the document.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;                                                                                                                                                    |   [viewtab]: /esign/restapi/Envelopes/EnvelopeRecipientTabs/#view-tab  The [View][viewtab] and Approve tabs are used to set the interactions for individual recipients. The View tab includes a &#x60;required&#x60; property that requires the recipient to view the supplemental document. If the View tab &#x60;required&#x60; property is not set, the recipient can, but is not required to, view the supplemental document.  To use the View and Approve tabs for supplemental documents, the document &#x60;display&#x60; property must be set to &#x60;modal&#x60; or &#x60;download&#x60;.  The actions that the recipient must take depend on the value of the &#x60;signerMustAcknowledge&#x60; document property and whether the signer is assigned View or Approve tabs on the document.  To set the interactions for individual recipients, set the &#x60;signerMustAcknowledge&#x60; property to &#x60;no_interaction&#x60;, then add View and Approve tabs on the appropriate document for the recipient.   The action that a signer must take depends on the value of the &#x60;signerMustAcknowledge&#x60; document property, whether the signer has an Approve tab, and the value of the &#x60;required&#x60; property of the View tab. The following table shows the actions a recipient must take for different combinations of these tabs and properties.    | Document &#x60;signerMustAcknowledge&#x60;property  | Approve Tab | View Tab &#x60;required&#x60; property  | Recipient is required to ...  | | :- -- -                                     | :- -- -       | :- -- -                         | :- -- -                         | | no_interaction                            | No          |  - -                           |  Take no action               | | no_interaction                            | No          |  false                        |  Take no action               | | no_interaction                            | No          |  true                         |  View                         | | no_interaction                            | Yes         |  false                        |  Accept                       | | no_interaction                            | Yes         |  true                         |  View and Accept              | | view                                      | No          |  - -                           |  View                         | | view                                      | Yes         |  - -                           |  View and Accept              | | accept                                    | - -          |  false                        |  Accept                       | | accept                                    | - -          |  true                         |  View and Accept              | | view_accept                               | - -          |  - -                           |  View and Accept              |     ### Recipient Types  An [&#x60;envelopeDefinition&#x60; object][envelopeDef] is used as the method&#39;s body. Envelope recipients can be defined in the envelope or in templates. The &#x60;envelopeDefinition&#x60; object&#39;s &#x60;recipients&#x60; property is an [&#x60;EnvelopeRecipients&#x60; resource object][envelopeRecipientsDef]. It includes arrays of the seven types of recipients defined by DocuSign:  | Recipient type                      | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - || | [Agents][agentDef]                  | An agent recipient can add name and email information for recipients that appear after the agent in routing order.                                                                                                                                                                                                                                                                                                                                                                                  | | [Carbon Copies][ccDef]              | Carbon copy recipients get a copy of the envelope but don&#39;t need to sign, initial, date or add information to any of the documents. This type of recipient can be used in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient&#39;s order in the process flow and when the envelope is completed.                                                                                                                                      | | [Certified Deliveries][certfiedDef] | Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don&#39;t need to sign, initial, date or add information to any of the documents.                                                                                                                                                                                                                                                                                                    | | [Editors][editorDef]                | Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor. | | [In-Person Signers][inPersonDef]    | An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer.                                                                                                                                                                                                                                                                                                                                                                            | | [Intermediaries][intermediaryDef]   | An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.                                                                                                                                                                                                                                                                  | | [Signers][signerDef]                | A signer is a recipient who must sign, initial, date, or add data to form fields on the documents in the envelope.                                                                                                                                                                                                                                                                                                                                                                                  |   Additional information about the different types of recipients is available from the [&#x60;EnvelopeRecipients&#x60; resource page][envelopeRecipientsRes] and from the Developer Center [Recipients][devecenterrecipients] topic.    ### Tabs  Tabs (also referred to as tags and fields in the web application), can be defined in the &#x60;envelopeDefinition&#x60;, in templates, by transforming PDF Form Fields, or by using Composite Templates (see below).  The &#x60;inPersonSigner&#x60;, and &#x60;signer&#x60; recipient objects include a &#x60;tabs&#x60; property. It is an [&#x60;EnvelopeRecipientTabs&#x60; resource object][envRecipientTabsDef] that includes arrays of the different tab types available. See the [&#x60;EnvelopeRecipientTabs&#x60; resource][envRecipientTabsRes] for more information.   ## Using Templates  Envelopes use specific people or groups as recipients. Templates can specify a role, eg &#x60;account_manager.&#x60; When a template is used in an envelope, the roles must be replaced with specific people or groups.  When you create an envelope using a &#x60;templateId&#x60;, the different recipient type objects within the [&#x60;EnvelopeRecipients&#x60; property][envelopeRecipientsDef] are used to assign recipients to the template&#39;s roles via the &#x60;roleName&#x60; property. The recipient objects can also override settings that were specified in the template, and set values for tab fields that were defined in the template.  ### Message Lock  When a template is added or applied to an envelope, and the template has a locked email subject and message, that subject and message are used for the envelope and cannot be changed even if another locked template is subsequently added or applied to the envelope. The &#x60;messageLock&#x60; property is used to lock the email subject and message.  If an email subject or message is entered before adding or applying a template with &#x60;messageLock&#x60; set to **true**, the email subject and message is overwritten with the locked email subject and message from the template.  ## Envelope Status  The status of sent envelopes can be determined through the DocuSign webhook system or by polling. Webhooks are highly recommended: they provide your application with the quickest updates when an envelope&#39;s status changes. DocuSign limits polling to once every 15 minutes or less frequently. See [API Rules and Limits][apirules] for more information and examples.   When a webhook is used, DocuSign calls your application via the URL you provide, with a notification XML message.  See the [Webhook recipe](https://www.docusign.com/developer-center/recipes/webhook-status) for examples and live demos of using webhooks.  ## Webhook Options  The two webhook options, &#x60;eventNotification&#x60; and Connect, use the same notification mechanism and message formats. Use &#x60;eventNotification&#x60; to create a webhook for a specific envelope sent via the API. Connect webhooks can be used for any envelope sent from an account, from any user, from any client. The [Connect guide][connectGuide] discusses the webhook notification message format.  ### eventNotification Webhooks  The Envelopes:create method includes an optional [&#x60;eventNotification&#x60; object][eventNotificationDef] property that adds a webhook to the envelope. &#x60;eventNotification&#x60; webhooks are available for all DocuSign accounts with API access.  ### Connect Webhooks  Connect can be used to create a webhook for all envelopes sent by all users in an account, either through the API or through other DocuSign clients (web, mobile, etc). Connect configurations are independent of specific envelopes. A Connect configuration includes a filter that may be used to limit the webhook to specific users, envelope statuses, etc.  You can create and manage Connect configurations with the [ConnectConfigurations resource][connectConfigurationsRes]. Configurations can also be created and managed from DocuSign Admin accessed by selecting **Go to Admin** from the menu next to your picture on the DocuSign web app. See the **Connect** topic in the **Integrations** section of DocuSign Admin. For repeatability, and to minimize support questions, creating Connect configurations via the API is recommended, especially for ISVs.  Connect is available for some DocuSign account types. Please contact DocuSign Sales for more information.  ## Composite Templates  The Composite Templates feature, like [compositing in film production](https://en.wikipedia.org/wiki/Compositing), enables you to overlay document, recipient, and tab definitions from multiple sources, including PDF Form Field definitions, templates defined on the server, and more.  Each Composite Template consists of optional elements: server templates, inline templates, PDF Metadata templates, and documents.  * The Composite Template ID is an optional element used to identify the   composite template. It is used as a reference when adding document   object information via a multipart HTTP message. If used, the document   content-disposition must include the &#x60;compositeTemplateId&#x60; to which the   document should be added. If &#x60;compositeTemplateId&#x60; is not specified in   the content-disposition, the document is applied based on the   &#x60;documentId&#x60; only. If no document object is specified, the composite   template inherits the first document.  * Server Templates are server-side templates stored on the DocuSign   platform. If supplied, they are overlaid into the envelope in the order   of their Sequence value.  * Inline Templates provide a container to add documents, recipients,   tabs, and custom fields. If inline templates are supplied, they are   overlaid into the envelope in the order of their Sequence value.  * Document objects are optional structures that provide a container to   pass in a document or form. If this object is not included, the   composite template inherits the *first* document it finds from a server   template or inline template, starting with the lowest sequence value.  PDF Form objects are only transformed from the document object. DocuSign does not derive PDF form properties from server templates or inline templates. To instruct DocuSign to transform fields from the PDF form, set &#x60;transformPdfFields&#x60; to **true** for the document.  See [PDF Form Field Transformation](#pdf-form-field-transformation) for more information about process.  * PDF Metadata Templates provide a container to embed design-time   template information into a PDF document. DocuSign uses this information   when processing the Envelope. This convention allows the document to   carry the signing instructions with it, so that less information needs   to be provided at run-time through an inline template or synchronized   with an external structure like a server template. PDF Metadata   templates are stored in the Metadata layer of a PDF in accordance with   Acrobat&#39;s XMP specification. DocuSign will only find PDF Metadata   templates inside documents passed in the Document object (see below). If   supplied, the PDF metadata template will be overlaid into the envelope   in the order of its Sequence value.  ### Compositing the Definitions  Each Composite Template adds a new document and templates overlay into the envelope. For each Composite Template these rules are applied:  * Templates are overlaid in the order of their Sequence value. * If Document is not passed into the Composite Template&#39;s &#x60;document&#x60;   field, the *first* template&#39;s document (based on the template&#39;s Sequence   value) is used. * Last in wins in all cases except for the document (i.e. envelope   information, recipient information, secure field information). There is   no special casing.  For example, if you want higher security on a tab, then that needs to be specified in a later template (by sequence number) than where the tab is included. If you want higher security on a role recipient, then it needs to be in a later template than where that role recipient is specified.  * Recipient matching is based on Recipient Role and Routing Order. If   there are matches, the recipient information is merged together. A final   pass is done on all Composite Templates, after all template overlays   have been applied, to collapse recipients with the same email, username   and routing order. This prevents having the same recipients at the same   routing order.  * If you specify in a template that a recipient is locked, once that   recipient is overlaid the recipient attributes can no longer be changed.   The only items that can be changed for the recipient in this case are   the email, username, access code and IDCheckInformationInput.  * Tab matching is based on Tab Labels, Tab Types and Documents. If a Tab   Label matches but the Document is not supplied, the Tab is overlaid for   all the Documents.  For example, if you have a simple inline template with only one tab in it with a label and a value, the Signature, Initial, Company, Envelope ID, User Name tabs will only be matched and collapsed if they fall in the exact same X and Y locations.  * &#x60;roleName&#x60; and &#x60;tabLabel&#x60; matching is case sensitive.  * The &#x60;defaultRecipient&#x60; property enables you to specify which recipient   the tabs generated from a PDF form are mapped to. You can also set PDF   form generated tabs to a recipient other than the default recipient by   specifying the mapping of the tab label that is created to one of the   template recipients.  * You can use &#x60;tabLabel&#x60; wild carding to map a series of tabs from the PDF   form. To use this you must end a tab label with \&quot;\\*\&quot; and then the system   matches tabs that start with the label.  * If no &#x60;defaultRecipient&#x60; is specified, tabs must be explicitly mapped   to recipients in order to be generated from the form. Unmapped form   objects will not be generated into their DocuSign equivalents. (In the   case of Signature/Initials, the tabs will be disregarded entirely; in   the case of pdf text fields, the field data will be flattened on the   Envelope document, but there will not be a corresponding DocuSign data   tab.)  ### Including the Document Content for Composite Templates  Document content can be supplied inline, using the &#x60;documentBase64&#x60; or can be included in a multipart HTTP message. If a multipart message is used and there are multiple Composite Templates, the document content-disposition can include the &#x60;compositeTemplateId&#x60; to which the document should be added. Using the &#x60;compositeTemplateId&#x60; sets which documents are associated with particular composite templates. An example of this usage is:  &#x60;&#x60;&#x60; - -5cd3320a-5aac-4453-b3a4-cbb52a4cba5d Content-Type: application/pdf Content-Disposition: file; filename&#x3D;\&quot;eula.pdf\&quot;; documentId&#x3D;1; compositeTemplateId&#x3D;\&quot;1\&quot; Content-Transfer-Encoding: base64 &#x60;&#x60;&#x60;  ### PDF Form Field Transformation  Only the following PDF Form FieldTypes are transformed to DocuSign tabs:  * CheckBox * DateTime * ListBox * Numeric * Password * Radio * Signature, * Text  Field Properties that are transformed:  * Read Only * Required * Max Length * Positions * Initial Data  When transforming a PDF Form Digital Signature Field, the following rules apply. Any other PDF Form Digital Signature Field will be transformed to a DocuSign Signature tab   | If the PDF Field Name contains                              | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                       | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional       | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                 | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional | Optional Initials             |   When transforming PDF Form Text Fields, the following rules apply. Any other PDF Form Text Field will be transformed to a DocuSign data (text) tab.   | If the PDF Field Name contains                                        | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                                 | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional                 | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                           | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional           | Optional Initials             | | DocuSignEnvelopeID or&lt;br&gt; eSignEnvelopeID                             | EnvelopeID                    | | DocuSignCompany or&lt;br&gt; eSignCompany                                   | Company                       | | DocuSignDateSigned or&lt;br&gt; eSignDateSigned                             | Date Signed                   | | DocuSignTitle or&lt;br&gt; eSignTitle                                       | Title                         | | DocuSignFullName or&lt;br&gt; eSignFullName                                 | Full Name                     | | DocuSignSignerAttachmentOptional or&lt;br&gt; eSignSignerAttachmentOptional | Optional Signer Attachment    |   PDF Form Field Names that include &#x60;DocuSignIgnoreTransform&#x60; or &#x60;eSignIgnoreTransform&#x60; will not be transformed.  PDF Form Date fields that include &#x60;DocuSignDateSigned&#x60; or &#x60;eSignDateSigned&#x60; will be transformed to Date Signed fields.  ## Template Email Subject Merge Fields  This feature enables you to insert recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s &#x60;roleName&#x60;, are added to the &#x60;emailSubject&#x60; when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient.  If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  * To add a recipient&#39;s name in the subject line add the following text   in the &#x60;emailSubject&#x60; when creating the template or when sending an   envelope from a template:     &#x60;[[&lt;roleName&gt;_UserName]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;&#x60;  * To add a recipient&#39;s email address in the subject line add the   following text in the emailSubject when creating the template or when   sending an envelope from a template:     &#x60;[[&lt;roleName&gt;_Email]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;&#x60;  In both cases &#x60;&lt;roleName&gt;&#x60; is the recipient&#39;s &#x60;roleName&#x60; in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.  ## Branding an Envelope  The following rules are used to determine the &#x60;brandId&#x60; used in an envelope:  * If a &#x60;brandId&#x60; is specified in the envelope or template   and that &#x60;brandId&#x60; is available to the account,   that brand is used in the envelope. * If more than one template is used in an envelope,   and more than one &#x60;brandId&#x60; is specified,   the first &#x60;brandId&#x60; specified is used throughout the envelope. * In cases where no brand is specified,   and the sender belongs to a group:   - If there is only one brand associated with the group,     then that brand is used in the envelope.   - Otherwise, the account&#39;s default signing brand is used. * For envelopes that do not meet any of the previous criteria,   the account&#39;s default signing brand is used for the envelope.   ## BCC Email Address Feature  The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options.  Do **not** use this feature to send a copy of the envelope to a recipient who does not need to sign. Use a Carbon Copy or Certified Delivery Recipient type instead.  ## Merge Recipient Roles for Draft Envelopes  When an envelope with multiple templates is sent, the recipients from the templates are merged according to the template roles, and empty recipients are removed. When creating an envelope with multiple templates, but not sending it (keeping it in a created state), duplicate recipients are not merged, which could leave duplicate recipients in the envelope.  To prevent this, the query parameter &#x60;merge_roles_on_draft&#x60; should be added when posting a draft envelope (&#x60;status&#x60; is &#x60;created&#x60;) with multiple templates. Doing this will merge template roles and remove empty recipients.   DocuSign recommends that the &#x60;merge_roles_on_draft&#x60; query parameter be used any time you are creating an envelope with multiple templates and keeping it in draft (&#x60;status&#x60; is &#x60;created&#x60;) status.   [agentDef]:                 #/definitions/agent [apirules]:                 /esign/guide/appendix/resource_limits.html#api-rules-and-limits [ccDef]:                     #/definitions/carbonCopy [certfiedDef]:               #/definitions/certifiedDelivery [connectConfigurationsRes]: /esign/restapi/Connect/ConnectConfigurations/ [connectGuide]:             https://www.docusign.com/supportdocs/pdf/connect-guide.pdf [devecenterrecipients]:     https://www.docusign.com/developer-center/explore/features/recipients [documentDef]:               #/definitions/document [editorDef]:                 #/definitions/editor [envelopeDef]:               #/definitions/envelopeDefinition [envelopeRecipientsDef]:     #/definitions/EnvelopeRecipients [envelopeRecipientsRes]:    /esign/restapi/Envelopes/EnvelopeRecipients/ [envRecipientTabsDef]:       #/definitions/EnvelopeRecipientTabs [envRecipientTabsRes]:      /esign/restapi/Envelopes/EnvelopeRecipientTabs/ [eventNotificationDef]:      #/definitions/eventNotification [inPersonDef]:               #/definitions/inPersonSigner [intermediaryDef]:           #/definitions/intermediary [signerDef]:                 #/definitions/signer 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="cdseMode">Reserved for DocuSign.  (optional)</param>
        /// <param name="completedDocumentsOnly">Reserved for DocuSign.  (optional)</param>
        /// <param name="mergeRolesOnDraft">When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the &#x60;status&#x60; field is set to &#x60;created&#x60;.)  ###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates. (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of EnvelopeSummary</returns>
        System.Threading.Tasks.Task<EnvelopeSummary> EnvelopesPostEnvelopesAsync (string accountId, string cdseMode = null, string completedDocumentsOnly = null, string mergeRolesOnDraft = null, EnvelopeDefinition envelopeDefinition = null);

        /// <summary>
        /// Creates an envelope.
        /// </summary>
        /// <remarks>
        /// Creates and sends an envelope or creates a draft envelope. Envelopes are fundamental resources in the DocuSign platform and are used in a variety of ways.  With this method you can:  * Create and send an envelope   with documents, recipients, and tabs. * Create and send an envelope from a template. * Create and send an envelope from   a combination of documents and templates. * Create a draft envelope.  There are many ways to use envelopes. You can create and send an envelope with a single API request, or you can use several API requests to create, populate, and send envelopes.  When you use this method to create and send an envelope in a single request, the following parameters are required:  | Parameter      | Description | | :- -- -- -- -      | :- -- -- -- -- - | | &#x60;status&#x60;       | Set to &#x60;sent&#x60; to send the envelope to recipients.&lt;br&gt;Set to &#x60;created&#x60; (or don&#39;t set at all) to save the envelope as a draft. | | &#x60;emailSubject&#x60; | The subject of the email used to send the envelope. | | &#x60;documents&#x60;    | The documents to be signed. | | &#x60;recipients&#x60;   | The email addresses of the envelope recipients. |  If you are creating an envelope to be sent later, save it as a draft by either setting &#x60;status&#x60; to &#x60;created&#x60; or leaving it unset. For instance, you can create a draft envelope with documents only. Using additional API requests, you can add the recipients and send the envelope in subsequent API requests.    ## Feature Availability  Not all DocuSign features are available to all accounts. Use DocuSign Admin to check and enable feature availability. You can also check feature availability via the web application. For example, if the web application allows you to send an envelope with SMS authentication, then you can use the same feature through the API.  ## Sending Envelopes  Documents can be included with the Envelopes:create method, or a template can include documents. Documents can be added by using a multipart/form request or by using the &#x60;documentBase64&#x60; property of the [&#x60;document&#x60; object][documentDef].  ### Adding Documents to Requests  There are two ways to add documents to your envelopes:  1. Use the &#x60;documents&#x60; property of the envelope definition. 2. Send this request as a multipart/form-data &#x60;POST&#x60;    with documents added through additional request parts.  Using the &#x60;documents&#x60; property is the simpler option, but the request may be quite large due to the base64 encoding. This example shows how to add a document using this method.  &#x60;&#x60;&#x60;json {   \&quot;status\&quot;: \&quot;sent\&quot;,   \&quot;emailSubject\&quot;: \&quot;Example of one recipient, type signer\&quot;,   \&quot;documents\&quot;: [{     \&quot;documentId\&quot;: \&quot;1\&quot;,     \&quot;name\&quot;: \&quot;contract.pdf\&quot;,     \&quot;documentBase64\&quot;: \&quot;base64 document bytes...\&quot;,   }],   \&quot;recipients\&quot;: {     \&quot;signers\&quot;: [{       \&quot;name\&quot;: \&quot;Lisa Simpson\&quot;,       \&quot;email\&quot;: \&quot;lisa@email.com\&quot;,       \&quot;recipientId\&quot;: \&quot;1\&quot;,       \&quot;routingOrder\&quot;: \&quot;1\&quot;,       \&quot;tabs\&quot;: {         \&quot;signHereTabs\&quot;: [{           \&quot;xPosition\&quot;: \&quot;150\&quot;,           \&quot;yPosition\&quot;: \&quot;200\&quot;,           \&quot;documentId\&quot;: \&quot;1\&quot;,           \&quot;pageNumber\&quot;: \&quot;1\&quot;         }],       }     }]   } } &#x60;&#x60;&#x60;  If you are using a multipart/form-data &#x60;POST&#x60; request, you do not have to base64 encode your documents. You place the envelope definition in one part and the document bytes in another:  &#x60;&#x60;&#x60; - -AAA Content-Type: application/json Content-Disposition: form-data  &lt;ENVELOPE DEFINITION GOES HERE&gt; - -AAA Content-Type:application/pdf Content-Disposition: file; filename&#x3D;\&quot;contract.pdf\&quot;; documentid&#x3D;1  &lt;DOCUMENT BYTES GO HERE&gt; - -AAA- - &#x60;&#x60;&#x60;  ### Using Supplemental Documents  Supplemental documents are supporting materials such as disclosures and other informational documents that need to accompany a document sent for signature. These supplemental documents are available to the signer to view and acknowledge, without making the envelope too large or confusing for signers.  Supplemental documents use the following properties in the [&#x60;document&#x60; object][documentDef].  | Name                  | Type    | Description| | :- -- -- -- -- -- -- -- -- -- - | :- -- -- - || | includeInDownload     | Boolean | When set to **true**, the document is included in the combined document download. The default value is **true| | display               | String  | This string sets the display and behavior properties of the document during signing. The possible values are:&lt;br&gt;&#x60;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;modal&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a modal window. This is the recommended value for supplemental documents.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;download&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a new browser window.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;inline&lt;/code&gt;&lt;br&gt;This value is not used with supplemental documents, but is the default value for all other documents. The document is shown in the normal signing window.&lt;/li&gt;&lt;/ul&gt; | | signerMustAcknowledge | String  | Sets how the signer interacts with the supplemental document. The possible values are:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;no_interaction&lt;/code&gt;&lt;br&gt;No recipient action is required.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view&lt;/code&gt;&lt;br&gt;The recipient is required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;accept&lt;/code&gt;&lt;br&gt;The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view_accept&lt;/code&gt;&lt;br&gt;The recipient is required to view and accept the document.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;                                                                                                                                                    |   [viewtab]: /esign/restapi/Envelopes/EnvelopeRecipientTabs/#view-tab  The [View][viewtab] and Approve tabs are used to set the interactions for individual recipients. The View tab includes a &#x60;required&#x60; property that requires the recipient to view the supplemental document. If the View tab &#x60;required&#x60; property is not set, the recipient can, but is not required to, view the supplemental document.  To use the View and Approve tabs for supplemental documents, the document &#x60;display&#x60; property must be set to &#x60;modal&#x60; or &#x60;download&#x60;.  The actions that the recipient must take depend on the value of the &#x60;signerMustAcknowledge&#x60; document property and whether the signer is assigned View or Approve tabs on the document.  To set the interactions for individual recipients, set the &#x60;signerMustAcknowledge&#x60; property to &#x60;no_interaction&#x60;, then add View and Approve tabs on the appropriate document for the recipient.   The action that a signer must take depends on the value of the &#x60;signerMustAcknowledge&#x60; document property, whether the signer has an Approve tab, and the value of the &#x60;required&#x60; property of the View tab. The following table shows the actions a recipient must take for different combinations of these tabs and properties.    | Document &#x60;signerMustAcknowledge&#x60;property  | Approve Tab | View Tab &#x60;required&#x60; property  | Recipient is required to ...  | | :- -- -                                     | :- -- -       | :- -- -                         | :- -- -                         | | no_interaction                            | No          |  - -                           |  Take no action               | | no_interaction                            | No          |  false                        |  Take no action               | | no_interaction                            | No          |  true                         |  View                         | | no_interaction                            | Yes         |  false                        |  Accept                       | | no_interaction                            | Yes         |  true                         |  View and Accept              | | view                                      | No          |  - -                           |  View                         | | view                                      | Yes         |  - -                           |  View and Accept              | | accept                                    | - -          |  false                        |  Accept                       | | accept                                    | - -          |  true                         |  View and Accept              | | view_accept                               | - -          |  - -                           |  View and Accept              |     ### Recipient Types  An [&#x60;envelopeDefinition&#x60; object][envelopeDef] is used as the method&#39;s body. Envelope recipients can be defined in the envelope or in templates. The &#x60;envelopeDefinition&#x60; object&#39;s &#x60;recipients&#x60; property is an [&#x60;EnvelopeRecipients&#x60; resource object][envelopeRecipientsDef]. It includes arrays of the seven types of recipients defined by DocuSign:  | Recipient type                      | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - || | [Agents][agentDef]                  | An agent recipient can add name and email information for recipients that appear after the agent in routing order.                                                                                                                                                                                                                                                                                                                                                                                  | | [Carbon Copies][ccDef]              | Carbon copy recipients get a copy of the envelope but don&#39;t need to sign, initial, date or add information to any of the documents. This type of recipient can be used in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient&#39;s order in the process flow and when the envelope is completed.                                                                                                                                      | | [Certified Deliveries][certfiedDef] | Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don&#39;t need to sign, initial, date or add information to any of the documents.                                                                                                                                                                                                                                                                                                    | | [Editors][editorDef]                | Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor. | | [In-Person Signers][inPersonDef]    | An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer.                                                                                                                                                                                                                                                                                                                                                                            | | [Intermediaries][intermediaryDef]   | An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.                                                                                                                                                                                                                                                                  | | [Signers][signerDef]                | A signer is a recipient who must sign, initial, date, or add data to form fields on the documents in the envelope.                                                                                                                                                                                                                                                                                                                                                                                  |   Additional information about the different types of recipients is available from the [&#x60;EnvelopeRecipients&#x60; resource page][envelopeRecipientsRes] and from the Developer Center [Recipients][devecenterrecipients] topic.    ### Tabs  Tabs (also referred to as tags and fields in the web application), can be defined in the &#x60;envelopeDefinition&#x60;, in templates, by transforming PDF Form Fields, or by using Composite Templates (see below).  The &#x60;inPersonSigner&#x60;, and &#x60;signer&#x60; recipient objects include a &#x60;tabs&#x60; property. It is an [&#x60;EnvelopeRecipientTabs&#x60; resource object][envRecipientTabsDef] that includes arrays of the different tab types available. See the [&#x60;EnvelopeRecipientTabs&#x60; resource][envRecipientTabsRes] for more information.   ## Using Templates  Envelopes use specific people or groups as recipients. Templates can specify a role, eg &#x60;account_manager.&#x60; When a template is used in an envelope, the roles must be replaced with specific people or groups.  When you create an envelope using a &#x60;templateId&#x60;, the different recipient type objects within the [&#x60;EnvelopeRecipients&#x60; property][envelopeRecipientsDef] are used to assign recipients to the template&#39;s roles via the &#x60;roleName&#x60; property. The recipient objects can also override settings that were specified in the template, and set values for tab fields that were defined in the template.  ### Message Lock  When a template is added or applied to an envelope, and the template has a locked email subject and message, that subject and message are used for the envelope and cannot be changed even if another locked template is subsequently added or applied to the envelope. The &#x60;messageLock&#x60; property is used to lock the email subject and message.  If an email subject or message is entered before adding or applying a template with &#x60;messageLock&#x60; set to **true**, the email subject and message is overwritten with the locked email subject and message from the template.  ## Envelope Status  The status of sent envelopes can be determined through the DocuSign webhook system or by polling. Webhooks are highly recommended: they provide your application with the quickest updates when an envelope&#39;s status changes. DocuSign limits polling to once every 15 minutes or less frequently. See [API Rules and Limits][apirules] for more information and examples.   When a webhook is used, DocuSign calls your application via the URL you provide, with a notification XML message.  See the [Webhook recipe](https://www.docusign.com/developer-center/recipes/webhook-status) for examples and live demos of using webhooks.  ## Webhook Options  The two webhook options, &#x60;eventNotification&#x60; and Connect, use the same notification mechanism and message formats. Use &#x60;eventNotification&#x60; to create a webhook for a specific envelope sent via the API. Connect webhooks can be used for any envelope sent from an account, from any user, from any client. The [Connect guide][connectGuide] discusses the webhook notification message format.  ### eventNotification Webhooks  The Envelopes:create method includes an optional [&#x60;eventNotification&#x60; object][eventNotificationDef] property that adds a webhook to the envelope. &#x60;eventNotification&#x60; webhooks are available for all DocuSign accounts with API access.  ### Connect Webhooks  Connect can be used to create a webhook for all envelopes sent by all users in an account, either through the API or through other DocuSign clients (web, mobile, etc). Connect configurations are independent of specific envelopes. A Connect configuration includes a filter that may be used to limit the webhook to specific users, envelope statuses, etc.  You can create and manage Connect configurations with the [ConnectConfigurations resource][connectConfigurationsRes]. Configurations can also be created and managed from DocuSign Admin accessed by selecting **Go to Admin** from the menu next to your picture on the DocuSign web app. See the **Connect** topic in the **Integrations** section of DocuSign Admin. For repeatability, and to minimize support questions, creating Connect configurations via the API is recommended, especially for ISVs.  Connect is available for some DocuSign account types. Please contact DocuSign Sales for more information.  ## Composite Templates  The Composite Templates feature, like [compositing in film production](https://en.wikipedia.org/wiki/Compositing), enables you to overlay document, recipient, and tab definitions from multiple sources, including PDF Form Field definitions, templates defined on the server, and more.  Each Composite Template consists of optional elements: server templates, inline templates, PDF Metadata templates, and documents.  * The Composite Template ID is an optional element used to identify the   composite template. It is used as a reference when adding document   object information via a multipart HTTP message. If used, the document   content-disposition must include the &#x60;compositeTemplateId&#x60; to which the   document should be added. If &#x60;compositeTemplateId&#x60; is not specified in   the content-disposition, the document is applied based on the   &#x60;documentId&#x60; only. If no document object is specified, the composite   template inherits the first document.  * Server Templates are server-side templates stored on the DocuSign   platform. If supplied, they are overlaid into the envelope in the order   of their Sequence value.  * Inline Templates provide a container to add documents, recipients,   tabs, and custom fields. If inline templates are supplied, they are   overlaid into the envelope in the order of their Sequence value.  * Document objects are optional structures that provide a container to   pass in a document or form. If this object is not included, the   composite template inherits the *first* document it finds from a server   template or inline template, starting with the lowest sequence value.  PDF Form objects are only transformed from the document object. DocuSign does not derive PDF form properties from server templates or inline templates. To instruct DocuSign to transform fields from the PDF form, set &#x60;transformPdfFields&#x60; to **true** for the document.  See [PDF Form Field Transformation](#pdf-form-field-transformation) for more information about process.  * PDF Metadata Templates provide a container to embed design-time   template information into a PDF document. DocuSign uses this information   when processing the Envelope. This convention allows the document to   carry the signing instructions with it, so that less information needs   to be provided at run-time through an inline template or synchronized   with an external structure like a server template. PDF Metadata   templates are stored in the Metadata layer of a PDF in accordance with   Acrobat&#39;s XMP specification. DocuSign will only find PDF Metadata   templates inside documents passed in the Document object (see below). If   supplied, the PDF metadata template will be overlaid into the envelope   in the order of its Sequence value.  ### Compositing the Definitions  Each Composite Template adds a new document and templates overlay into the envelope. For each Composite Template these rules are applied:  * Templates are overlaid in the order of their Sequence value. * If Document is not passed into the Composite Template&#39;s &#x60;document&#x60;   field, the *first* template&#39;s document (based on the template&#39;s Sequence   value) is used. * Last in wins in all cases except for the document (i.e. envelope   information, recipient information, secure field information). There is   no special casing.  For example, if you want higher security on a tab, then that needs to be specified in a later template (by sequence number) than where the tab is included. If you want higher security on a role recipient, then it needs to be in a later template than where that role recipient is specified.  * Recipient matching is based on Recipient Role and Routing Order. If   there are matches, the recipient information is merged together. A final   pass is done on all Composite Templates, after all template overlays   have been applied, to collapse recipients with the same email, username   and routing order. This prevents having the same recipients at the same   routing order.  * If you specify in a template that a recipient is locked, once that   recipient is overlaid the recipient attributes can no longer be changed.   The only items that can be changed for the recipient in this case are   the email, username, access code and IDCheckInformationInput.  * Tab matching is based on Tab Labels, Tab Types and Documents. If a Tab   Label matches but the Document is not supplied, the Tab is overlaid for   all the Documents.  For example, if you have a simple inline template with only one tab in it with a label and a value, the Signature, Initial, Company, Envelope ID, User Name tabs will only be matched and collapsed if they fall in the exact same X and Y locations.  * &#x60;roleName&#x60; and &#x60;tabLabel&#x60; matching is case sensitive.  * The &#x60;defaultRecipient&#x60; property enables you to specify which recipient   the tabs generated from a PDF form are mapped to. You can also set PDF   form generated tabs to a recipient other than the default recipient by   specifying the mapping of the tab label that is created to one of the   template recipients.  * You can use &#x60;tabLabel&#x60; wild carding to map a series of tabs from the PDF   form. To use this you must end a tab label with \&quot;\\*\&quot; and then the system   matches tabs that start with the label.  * If no &#x60;defaultRecipient&#x60; is specified, tabs must be explicitly mapped   to recipients in order to be generated from the form. Unmapped form   objects will not be generated into their DocuSign equivalents. (In the   case of Signature/Initials, the tabs will be disregarded entirely; in   the case of pdf text fields, the field data will be flattened on the   Envelope document, but there will not be a corresponding DocuSign data   tab.)  ### Including the Document Content for Composite Templates  Document content can be supplied inline, using the &#x60;documentBase64&#x60; or can be included in a multipart HTTP message. If a multipart message is used and there are multiple Composite Templates, the document content-disposition can include the &#x60;compositeTemplateId&#x60; to which the document should be added. Using the &#x60;compositeTemplateId&#x60; sets which documents are associated with particular composite templates. An example of this usage is:  &#x60;&#x60;&#x60; - -5cd3320a-5aac-4453-b3a4-cbb52a4cba5d Content-Type: application/pdf Content-Disposition: file; filename&#x3D;\&quot;eula.pdf\&quot;; documentId&#x3D;1; compositeTemplateId&#x3D;\&quot;1\&quot; Content-Transfer-Encoding: base64 &#x60;&#x60;&#x60;  ### PDF Form Field Transformation  Only the following PDF Form FieldTypes are transformed to DocuSign tabs:  * CheckBox * DateTime * ListBox * Numeric * Password * Radio * Signature, * Text  Field Properties that are transformed:  * Read Only * Required * Max Length * Positions * Initial Data  When transforming a PDF Form Digital Signature Field, the following rules apply. Any other PDF Form Digital Signature Field will be transformed to a DocuSign Signature tab   | If the PDF Field Name contains                              | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                       | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional       | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                 | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional | Optional Initials             |   When transforming PDF Form Text Fields, the following rules apply. Any other PDF Form Text Field will be transformed to a DocuSign data (text) tab.   | If the PDF Field Name contains                                        | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                                 | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional                 | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                           | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional           | Optional Initials             | | DocuSignEnvelopeID or&lt;br&gt; eSignEnvelopeID                             | EnvelopeID                    | | DocuSignCompany or&lt;br&gt; eSignCompany                                   | Company                       | | DocuSignDateSigned or&lt;br&gt; eSignDateSigned                             | Date Signed                   | | DocuSignTitle or&lt;br&gt; eSignTitle                                       | Title                         | | DocuSignFullName or&lt;br&gt; eSignFullName                                 | Full Name                     | | DocuSignSignerAttachmentOptional or&lt;br&gt; eSignSignerAttachmentOptional | Optional Signer Attachment    |   PDF Form Field Names that include &#x60;DocuSignIgnoreTransform&#x60; or &#x60;eSignIgnoreTransform&#x60; will not be transformed.  PDF Form Date fields that include &#x60;DocuSignDateSigned&#x60; or &#x60;eSignDateSigned&#x60; will be transformed to Date Signed fields.  ## Template Email Subject Merge Fields  This feature enables you to insert recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s &#x60;roleName&#x60;, are added to the &#x60;emailSubject&#x60; when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient.  If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  * To add a recipient&#39;s name in the subject line add the following text   in the &#x60;emailSubject&#x60; when creating the template or when sending an   envelope from a template:     &#x60;[[&lt;roleName&gt;_UserName]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;&#x60;  * To add a recipient&#39;s email address in the subject line add the   following text in the emailSubject when creating the template or when   sending an envelope from a template:     &#x60;[[&lt;roleName&gt;_Email]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;&#x60;  In both cases &#x60;&lt;roleName&gt;&#x60; is the recipient&#39;s &#x60;roleName&#x60; in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.  ## Branding an Envelope  The following rules are used to determine the &#x60;brandId&#x60; used in an envelope:  * If a &#x60;brandId&#x60; is specified in the envelope or template   and that &#x60;brandId&#x60; is available to the account,   that brand is used in the envelope. * If more than one template is used in an envelope,   and more than one &#x60;brandId&#x60; is specified,   the first &#x60;brandId&#x60; specified is used throughout the envelope. * In cases where no brand is specified,   and the sender belongs to a group:   - If there is only one brand associated with the group,     then that brand is used in the envelope.   - Otherwise, the account&#39;s default signing brand is used. * For envelopes that do not meet any of the previous criteria,   the account&#39;s default signing brand is used for the envelope.   ## BCC Email Address Feature  The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options.  Do **not** use this feature to send a copy of the envelope to a recipient who does not need to sign. Use a Carbon Copy or Certified Delivery Recipient type instead.  ## Merge Recipient Roles for Draft Envelopes  When an envelope with multiple templates is sent, the recipients from the templates are merged according to the template roles, and empty recipients are removed. When creating an envelope with multiple templates, but not sending it (keeping it in a created state), duplicate recipients are not merged, which could leave duplicate recipients in the envelope.  To prevent this, the query parameter &#x60;merge_roles_on_draft&#x60; should be added when posting a draft envelope (&#x60;status&#x60; is &#x60;created&#x60;) with multiple templates. Doing this will merge template roles and remove empty recipients.   DocuSign recommends that the &#x60;merge_roles_on_draft&#x60; query parameter be used any time you are creating an envelope with multiple templates and keeping it in draft (&#x60;status&#x60; is &#x60;created&#x60;) status.   [agentDef]:                 #/definitions/agent [apirules]:                 /esign/guide/appendix/resource_limits.html#api-rules-and-limits [ccDef]:                     #/definitions/carbonCopy [certfiedDef]:               #/definitions/certifiedDelivery [connectConfigurationsRes]: /esign/restapi/Connect/ConnectConfigurations/ [connectGuide]:             https://www.docusign.com/supportdocs/pdf/connect-guide.pdf [devecenterrecipients]:     https://www.docusign.com/developer-center/explore/features/recipients [documentDef]:               #/definitions/document [editorDef]:                 #/definitions/editor [envelopeDef]:               #/definitions/envelopeDefinition [envelopeRecipientsDef]:     #/definitions/EnvelopeRecipients [envelopeRecipientsRes]:    /esign/restapi/Envelopes/EnvelopeRecipients/ [envRecipientTabsDef]:       #/definitions/EnvelopeRecipientTabs [envRecipientTabsRes]:      /esign/restapi/Envelopes/EnvelopeRecipientTabs/ [eventNotificationDef]:      #/definitions/eventNotification [inPersonDef]:               #/definitions/inPersonSigner [intermediaryDef]:           #/definitions/intermediary [signerDef]:                 #/definitions/signer 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="cdseMode">Reserved for DocuSign.  (optional)</param>
        /// <param name="completedDocumentsOnly">Reserved for DocuSign.  (optional)</param>
        /// <param name="mergeRolesOnDraft">When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the &#x60;status&#x60; field is set to &#x60;created&#x60;.)  ###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates. (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeSummary>> EnvelopesPostEnvelopesAsyncWithHttpInfo (string accountId, string cdseMode = null, string completedDocumentsOnly = null, string mergeRolesOnDraft = null, EnvelopeDefinition envelopeDefinition = null);
        /// <summary>
        /// Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft
        /// </summary>
        /// <remarks>
        /// The Put Envelopes endpoint provides the following functionality:  * Sends the specified single draft envelope. Add {\&quot;status\&quot;:\&quot;sent\&quot;} to the request body to send the envelope.  * Voids the specified in-process envelope. Add {\&quot;status\&quot;:\&quot;voided\&quot;, \&quot;voidedReason\&quot;:\&quot;The reason for voiding the envelope\&quot;} to the request body to void the envelope.  * Replaces the current email subject and message for a draft envelope. Add {\&quot;emailSubject\&quot;:\&quot;subject\&quot;,  \&quot;emailBlurb\&quot;:\&quot;message\&quot;}  to the request body to modify the subject and message.  * Place the envelope documents and envelope metadata in a purge queue so that this information is removed from the DocuSign system. Add {\&quot;purgeState\&quot;:\&quot;purge type\&quot;} to the request body.  *Additional information on purging documents*  The purge request can only be used for completed envelopes that are not marked as the authoritative copy. The requesting user must have permission to purge documents and must be the sender (the requesting user can act as the sender using Send On Behalf Of).  ###### Note: If you have set the Document Retention policy on your account, envelope documents are automatically placed in the purge queue and the warning emails are sent at the end of the retention period.  ###### Note: You can set the Document Retention policy in the Classic DocuSign Experience by specifying the number of days to retain documents.  ###### Note: Setting a Document Retention policy is the same as setting a schedule for purging documents.  When the purge request is initiated the envelope documents, or documents and envelope metadata, are placed in a purge queue for deletion in 14 days. A warning email notification is sent to the sender and recipients associated with the envelope, notifying them that the envelope documents will be deleted in 14 days and providing a link to the documents. A second email is sent 7 days later with the same message. At the end of the 14-day period, the envelope documents are deleted from the system.  If &#x60;purgeState&#x3D;\&quot;documents_queued\&quot;&#x60; is used in the request, then only the documents are deleted and any corresponding attachments and tabs remain in the DocuSign system. If &#x60;purgeState&#x3D; \&quot;documents_and_metadata_queued\&quot;&#x60; is used in the request, then the documents, attachments, and tabs are deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes. (optional)</param>
        /// <param name="resendEnvelope">When set to **true**, sends the specified envelope again. (optional)</param>
        /// <param name="envelopes"> (optional)</param>
        /// <returns>Task of EnvelopeUpdateSummary</returns>
        System.Threading.Tasks.Task<EnvelopeUpdateSummary> EnvelopesPutEnvelopeAsync (string accountId, string envelopeId, string advancedUpdate = null, string resendEnvelope = null, Envelopes envelopes = null);

        /// <summary>
        /// Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft
        /// </summary>
        /// <remarks>
        /// The Put Envelopes endpoint provides the following functionality:  * Sends the specified single draft envelope. Add {\&quot;status\&quot;:\&quot;sent\&quot;} to the request body to send the envelope.  * Voids the specified in-process envelope. Add {\&quot;status\&quot;:\&quot;voided\&quot;, \&quot;voidedReason\&quot;:\&quot;The reason for voiding the envelope\&quot;} to the request body to void the envelope.  * Replaces the current email subject and message for a draft envelope. Add {\&quot;emailSubject\&quot;:\&quot;subject\&quot;,  \&quot;emailBlurb\&quot;:\&quot;message\&quot;}  to the request body to modify the subject and message.  * Place the envelope documents and envelope metadata in a purge queue so that this information is removed from the DocuSign system. Add {\&quot;purgeState\&quot;:\&quot;purge type\&quot;} to the request body.  *Additional information on purging documents*  The purge request can only be used for completed envelopes that are not marked as the authoritative copy. The requesting user must have permission to purge documents and must be the sender (the requesting user can act as the sender using Send On Behalf Of).  ###### Note: If you have set the Document Retention policy on your account, envelope documents are automatically placed in the purge queue and the warning emails are sent at the end of the retention period.  ###### Note: You can set the Document Retention policy in the Classic DocuSign Experience by specifying the number of days to retain documents.  ###### Note: Setting a Document Retention policy is the same as setting a schedule for purging documents.  When the purge request is initiated the envelope documents, or documents and envelope metadata, are placed in a purge queue for deletion in 14 days. A warning email notification is sent to the sender and recipients associated with the envelope, notifying them that the envelope documents will be deleted in 14 days and providing a link to the documents. A second email is sent 7 days later with the same message. At the end of the 14-day period, the envelope documents are deleted from the system.  If &#x60;purgeState&#x3D;\&quot;documents_queued\&quot;&#x60; is used in the request, then only the documents are deleted and any corresponding attachments and tabs remain in the DocuSign system. If &#x60;purgeState&#x3D; \&quot;documents_and_metadata_queued\&quot;&#x60; is used in the request, then the documents, attachments, and tabs are deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes. (optional)</param>
        /// <param name="resendEnvelope">When set to **true**, sends the specified envelope again. (optional)</param>
        /// <param name="envelopes"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeUpdateSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeUpdateSummary>> EnvelopesPutEnvelopeAsyncWithHttpInfo (string accountId, string envelopeId, string advancedUpdate = null, string resendEnvelope = null, Envelopes envelopes = null);
        /// <summary>
        /// Gets the envelope status for the specified envelopes.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope status for the specified envelopes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="email">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">The date/time setting that specifies when the request begins checking for status changes for envelopes in the account.  This is required unless parameters &#x60;envelopeIds&#x60; and/or &#x60;transactionIds&#x60; are set. (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="toDate">Optional date/time setting that specifies the last date/time  or envelope status changes in the result set.   Default: \&quot;now\&quot;, the time that you call the method.   (optional)</param>
        /// <param name="envelopeIdsRequest"> (optional)</param>
        /// <returns>Task of EnvelopesInformation</returns>
        System.Threading.Tasks.Task<EnvelopesInformation> EnvelopesPutStatusAsync (string accountId, string email = null, string fromDate = null, string startPosition = null, string toDate = null, EnvelopeIdsRequest envelopeIdsRequest = null);

        /// <summary>
        /// Gets the envelope status for the specified envelopes.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope status for the specified envelopes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="email">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">The date/time setting that specifies when the request begins checking for status changes for envelopes in the account.  This is required unless parameters &#x60;envelopeIds&#x60; and/or &#x60;transactionIds&#x60; are set. (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="toDate">Optional date/time setting that specifies the last date/time  or envelope status changes in the result set.   Default: \&quot;now\&quot;, the time that you call the method.   (optional)</param>
        /// <param name="envelopeIdsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopesInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopesInformation>> EnvelopesPutStatusAsyncWithHttpInfo (string accountId, string email = null, string fromDate = null, string startPosition = null, string toDate = null, EnvelopeIdsRequest envelopeIdsRequest = null);
        /// <summary>
        /// Gets envelope notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> NotificationGetEnvelopesEnvelopeIdNotificationAsync (string accountId, string envelopeId);

        /// <summary>
        /// Gets envelope notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> NotificationGetEnvelopesEnvelopeIdNotificationAsyncWithHttpInfo (string accountId, string envelopeId);
        /// <summary>
        /// Sets envelope notification (Reminders/Expirations) structure for an existing envelope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeNotificationRequest"> (optional)</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> NotificationPutEnvelopesEnvelopeIdNotificationAsync (string accountId, string envelopeId, EnvelopeNotificationRequest envelopeNotificationRequest = null);

        /// <summary>
        /// Sets envelope notification (Reminders/Expirations) structure for an existing envelope.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeNotificationRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> NotificationPutEnvelopesEnvelopeIdNotificationAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeNotificationRequest envelopeNotificationRequest = null);
        /// <summary>
        /// Deletes a page from a document in an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in an envelope based on the page number.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PagesDeletePageAsync (string accountId, string documentId, string envelopeId, string pageNumber);

        /// <summary>
        /// Deletes a page from a document in an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in an envelope based on the page number.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PagesDeletePageAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber);
        /// <summary>
        /// Gets a page image from an envelope for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="dpi">Sets the dpi for the image. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PagesGetPageImageAsync (string accountId, string documentId, string envelopeId, string pageNumber, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null);

        /// <summary>
        /// Gets a page image from an envelope for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified envelope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="dpi">Sets the dpi for the image. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PagesGetPageImageAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null);
        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of PageImages</returns>
        System.Threading.Tasks.Task<PageImages> PagesGetPageImagesAsync (string accountId, string documentId, string envelopeId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null);

        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of ApiResponse (PageImages)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageImages>> PagesGetPageImagesAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null);
        /// <summary>
        /// Rotates page image from an envelope for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from an envelope for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PagesPutPageImageAsync (string accountId, string documentId, string envelopeId, string pageNumber, PageRequest pageRequest = null);

        /// <summary>
        /// Rotates page image from an envelope for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from an envelope for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PagesPutPageImageAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber, PageRequest pageRequest = null);
        /// <summary>
        /// Gets the initials image for a user.
        /// </summary>
        /// <remarks>
        /// Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user id and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RecipientsGetRecipientInitialsImageAsync (string accountId, string envelopeId, string recipientId, string includeChrome = null);

        /// <summary>
        /// Gets the initials image for a user.
        /// </summary>
        /// <remarks>
        /// Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user id and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RecipientsGetRecipientInitialsImageAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId, string includeChrome = null);
        /// <summary>
        /// Gets signature information for a signer or sign-in-person recipient.
        /// </summary>
        /// <remarks>
        /// Retrieves signature information for a signer or sign-in-person recipient.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of UserSignatures</returns>
        System.Threading.Tasks.Task<UserSignatures> RecipientsGetRecipientSignatureAsync (string accountId, string envelopeId, string recipientId);

        /// <summary>
        /// Gets signature information for a signer or sign-in-person recipient.
        /// </summary>
        /// <remarks>
        /// Retrieves signature information for a signer or sign-in-person recipient.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of ApiResponse (UserSignatures)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSignatures>> RecipientsGetRecipientSignatureAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId);
        /// <summary>
        /// Retrieve signature image information for a signer/sign-in-person recipient.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that don&#39;t properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">When set to **true**, indicates the chromed version of the signature image should be retrieved. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RecipientsGetRecipientSignatureImageAsync (string accountId, string envelopeId, string recipientId, string includeChrome = null);

        /// <summary>
        /// Retrieve signature image information for a signer/sign-in-person recipient.
        /// </summary>
        /// <remarks>
        /// Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that don&#39;t properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">When set to **true**, indicates the chromed version of the signature image should be retrieved. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RecipientsGetRecipientSignatureImageAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId, string includeChrome = null);
        /// <summary>
        /// Sets the initials image for an accountless signer.
        /// </summary>
        /// <remarks>
        /// Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RecipientsPutRecipientInitialsImageAsync (string accountId, string envelopeId, string recipientId);

        /// <summary>
        /// Sets the initials image for an accountless signer.
        /// </summary>
        /// <remarks>
        /// Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecipientsPutRecipientInitialsImageAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId);
        /// <summary>
        /// Sets the signature image for an accountless signer.
        /// </summary>
        /// <remarks>
        /// Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RecipientsPutRecipientSignatureImageAsync (string accountId, string envelopeId, string recipientId);

        /// <summary>
        /// Sets the signature image for an accountless signer.
        /// </summary>
        /// <remarks>
        /// Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecipientsPutRecipientSignatureImageAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnvelopesApi : IEnvelopesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvelopesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvelopesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the envelope audit events for an envelope. Gets the envelope audit events for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>EnvelopeAuditEventResponse</returns>
        public EnvelopeAuditEventResponse AuditEventsGetAuditEvents (string accountId, string envelopeId)
        {
             ApiResponse<EnvelopeAuditEventResponse> localVarResponse = AuditEventsGetAuditEventsWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the envelope audit events for an envelope. Gets the envelope audit events for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of EnvelopeAuditEventResponse</returns>
        public ApiResponse< EnvelopeAuditEventResponse > AuditEventsGetAuditEventsWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->AuditEventsGetAuditEvents");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->AuditEventsGetAuditEvents");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/audit_events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuditEventsGetAuditEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeAuditEventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeAuditEventResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeAuditEventResponse)));
            
        }

        /// <summary>
        /// Gets the envelope audit events for an envelope. Gets the envelope audit events for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of EnvelopeAuditEventResponse</returns>
        public async System.Threading.Tasks.Task<EnvelopeAuditEventResponse> AuditEventsGetAuditEventsAsync (string accountId, string envelopeId)
        {
             ApiResponse<EnvelopeAuditEventResponse> localVarResponse = await AuditEventsGetAuditEventsAsyncWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the envelope audit events for an envelope. Gets the envelope audit events for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (EnvelopeAuditEventResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeAuditEventResponse>> AuditEventsGetAuditEventsAsyncWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->AuditEventsGetAuditEvents");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->AuditEventsGetAuditEvents");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/audit_events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuditEventsGetAuditEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeAuditEventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeAuditEventResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeAuditEventResponse)));
            
        }

        /// <summary>
        /// Gets the status of a envelope. Retrieves the overall status for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When true, envelope information can be added or modified. (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>Envelopes</returns>
        public Envelopes EnvelopesGetEnvelope (string accountId, string envelopeId, string advancedUpdate = null, string include = null)
        {
             ApiResponse<Envelopes> localVarResponse = EnvelopesGetEnvelopeWithHttpInfo(accountId, envelopeId, advancedUpdate, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of a envelope. Retrieves the overall status for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When true, envelope information can be added or modified. (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>ApiResponse of Envelopes</returns>
        public ApiResponse< Envelopes > EnvelopesGetEnvelopeWithHttpInfo (string accountId, string envelopeId, string advancedUpdate = null, string include = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->EnvelopesGetEnvelope");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->EnvelopesGetEnvelope");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (advancedUpdate != null) localVarQueryParams.Add("advanced_update", Configuration.ApiClient.ParameterToString(advancedUpdate)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvelopesGetEnvelope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Envelopes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Envelopes) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Envelopes)));
            
        }

        /// <summary>
        /// Gets the status of a envelope. Retrieves the overall status for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When true, envelope information can be added or modified. (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of Envelopes</returns>
        public async System.Threading.Tasks.Task<Envelopes> EnvelopesGetEnvelopeAsync (string accountId, string envelopeId, string advancedUpdate = null, string include = null)
        {
             ApiResponse<Envelopes> localVarResponse = await EnvelopesGetEnvelopeAsyncWithHttpInfo(accountId, envelopeId, advancedUpdate, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the status of a envelope. Retrieves the overall status for the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When true, envelope information can be added or modified. (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of ApiResponse (Envelopes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Envelopes>> EnvelopesGetEnvelopeAsyncWithHttpInfo (string accountId, string envelopeId, string advancedUpdate = null, string include = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->EnvelopesGetEnvelope");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->EnvelopesGetEnvelope");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (advancedUpdate != null) localVarQueryParams.Add("advanced_update", Configuration.ApiClient.ParameterToString(advancedUpdate)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvelopesGetEnvelope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Envelopes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Envelopes) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Envelopes)));
            
        }

        /// <summary>
        /// Gets status changes for one or more envelopes. Retrieves a list of envelopes that match your request.  A large set of optional filters let you filter by date, by envelope ID, or by status codes.  Your request must include one or more of the following parameters:  * &#x60;from_date&#x60; * &#x60;envelope_ids&#x60; * &#x60;transaction_ids&#x60;   Getting envelope status using &#x60;transaction_ids&#x60; is useful for offline signing situations where it can be used determine if an envelope was created or not. It can be used for the cases where a network connection was lost, before the envelope status could be returned.  To avoid unnecessary database queries, the DocuSign signature platform first checks requests to ensure that the filter set supplied does not result in a zero-size response before querying the database.   For example, for a request with a &#x60;from_to_status&#x60; of &#x60;delivered&#x60; and a current &#x60;status&#x60; of &#x60;created,sent&#x60;, DocuSign will always return an empty list.  This is because the request translates to: find the envelopes that were delivered between the &#x60;from_date&#x60; and &#x60;to_date&#x60; dates that have a current status of &#x60;created&#x60; or &#x60;sent&#x60;. Since an envelope that has been delivered can never have a status of &#x60;created&#x60; or &#x60;sent&#x60;, a zero-size response would be generated.  In this case, DocuSign does not query the database and returns an empty list immediately.   The following table shows the valid current envelope statuses (&#x60;status&#x60; parameter) for the different status qualifiers (&#x60;from_to_status&#x60; parameter) in the request. If the status and status qualifiers in the API request do not contain any of the values shown in the Valid Current Statuses column, then an empty list is returned.  Client applications should check that the statuses (&#x60;status&#x60; parameter) they are requesting make sense for a given &#x60;from_to_status&#x60; parameter value.  | Status Qualifier&lt;br&gt;(&#x60;from_to_status&#x60;) | Effective Status Qualifier | Valid Current Statuses                                                      |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |   | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |   | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |   | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |   | declined                               | StatusChanged              | any, declined, voided, deleted                                              |   | timedout&lt;br&gt;always return zero results | StatusChanged              | any, voided, deleted                                                        |   | voided                                 | Voided                     | any, voided, deleted                                                        |   | deleted                                | StatusChanged              | any, deleted                                                                |    ## Extraneous results  In some cases, a request for a specific envelope status will include envelopes with additional statuses. For example, in a request with a &#x60;from_date&#x60; of 2017-01-01, a &#x60;to_date&#x60; of 2017-01-07 and the status qualifier (&#x60;from_to_status&#x60;) set to &#x60;delivered&#x60;, the response set might contain envelopes that were created during that time period, but not delivered during the time period. As a workaround, check the envelope status values in the result set as needed.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="acStatus">Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed. (optional)</param>
        /// <param name="block">Reserved for DocuSign.  (optional)</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="customField">Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: &#x60;custom_envelope_field_name&#x3D;desired_value&#x60;  The value portion of the query can use partial strings by adding &#39;%&#39; (percent sign) around the custom field query value.   Example 1: If you have an envelope custom field named \&quot;Region\&quot; and you want to search for all envelopes where the value is \&quot;West\&quot; you would use set this parameter to &#x60;Region&#x3D;West&#x60;.   Example 2: To search for envelopes where the &#x60;ApplicationID&#x60; custom field has the value or partial value of \&quot;DocuSign\&quot; in the field, set this parameter to &#x60;ApplicationId&#x3D;%DocuSign%&#x60; This would match envelopes where the custom field&#39;s value is \&quot;DocuSign for Salesforce\&quot; or \&quot;DocuSign envelope\&quot;.   (optional)</param>
        /// <param name="email">Limit results to envelopes sent by the account user with this email address.  &#x60;user_name&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <param name="envelopeIds">Comma separated list of &#x60;envelopeId&#x60; values. (optional)</param>
        /// <param name="exclude">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderTypes">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">Specifies the date and time to start looking for status changes. This parameter is required unless &#x60;envelopeIds&#x60; or &#x60;transactionIds&#x60; are set.   Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 (optional)</param>
        /// <param name="fromToStatus">The status value checked for in the &#x60;from_date&#x60; to &#x60;to_date&#x60; time period.   Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.  If &#x60;Changed&#x60; is specified, then envelopes that changed status during the period will be returned.   For example, if &#x60;Created&#x60; is specified, then envelopes created during the period are found.   The default is &#x60;Changed&#x60;.  (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includePurgeInformation"> (optional)</param>
        /// <param name="intersectingFolderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="order">Reserved for DocuSign.  (optional)</param>
        /// <param name="orderBy">Reserved for DocuSign.  (optional)</param>
        /// <param name="powerformids">Reserved for DocuSign.  (optional)</param>
        /// <param name="searchText">Reserved for DocuSign.  (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="status">A comma-separated list of current envelope statuses to included in the response. Possible values are:  * completed * created * declined * deleted * delivered * processing * sent * signed * timedout * voided  The &#x60;any&#x60; value is equivalent to any status.   (optional)</param>
        /// <param name="toDate">Specifies the date and time to stop looking for status changes. The default is the current date and time.  Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)</param>
        /// <param name="transactionIds">A comma-separated list of envelope transaction IDs. Transaction IDs are only valid for seven days.  (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <param name="userId">Reserved for DocuSign.  (optional)</param>
        /// <param name="userName">Limit results to envelopes sent by the account user with this user name.  &#x60;email&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <returns>EnvelopesInformation</returns>
        public EnvelopesInformation EnvelopesGetEnvelopes (string accountId, string acStatus = null, string block = null, string count = null, string customField = null, string email = null, string envelopeIds = null, string exclude = null, string folderIds = null, string folderTypes = null, string fromDate = null, string fromToStatus = null, string include = null, string includePurgeInformation = null, string intersectingFolderIds = null, string order = null, string orderBy = null, string powerformids = null, string searchText = null, string startPosition = null, string status = null, string toDate = null, string transactionIds = null, string userFilter = null, string userId = null, string userName = null)
        {
             ApiResponse<EnvelopesInformation> localVarResponse = EnvelopesGetEnvelopesWithHttpInfo(accountId, acStatus, block, count, customField, email, envelopeIds, exclude, folderIds, folderTypes, fromDate, fromToStatus, include, includePurgeInformation, intersectingFolderIds, order, orderBy, powerformids, searchText, startPosition, status, toDate, transactionIds, userFilter, userId, userName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets status changes for one or more envelopes. Retrieves a list of envelopes that match your request.  A large set of optional filters let you filter by date, by envelope ID, or by status codes.  Your request must include one or more of the following parameters:  * &#x60;from_date&#x60; * &#x60;envelope_ids&#x60; * &#x60;transaction_ids&#x60;   Getting envelope status using &#x60;transaction_ids&#x60; is useful for offline signing situations where it can be used determine if an envelope was created or not. It can be used for the cases where a network connection was lost, before the envelope status could be returned.  To avoid unnecessary database queries, the DocuSign signature platform first checks requests to ensure that the filter set supplied does not result in a zero-size response before querying the database.   For example, for a request with a &#x60;from_to_status&#x60; of &#x60;delivered&#x60; and a current &#x60;status&#x60; of &#x60;created,sent&#x60;, DocuSign will always return an empty list.  This is because the request translates to: find the envelopes that were delivered between the &#x60;from_date&#x60; and &#x60;to_date&#x60; dates that have a current status of &#x60;created&#x60; or &#x60;sent&#x60;. Since an envelope that has been delivered can never have a status of &#x60;created&#x60; or &#x60;sent&#x60;, a zero-size response would be generated.  In this case, DocuSign does not query the database and returns an empty list immediately.   The following table shows the valid current envelope statuses (&#x60;status&#x60; parameter) for the different status qualifiers (&#x60;from_to_status&#x60; parameter) in the request. If the status and status qualifiers in the API request do not contain any of the values shown in the Valid Current Statuses column, then an empty list is returned.  Client applications should check that the statuses (&#x60;status&#x60; parameter) they are requesting make sense for a given &#x60;from_to_status&#x60; parameter value.  | Status Qualifier&lt;br&gt;(&#x60;from_to_status&#x60;) | Effective Status Qualifier | Valid Current Statuses                                                      |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |   | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |   | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |   | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |   | declined                               | StatusChanged              | any, declined, voided, deleted                                              |   | timedout&lt;br&gt;always return zero results | StatusChanged              | any, voided, deleted                                                        |   | voided                                 | Voided                     | any, voided, deleted                                                        |   | deleted                                | StatusChanged              | any, deleted                                                                |    ## Extraneous results  In some cases, a request for a specific envelope status will include envelopes with additional statuses. For example, in a request with a &#x60;from_date&#x60; of 2017-01-01, a &#x60;to_date&#x60; of 2017-01-07 and the status qualifier (&#x60;from_to_status&#x60;) set to &#x60;delivered&#x60;, the response set might contain envelopes that were created during that time period, but not delivered during the time period. As a workaround, check the envelope status values in the result set as needed.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="acStatus">Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed. (optional)</param>
        /// <param name="block">Reserved for DocuSign.  (optional)</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="customField">Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: &#x60;custom_envelope_field_name&#x3D;desired_value&#x60;  The value portion of the query can use partial strings by adding &#39;%&#39; (percent sign) around the custom field query value.   Example 1: If you have an envelope custom field named \&quot;Region\&quot; and you want to search for all envelopes where the value is \&quot;West\&quot; you would use set this parameter to &#x60;Region&#x3D;West&#x60;.   Example 2: To search for envelopes where the &#x60;ApplicationID&#x60; custom field has the value or partial value of \&quot;DocuSign\&quot; in the field, set this parameter to &#x60;ApplicationId&#x3D;%DocuSign%&#x60; This would match envelopes where the custom field&#39;s value is \&quot;DocuSign for Salesforce\&quot; or \&quot;DocuSign envelope\&quot;.   (optional)</param>
        /// <param name="email">Limit results to envelopes sent by the account user with this email address.  &#x60;user_name&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <param name="envelopeIds">Comma separated list of &#x60;envelopeId&#x60; values. (optional)</param>
        /// <param name="exclude">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderTypes">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">Specifies the date and time to start looking for status changes. This parameter is required unless &#x60;envelopeIds&#x60; or &#x60;transactionIds&#x60; are set.   Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 (optional)</param>
        /// <param name="fromToStatus">The status value checked for in the &#x60;from_date&#x60; to &#x60;to_date&#x60; time period.   Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.  If &#x60;Changed&#x60; is specified, then envelopes that changed status during the period will be returned.   For example, if &#x60;Created&#x60; is specified, then envelopes created during the period are found.   The default is &#x60;Changed&#x60;.  (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includePurgeInformation"> (optional)</param>
        /// <param name="intersectingFolderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="order">Reserved for DocuSign.  (optional)</param>
        /// <param name="orderBy">Reserved for DocuSign.  (optional)</param>
        /// <param name="powerformids">Reserved for DocuSign.  (optional)</param>
        /// <param name="searchText">Reserved for DocuSign.  (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="status">A comma-separated list of current envelope statuses to included in the response. Possible values are:  * completed * created * declined * deleted * delivered * processing * sent * signed * timedout * voided  The &#x60;any&#x60; value is equivalent to any status.   (optional)</param>
        /// <param name="toDate">Specifies the date and time to stop looking for status changes. The default is the current date and time.  Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)</param>
        /// <param name="transactionIds">A comma-separated list of envelope transaction IDs. Transaction IDs are only valid for seven days.  (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <param name="userId">Reserved for DocuSign.  (optional)</param>
        /// <param name="userName">Limit results to envelopes sent by the account user with this user name.  &#x60;email&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <returns>ApiResponse of EnvelopesInformation</returns>
        public ApiResponse< EnvelopesInformation > EnvelopesGetEnvelopesWithHttpInfo (string accountId, string acStatus = null, string block = null, string count = null, string customField = null, string email = null, string envelopeIds = null, string exclude = null, string folderIds = null, string folderTypes = null, string fromDate = null, string fromToStatus = null, string include = null, string includePurgeInformation = null, string intersectingFolderIds = null, string order = null, string orderBy = null, string powerformids = null, string searchText = null, string startPosition = null, string status = null, string toDate = null, string transactionIds = null, string userFilter = null, string userId = null, string userName = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->EnvelopesGetEnvelopes");

            var localVarPath = "/v2/accounts/{accountId}/envelopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (acStatus != null) localVarQueryParams.Add("ac_status", Configuration.ApiClient.ParameterToString(acStatus)); // query parameter
            if (block != null) localVarQueryParams.Add("block", Configuration.ApiClient.ParameterToString(block)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (customField != null) localVarQueryParams.Add("custom_field", Configuration.ApiClient.ParameterToString(customField)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (envelopeIds != null) localVarQueryParams.Add("envelope_ids", Configuration.ApiClient.ParameterToString(envelopeIds)); // query parameter
            if (exclude != null) localVarQueryParams.Add("exclude", Configuration.ApiClient.ParameterToString(exclude)); // query parameter
            if (folderIds != null) localVarQueryParams.Add("folder_ids", Configuration.ApiClient.ParameterToString(folderIds)); // query parameter
            if (folderTypes != null) localVarQueryParams.Add("folder_types", Configuration.ApiClient.ParameterToString(folderTypes)); // query parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (fromToStatus != null) localVarQueryParams.Add("from_to_status", Configuration.ApiClient.ParameterToString(fromToStatus)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (includePurgeInformation != null) localVarQueryParams.Add("include_purge_information", Configuration.ApiClient.ParameterToString(includePurgeInformation)); // query parameter
            if (intersectingFolderIds != null) localVarQueryParams.Add("intersecting_folder_ids", Configuration.ApiClient.ParameterToString(intersectingFolderIds)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (powerformids != null) localVarQueryParams.Add("powerformids", Configuration.ApiClient.ParameterToString(powerformids)); // query parameter
            if (searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter
            if (transactionIds != null) localVarQueryParams.Add("transaction_ids", Configuration.ApiClient.ParameterToString(transactionIds)); // query parameter
            if (userFilter != null) localVarQueryParams.Add("user_filter", Configuration.ApiClient.ParameterToString(userFilter)); // query parameter
            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (userName != null) localVarQueryParams.Add("user_name", Configuration.ApiClient.ParameterToString(userName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvelopesGetEnvelopes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopesInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopesInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopesInformation)));
            
        }

        /// <summary>
        /// Gets status changes for one or more envelopes. Retrieves a list of envelopes that match your request.  A large set of optional filters let you filter by date, by envelope ID, or by status codes.  Your request must include one or more of the following parameters:  * &#x60;from_date&#x60; * &#x60;envelope_ids&#x60; * &#x60;transaction_ids&#x60;   Getting envelope status using &#x60;transaction_ids&#x60; is useful for offline signing situations where it can be used determine if an envelope was created or not. It can be used for the cases where a network connection was lost, before the envelope status could be returned.  To avoid unnecessary database queries, the DocuSign signature platform first checks requests to ensure that the filter set supplied does not result in a zero-size response before querying the database.   For example, for a request with a &#x60;from_to_status&#x60; of &#x60;delivered&#x60; and a current &#x60;status&#x60; of &#x60;created,sent&#x60;, DocuSign will always return an empty list.  This is because the request translates to: find the envelopes that were delivered between the &#x60;from_date&#x60; and &#x60;to_date&#x60; dates that have a current status of &#x60;created&#x60; or &#x60;sent&#x60;. Since an envelope that has been delivered can never have a status of &#x60;created&#x60; or &#x60;sent&#x60;, a zero-size response would be generated.  In this case, DocuSign does not query the database and returns an empty list immediately.   The following table shows the valid current envelope statuses (&#x60;status&#x60; parameter) for the different status qualifiers (&#x60;from_to_status&#x60; parameter) in the request. If the status and status qualifiers in the API request do not contain any of the values shown in the Valid Current Statuses column, then an empty list is returned.  Client applications should check that the statuses (&#x60;status&#x60; parameter) they are requesting make sense for a given &#x60;from_to_status&#x60; parameter value.  | Status Qualifier&lt;br&gt;(&#x60;from_to_status&#x60;) | Effective Status Qualifier | Valid Current Statuses                                                      |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |   | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |   | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |   | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |   | declined                               | StatusChanged              | any, declined, voided, deleted                                              |   | timedout&lt;br&gt;always return zero results | StatusChanged              | any, voided, deleted                                                        |   | voided                                 | Voided                     | any, voided, deleted                                                        |   | deleted                                | StatusChanged              | any, deleted                                                                |    ## Extraneous results  In some cases, a request for a specific envelope status will include envelopes with additional statuses. For example, in a request with a &#x60;from_date&#x60; of 2017-01-01, a &#x60;to_date&#x60; of 2017-01-07 and the status qualifier (&#x60;from_to_status&#x60;) set to &#x60;delivered&#x60;, the response set might contain envelopes that were created during that time period, but not delivered during the time period. As a workaround, check the envelope status values in the result set as needed.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="acStatus">Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed. (optional)</param>
        /// <param name="block">Reserved for DocuSign.  (optional)</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="customField">Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: &#x60;custom_envelope_field_name&#x3D;desired_value&#x60;  The value portion of the query can use partial strings by adding &#39;%&#39; (percent sign) around the custom field query value.   Example 1: If you have an envelope custom field named \&quot;Region\&quot; and you want to search for all envelopes where the value is \&quot;West\&quot; you would use set this parameter to &#x60;Region&#x3D;West&#x60;.   Example 2: To search for envelopes where the &#x60;ApplicationID&#x60; custom field has the value or partial value of \&quot;DocuSign\&quot; in the field, set this parameter to &#x60;ApplicationId&#x3D;%DocuSign%&#x60; This would match envelopes where the custom field&#39;s value is \&quot;DocuSign for Salesforce\&quot; or \&quot;DocuSign envelope\&quot;.   (optional)</param>
        /// <param name="email">Limit results to envelopes sent by the account user with this email address.  &#x60;user_name&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <param name="envelopeIds">Comma separated list of &#x60;envelopeId&#x60; values. (optional)</param>
        /// <param name="exclude">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderTypes">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">Specifies the date and time to start looking for status changes. This parameter is required unless &#x60;envelopeIds&#x60; or &#x60;transactionIds&#x60; are set.   Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 (optional)</param>
        /// <param name="fromToStatus">The status value checked for in the &#x60;from_date&#x60; to &#x60;to_date&#x60; time period.   Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.  If &#x60;Changed&#x60; is specified, then envelopes that changed status during the period will be returned.   For example, if &#x60;Created&#x60; is specified, then envelopes created during the period are found.   The default is &#x60;Changed&#x60;.  (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includePurgeInformation"> (optional)</param>
        /// <param name="intersectingFolderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="order">Reserved for DocuSign.  (optional)</param>
        /// <param name="orderBy">Reserved for DocuSign.  (optional)</param>
        /// <param name="powerformids">Reserved for DocuSign.  (optional)</param>
        /// <param name="searchText">Reserved for DocuSign.  (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="status">A comma-separated list of current envelope statuses to included in the response. Possible values are:  * completed * created * declined * deleted * delivered * processing * sent * signed * timedout * voided  The &#x60;any&#x60; value is equivalent to any status.   (optional)</param>
        /// <param name="toDate">Specifies the date and time to stop looking for status changes. The default is the current date and time.  Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)</param>
        /// <param name="transactionIds">A comma-separated list of envelope transaction IDs. Transaction IDs are only valid for seven days.  (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <param name="userId">Reserved for DocuSign.  (optional)</param>
        /// <param name="userName">Limit results to envelopes sent by the account user with this user name.  &#x60;email&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <returns>Task of EnvelopesInformation</returns>
        public async System.Threading.Tasks.Task<EnvelopesInformation> EnvelopesGetEnvelopesAsync (string accountId, string acStatus = null, string block = null, string count = null, string customField = null, string email = null, string envelopeIds = null, string exclude = null, string folderIds = null, string folderTypes = null, string fromDate = null, string fromToStatus = null, string include = null, string includePurgeInformation = null, string intersectingFolderIds = null, string order = null, string orderBy = null, string powerformids = null, string searchText = null, string startPosition = null, string status = null, string toDate = null, string transactionIds = null, string userFilter = null, string userId = null, string userName = null)
        {
             ApiResponse<EnvelopesInformation> localVarResponse = await EnvelopesGetEnvelopesAsyncWithHttpInfo(accountId, acStatus, block, count, customField, email, envelopeIds, exclude, folderIds, folderTypes, fromDate, fromToStatus, include, includePurgeInformation, intersectingFolderIds, order, orderBy, powerformids, searchText, startPosition, status, toDate, transactionIds, userFilter, userId, userName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets status changes for one or more envelopes. Retrieves a list of envelopes that match your request.  A large set of optional filters let you filter by date, by envelope ID, or by status codes.  Your request must include one or more of the following parameters:  * &#x60;from_date&#x60; * &#x60;envelope_ids&#x60; * &#x60;transaction_ids&#x60;   Getting envelope status using &#x60;transaction_ids&#x60; is useful for offline signing situations where it can be used determine if an envelope was created or not. It can be used for the cases where a network connection was lost, before the envelope status could be returned.  To avoid unnecessary database queries, the DocuSign signature platform first checks requests to ensure that the filter set supplied does not result in a zero-size response before querying the database.   For example, for a request with a &#x60;from_to_status&#x60; of &#x60;delivered&#x60; and a current &#x60;status&#x60; of &#x60;created,sent&#x60;, DocuSign will always return an empty list.  This is because the request translates to: find the envelopes that were delivered between the &#x60;from_date&#x60; and &#x60;to_date&#x60; dates that have a current status of &#x60;created&#x60; or &#x60;sent&#x60;. Since an envelope that has been delivered can never have a status of &#x60;created&#x60; or &#x60;sent&#x60;, a zero-size response would be generated.  In this case, DocuSign does not query the database and returns an empty list immediately.   The following table shows the valid current envelope statuses (&#x60;status&#x60; parameter) for the different status qualifiers (&#x60;from_to_status&#x60; parameter) in the request. If the status and status qualifiers in the API request do not contain any of the values shown in the Valid Current Statuses column, then an empty list is returned.  Client applications should check that the statuses (&#x60;status&#x60; parameter) they are requesting make sense for a given &#x60;from_to_status&#x60; parameter value.  | Status Qualifier&lt;br&gt;(&#x60;from_to_status&#x60;) | Effective Status Qualifier | Valid Current Statuses                                                      |   | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - |   | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |   | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |   | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |   | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |   | declined                               | StatusChanged              | any, declined, voided, deleted                                              |   | timedout&lt;br&gt;always return zero results | StatusChanged              | any, voided, deleted                                                        |   | voided                                 | Voided                     | any, voided, deleted                                                        |   | deleted                                | StatusChanged              | any, deleted                                                                |    ## Extraneous results  In some cases, a request for a specific envelope status will include envelopes with additional statuses. For example, in a request with a &#x60;from_date&#x60; of 2017-01-01, a &#x60;to_date&#x60; of 2017-01-07 and the status qualifier (&#x60;from_to_status&#x60;) set to &#x60;delivered&#x60;, the response set might contain envelopes that were created during that time period, but not delivered during the time period. As a workaround, check the envelope status values in the result set as needed.  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="acStatus">Specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed. (optional)</param>
        /// <param name="block">Reserved for DocuSign.  (optional)</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="customField">Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: &#x60;custom_envelope_field_name&#x3D;desired_value&#x60;  The value portion of the query can use partial strings by adding &#39;%&#39; (percent sign) around the custom field query value.   Example 1: If you have an envelope custom field named \&quot;Region\&quot; and you want to search for all envelopes where the value is \&quot;West\&quot; you would use set this parameter to &#x60;Region&#x3D;West&#x60;.   Example 2: To search for envelopes where the &#x60;ApplicationID&#x60; custom field has the value or partial value of \&quot;DocuSign\&quot; in the field, set this parameter to &#x60;ApplicationId&#x3D;%DocuSign%&#x60; This would match envelopes where the custom field&#39;s value is \&quot;DocuSign for Salesforce\&quot; or \&quot;DocuSign envelope\&quot;.   (optional)</param>
        /// <param name="email">Limit results to envelopes sent by the account user with this email address.  &#x60;user_name&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <param name="envelopeIds">Comma separated list of &#x60;envelopeId&#x60; values. (optional)</param>
        /// <param name="exclude">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="folderTypes">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">Specifies the date and time to start looking for status changes. This parameter is required unless &#x60;envelopeIds&#x60; or &#x60;transactionIds&#x60; are set.   Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 (optional)</param>
        /// <param name="fromToStatus">The status value checked for in the &#x60;from_date&#x60; to &#x60;to_date&#x60; time period.   Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.  If &#x60;Changed&#x60; is specified, then envelopes that changed status during the period will be returned.   For example, if &#x60;Created&#x60; is specified, then envelopes created during the period are found.   The default is &#x60;Changed&#x60;.  (optional)</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <param name="includePurgeInformation"> (optional)</param>
        /// <param name="intersectingFolderIds">Reserved for DocuSign.  (optional)</param>
        /// <param name="order">Reserved for DocuSign.  (optional)</param>
        /// <param name="orderBy">Reserved for DocuSign.  (optional)</param>
        /// <param name="powerformids">Reserved for DocuSign.  (optional)</param>
        /// <param name="searchText">Reserved for DocuSign.  (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="status">A comma-separated list of current envelope statuses to included in the response. Possible values are:  * completed * created * declined * deleted * delivered * processing * sent * signed * timedout * voided  The &#x60;any&#x60; value is equivalent to any status.   (optional)</param>
        /// <param name="toDate">Specifies the date and time to stop looking for status changes. The default is the current date and time.  Although you can use any date format supported by the .NET system library&#39;s [&#x60;DateTime.Parse()&#x60;][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server&#39;s time zone.  For example, the following dates and times refer to the same instant:  * &#x60;2017-05-02T01:44Z&#x60; * &#x60;2017-05-01T21:44-04:00&#x60; * &#x60;2017-05-01T18:44-07:00&#x60;   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v&#x3D;vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)</param>
        /// <param name="transactionIds">A comma-separated list of envelope transaction IDs. Transaction IDs are only valid for seven days.  (optional)</param>
        /// <param name="userFilter">Reserved for DocuSign.  (optional)</param>
        /// <param name="userId">Reserved for DocuSign.  (optional)</param>
        /// <param name="userName">Limit results to envelopes sent by the account user with this user name.  &#x60;email&#x60; must be given as well, and both &#x60;email&#x60; and &#x60;user_name&#x60; must refer to an existing account user.  (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopesInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopesInformation>> EnvelopesGetEnvelopesAsyncWithHttpInfo (string accountId, string acStatus = null, string block = null, string count = null, string customField = null, string email = null, string envelopeIds = null, string exclude = null, string folderIds = null, string folderTypes = null, string fromDate = null, string fromToStatus = null, string include = null, string includePurgeInformation = null, string intersectingFolderIds = null, string order = null, string orderBy = null, string powerformids = null, string searchText = null, string startPosition = null, string status = null, string toDate = null, string transactionIds = null, string userFilter = null, string userId = null, string userName = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->EnvelopesGetEnvelopes");

            var localVarPath = "/v2/accounts/{accountId}/envelopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (acStatus != null) localVarQueryParams.Add("ac_status", Configuration.ApiClient.ParameterToString(acStatus)); // query parameter
            if (block != null) localVarQueryParams.Add("block", Configuration.ApiClient.ParameterToString(block)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (customField != null) localVarQueryParams.Add("custom_field", Configuration.ApiClient.ParameterToString(customField)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (envelopeIds != null) localVarQueryParams.Add("envelope_ids", Configuration.ApiClient.ParameterToString(envelopeIds)); // query parameter
            if (exclude != null) localVarQueryParams.Add("exclude", Configuration.ApiClient.ParameterToString(exclude)); // query parameter
            if (folderIds != null) localVarQueryParams.Add("folder_ids", Configuration.ApiClient.ParameterToString(folderIds)); // query parameter
            if (folderTypes != null) localVarQueryParams.Add("folder_types", Configuration.ApiClient.ParameterToString(folderTypes)); // query parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (fromToStatus != null) localVarQueryParams.Add("from_to_status", Configuration.ApiClient.ParameterToString(fromToStatus)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (includePurgeInformation != null) localVarQueryParams.Add("include_purge_information", Configuration.ApiClient.ParameterToString(includePurgeInformation)); // query parameter
            if (intersectingFolderIds != null) localVarQueryParams.Add("intersecting_folder_ids", Configuration.ApiClient.ParameterToString(intersectingFolderIds)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (powerformids != null) localVarQueryParams.Add("powerformids", Configuration.ApiClient.ParameterToString(powerformids)); // query parameter
            if (searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter
            if (transactionIds != null) localVarQueryParams.Add("transaction_ids", Configuration.ApiClient.ParameterToString(transactionIds)); // query parameter
            if (userFilter != null) localVarQueryParams.Add("user_filter", Configuration.ApiClient.ParameterToString(userFilter)); // query parameter
            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (userName != null) localVarQueryParams.Add("user_name", Configuration.ApiClient.ParameterToString(userName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvelopesGetEnvelopes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopesInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopesInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopesInformation)));
            
        }

        /// <summary>
        /// Creates an envelope. Creates and sends an envelope or creates a draft envelope. Envelopes are fundamental resources in the DocuSign platform and are used in a variety of ways.  With this method you can:  * Create and send an envelope   with documents, recipients, and tabs. * Create and send an envelope from a template. * Create and send an envelope from   a combination of documents and templates. * Create a draft envelope.  There are many ways to use envelopes. You can create and send an envelope with a single API request, or you can use several API requests to create, populate, and send envelopes.  When you use this method to create and send an envelope in a single request, the following parameters are required:  | Parameter      | Description | | :- -- -- -- -      | :- -- -- -- -- - | | &#x60;status&#x60;       | Set to &#x60;sent&#x60; to send the envelope to recipients.&lt;br&gt;Set to &#x60;created&#x60; (or don&#39;t set at all) to save the envelope as a draft. | | &#x60;emailSubject&#x60; | The subject of the email used to send the envelope. | | &#x60;documents&#x60;    | The documents to be signed. | | &#x60;recipients&#x60;   | The email addresses of the envelope recipients. |  If you are creating an envelope to be sent later, save it as a draft by either setting &#x60;status&#x60; to &#x60;created&#x60; or leaving it unset. For instance, you can create a draft envelope with documents only. Using additional API requests, you can add the recipients and send the envelope in subsequent API requests.    ## Feature Availability  Not all DocuSign features are available to all accounts. Use DocuSign Admin to check and enable feature availability. You can also check feature availability via the web application. For example, if the web application allows you to send an envelope with SMS authentication, then you can use the same feature through the API.  ## Sending Envelopes  Documents can be included with the Envelopes:create method, or a template can include documents. Documents can be added by using a multipart/form request or by using the &#x60;documentBase64&#x60; property of the [&#x60;document&#x60; object][documentDef].  ### Adding Documents to Requests  There are two ways to add documents to your envelopes:  1. Use the &#x60;documents&#x60; property of the envelope definition. 2. Send this request as a multipart/form-data &#x60;POST&#x60;    with documents added through additional request parts.  Using the &#x60;documents&#x60; property is the simpler option, but the request may be quite large due to the base64 encoding. This example shows how to add a document using this method.  &#x60;&#x60;&#x60;json {   \&quot;status\&quot;: \&quot;sent\&quot;,   \&quot;emailSubject\&quot;: \&quot;Example of one recipient, type signer\&quot;,   \&quot;documents\&quot;: [{     \&quot;documentId\&quot;: \&quot;1\&quot;,     \&quot;name\&quot;: \&quot;contract.pdf\&quot;,     \&quot;documentBase64\&quot;: \&quot;base64 document bytes...\&quot;,   }],   \&quot;recipients\&quot;: {     \&quot;signers\&quot;: [{       \&quot;name\&quot;: \&quot;Lisa Simpson\&quot;,       \&quot;email\&quot;: \&quot;lisa@email.com\&quot;,       \&quot;recipientId\&quot;: \&quot;1\&quot;,       \&quot;routingOrder\&quot;: \&quot;1\&quot;,       \&quot;tabs\&quot;: {         \&quot;signHereTabs\&quot;: [{           \&quot;xPosition\&quot;: \&quot;150\&quot;,           \&quot;yPosition\&quot;: \&quot;200\&quot;,           \&quot;documentId\&quot;: \&quot;1\&quot;,           \&quot;pageNumber\&quot;: \&quot;1\&quot;         }],       }     }]   } } &#x60;&#x60;&#x60;  If you are using a multipart/form-data &#x60;POST&#x60; request, you do not have to base64 encode your documents. You place the envelope definition in one part and the document bytes in another:  &#x60;&#x60;&#x60; - -AAA Content-Type: application/json Content-Disposition: form-data  &lt;ENVELOPE DEFINITION GOES HERE&gt; - -AAA Content-Type:application/pdf Content-Disposition: file; filename&#x3D;\&quot;contract.pdf\&quot;; documentid&#x3D;1  &lt;DOCUMENT BYTES GO HERE&gt; - -AAA- - &#x60;&#x60;&#x60;  ### Using Supplemental Documents  Supplemental documents are supporting materials such as disclosures and other informational documents that need to accompany a document sent for signature. These supplemental documents are available to the signer to view and acknowledge, without making the envelope too large or confusing for signers.  Supplemental documents use the following properties in the [&#x60;document&#x60; object][documentDef].  | Name                  | Type    | Description| | :- -- -- -- -- -- -- -- -- -- - | :- -- -- - || | includeInDownload     | Boolean | When set to **true**, the document is included in the combined document download. The default value is **true| | display               | String  | This string sets the display and behavior properties of the document during signing. The possible values are:&lt;br&gt;&#x60;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;modal&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a modal window. This is the recommended value for supplemental documents.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;download&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a new browser window.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;inline&lt;/code&gt;&lt;br&gt;This value is not used with supplemental documents, but is the default value for all other documents. The document is shown in the normal signing window.&lt;/li&gt;&lt;/ul&gt; | | signerMustAcknowledge | String  | Sets how the signer interacts with the supplemental document. The possible values are:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;no_interaction&lt;/code&gt;&lt;br&gt;No recipient action is required.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view&lt;/code&gt;&lt;br&gt;The recipient is required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;accept&lt;/code&gt;&lt;br&gt;The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view_accept&lt;/code&gt;&lt;br&gt;The recipient is required to view and accept the document.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;                                                                                                                                                    |   [viewtab]: /esign/restapi/Envelopes/EnvelopeRecipientTabs/#view-tab  The [View][viewtab] and Approve tabs are used to set the interactions for individual recipients. The View tab includes a &#x60;required&#x60; property that requires the recipient to view the supplemental document. If the View tab &#x60;required&#x60; property is not set, the recipient can, but is not required to, view the supplemental document.  To use the View and Approve tabs for supplemental documents, the document &#x60;display&#x60; property must be set to &#x60;modal&#x60; or &#x60;download&#x60;.  The actions that the recipient must take depend on the value of the &#x60;signerMustAcknowledge&#x60; document property and whether the signer is assigned View or Approve tabs on the document.  To set the interactions for individual recipients, set the &#x60;signerMustAcknowledge&#x60; property to &#x60;no_interaction&#x60;, then add View and Approve tabs on the appropriate document for the recipient.   The action that a signer must take depends on the value of the &#x60;signerMustAcknowledge&#x60; document property, whether the signer has an Approve tab, and the value of the &#x60;required&#x60; property of the View tab. The following table shows the actions a recipient must take for different combinations of these tabs and properties.    | Document &#x60;signerMustAcknowledge&#x60;property  | Approve Tab | View Tab &#x60;required&#x60; property  | Recipient is required to ...  | | :- -- -                                     | :- -- -       | :- -- -                         | :- -- -                         | | no_interaction                            | No          |  - -                           |  Take no action               | | no_interaction                            | No          |  false                        |  Take no action               | | no_interaction                            | No          |  true                         |  View                         | | no_interaction                            | Yes         |  false                        |  Accept                       | | no_interaction                            | Yes         |  true                         |  View and Accept              | | view                                      | No          |  - -                           |  View                         | | view                                      | Yes         |  - -                           |  View and Accept              | | accept                                    | - -          |  false                        |  Accept                       | | accept                                    | - -          |  true                         |  View and Accept              | | view_accept                               | - -          |  - -                           |  View and Accept              |     ### Recipient Types  An [&#x60;envelopeDefinition&#x60; object][envelopeDef] is used as the method&#39;s body. Envelope recipients can be defined in the envelope or in templates. The &#x60;envelopeDefinition&#x60; object&#39;s &#x60;recipients&#x60; property is an [&#x60;EnvelopeRecipients&#x60; resource object][envelopeRecipientsDef]. It includes arrays of the seven types of recipients defined by DocuSign:  | Recipient type                      | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - || | [Agents][agentDef]                  | An agent recipient can add name and email information for recipients that appear after the agent in routing order.                                                                                                                                                                                                                                                                                                                                                                                  | | [Carbon Copies][ccDef]              | Carbon copy recipients get a copy of the envelope but don&#39;t need to sign, initial, date or add information to any of the documents. This type of recipient can be used in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient&#39;s order in the process flow and when the envelope is completed.                                                                                                                                      | | [Certified Deliveries][certfiedDef] | Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don&#39;t need to sign, initial, date or add information to any of the documents.                                                                                                                                                                                                                                                                                                    | | [Editors][editorDef]                | Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor. | | [In-Person Signers][inPersonDef]    | An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer.                                                                                                                                                                                                                                                                                                                                                                            | | [Intermediaries][intermediaryDef]   | An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.                                                                                                                                                                                                                                                                  | | [Signers][signerDef]                | A signer is a recipient who must sign, initial, date, or add data to form fields on the documents in the envelope.                                                                                                                                                                                                                                                                                                                                                                                  |   Additional information about the different types of recipients is available from the [&#x60;EnvelopeRecipients&#x60; resource page][envelopeRecipientsRes] and from the Developer Center [Recipients][devecenterrecipients] topic.    ### Tabs  Tabs (also referred to as tags and fields in the web application), can be defined in the &#x60;envelopeDefinition&#x60;, in templates, by transforming PDF Form Fields, or by using Composite Templates (see below).  The &#x60;inPersonSigner&#x60;, and &#x60;signer&#x60; recipient objects include a &#x60;tabs&#x60; property. It is an [&#x60;EnvelopeRecipientTabs&#x60; resource object][envRecipientTabsDef] that includes arrays of the different tab types available. See the [&#x60;EnvelopeRecipientTabs&#x60; resource][envRecipientTabsRes] for more information.   ## Using Templates  Envelopes use specific people or groups as recipients. Templates can specify a role, eg &#x60;account_manager.&#x60; When a template is used in an envelope, the roles must be replaced with specific people or groups.  When you create an envelope using a &#x60;templateId&#x60;, the different recipient type objects within the [&#x60;EnvelopeRecipients&#x60; property][envelopeRecipientsDef] are used to assign recipients to the template&#39;s roles via the &#x60;roleName&#x60; property. The recipient objects can also override settings that were specified in the template, and set values for tab fields that were defined in the template.  ### Message Lock  When a template is added or applied to an envelope, and the template has a locked email subject and message, that subject and message are used for the envelope and cannot be changed even if another locked template is subsequently added or applied to the envelope. The &#x60;messageLock&#x60; property is used to lock the email subject and message.  If an email subject or message is entered before adding or applying a template with &#x60;messageLock&#x60; set to **true**, the email subject and message is overwritten with the locked email subject and message from the template.  ## Envelope Status  The status of sent envelopes can be determined through the DocuSign webhook system or by polling. Webhooks are highly recommended: they provide your application with the quickest updates when an envelope&#39;s status changes. DocuSign limits polling to once every 15 minutes or less frequently. See [API Rules and Limits][apirules] for more information and examples.   When a webhook is used, DocuSign calls your application via the URL you provide, with a notification XML message.  See the [Webhook recipe](https://www.docusign.com/developer-center/recipes/webhook-status) for examples and live demos of using webhooks.  ## Webhook Options  The two webhook options, &#x60;eventNotification&#x60; and Connect, use the same notification mechanism and message formats. Use &#x60;eventNotification&#x60; to create a webhook for a specific envelope sent via the API. Connect webhooks can be used for any envelope sent from an account, from any user, from any client. The [Connect guide][connectGuide] discusses the webhook notification message format.  ### eventNotification Webhooks  The Envelopes:create method includes an optional [&#x60;eventNotification&#x60; object][eventNotificationDef] property that adds a webhook to the envelope. &#x60;eventNotification&#x60; webhooks are available for all DocuSign accounts with API access.  ### Connect Webhooks  Connect can be used to create a webhook for all envelopes sent by all users in an account, either through the API or through other DocuSign clients (web, mobile, etc). Connect configurations are independent of specific envelopes. A Connect configuration includes a filter that may be used to limit the webhook to specific users, envelope statuses, etc.  You can create and manage Connect configurations with the [ConnectConfigurations resource][connectConfigurationsRes]. Configurations can also be created and managed from DocuSign Admin accessed by selecting **Go to Admin** from the menu next to your picture on the DocuSign web app. See the **Connect** topic in the **Integrations** section of DocuSign Admin. For repeatability, and to minimize support questions, creating Connect configurations via the API is recommended, especially for ISVs.  Connect is available for some DocuSign account types. Please contact DocuSign Sales for more information.  ## Composite Templates  The Composite Templates feature, like [compositing in film production](https://en.wikipedia.org/wiki/Compositing), enables you to overlay document, recipient, and tab definitions from multiple sources, including PDF Form Field definitions, templates defined on the server, and more.  Each Composite Template consists of optional elements: server templates, inline templates, PDF Metadata templates, and documents.  * The Composite Template ID is an optional element used to identify the   composite template. It is used as a reference when adding document   object information via a multipart HTTP message. If used, the document   content-disposition must include the &#x60;compositeTemplateId&#x60; to which the   document should be added. If &#x60;compositeTemplateId&#x60; is not specified in   the content-disposition, the document is applied based on the   &#x60;documentId&#x60; only. If no document object is specified, the composite   template inherits the first document.  * Server Templates are server-side templates stored on the DocuSign   platform. If supplied, they are overlaid into the envelope in the order   of their Sequence value.  * Inline Templates provide a container to add documents, recipients,   tabs, and custom fields. If inline templates are supplied, they are   overlaid into the envelope in the order of their Sequence value.  * Document objects are optional structures that provide a container to   pass in a document or form. If this object is not included, the   composite template inherits the *first* document it finds from a server   template or inline template, starting with the lowest sequence value.  PDF Form objects are only transformed from the document object. DocuSign does not derive PDF form properties from server templates or inline templates. To instruct DocuSign to transform fields from the PDF form, set &#x60;transformPdfFields&#x60; to **true** for the document.  See [PDF Form Field Transformation](#pdf-form-field-transformation) for more information about process.  * PDF Metadata Templates provide a container to embed design-time   template information into a PDF document. DocuSign uses this information   when processing the Envelope. This convention allows the document to   carry the signing instructions with it, so that less information needs   to be provided at run-time through an inline template or synchronized   with an external structure like a server template. PDF Metadata   templates are stored in the Metadata layer of a PDF in accordance with   Acrobat&#39;s XMP specification. DocuSign will only find PDF Metadata   templates inside documents passed in the Document object (see below). If   supplied, the PDF metadata template will be overlaid into the envelope   in the order of its Sequence value.  ### Compositing the Definitions  Each Composite Template adds a new document and templates overlay into the envelope. For each Composite Template these rules are applied:  * Templates are overlaid in the order of their Sequence value. * If Document is not passed into the Composite Template&#39;s &#x60;document&#x60;   field, the *first* template&#39;s document (based on the template&#39;s Sequence   value) is used. * Last in wins in all cases except for the document (i.e. envelope   information, recipient information, secure field information). There is   no special casing.  For example, if you want higher security on a tab, then that needs to be specified in a later template (by sequence number) than where the tab is included. If you want higher security on a role recipient, then it needs to be in a later template than where that role recipient is specified.  * Recipient matching is based on Recipient Role and Routing Order. If   there are matches, the recipient information is merged together. A final   pass is done on all Composite Templates, after all template overlays   have been applied, to collapse recipients with the same email, username   and routing order. This prevents having the same recipients at the same   routing order.  * If you specify in a template that a recipient is locked, once that   recipient is overlaid the recipient attributes can no longer be changed.   The only items that can be changed for the recipient in this case are   the email, username, access code and IDCheckInformationInput.  * Tab matching is based on Tab Labels, Tab Types and Documents. If a Tab   Label matches but the Document is not supplied, the Tab is overlaid for   all the Documents.  For example, if you have a simple inline template with only one tab in it with a label and a value, the Signature, Initial, Company, Envelope ID, User Name tabs will only be matched and collapsed if they fall in the exact same X and Y locations.  * &#x60;roleName&#x60; and &#x60;tabLabel&#x60; matching is case sensitive.  * The &#x60;defaultRecipient&#x60; property enables you to specify which recipient   the tabs generated from a PDF form are mapped to. You can also set PDF   form generated tabs to a recipient other than the default recipient by   specifying the mapping of the tab label that is created to one of the   template recipients.  * You can use &#x60;tabLabel&#x60; wild carding to map a series of tabs from the PDF   form. To use this you must end a tab label with \&quot;\\*\&quot; and then the system   matches tabs that start with the label.  * If no &#x60;defaultRecipient&#x60; is specified, tabs must be explicitly mapped   to recipients in order to be generated from the form. Unmapped form   objects will not be generated into their DocuSign equivalents. (In the   case of Signature/Initials, the tabs will be disregarded entirely; in   the case of pdf text fields, the field data will be flattened on the   Envelope document, but there will not be a corresponding DocuSign data   tab.)  ### Including the Document Content for Composite Templates  Document content can be supplied inline, using the &#x60;documentBase64&#x60; or can be included in a multipart HTTP message. If a multipart message is used and there are multiple Composite Templates, the document content-disposition can include the &#x60;compositeTemplateId&#x60; to which the document should be added. Using the &#x60;compositeTemplateId&#x60; sets which documents are associated with particular composite templates. An example of this usage is:  &#x60;&#x60;&#x60; - -5cd3320a-5aac-4453-b3a4-cbb52a4cba5d Content-Type: application/pdf Content-Disposition: file; filename&#x3D;\&quot;eula.pdf\&quot;; documentId&#x3D;1; compositeTemplateId&#x3D;\&quot;1\&quot; Content-Transfer-Encoding: base64 &#x60;&#x60;&#x60;  ### PDF Form Field Transformation  Only the following PDF Form FieldTypes are transformed to DocuSign tabs:  * CheckBox * DateTime * ListBox * Numeric * Password * Radio * Signature, * Text  Field Properties that are transformed:  * Read Only * Required * Max Length * Positions * Initial Data  When transforming a PDF Form Digital Signature Field, the following rules apply. Any other PDF Form Digital Signature Field will be transformed to a DocuSign Signature tab   | If the PDF Field Name contains                              | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                       | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional       | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                 | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional | Optional Initials             |   When transforming PDF Form Text Fields, the following rules apply. Any other PDF Form Text Field will be transformed to a DocuSign data (text) tab.   | If the PDF Field Name contains                                        | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                                 | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional                 | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                           | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional           | Optional Initials             | | DocuSignEnvelopeID or&lt;br&gt; eSignEnvelopeID                             | EnvelopeID                    | | DocuSignCompany or&lt;br&gt; eSignCompany                                   | Company                       | | DocuSignDateSigned or&lt;br&gt; eSignDateSigned                             | Date Signed                   | | DocuSignTitle or&lt;br&gt; eSignTitle                                       | Title                         | | DocuSignFullName or&lt;br&gt; eSignFullName                                 | Full Name                     | | DocuSignSignerAttachmentOptional or&lt;br&gt; eSignSignerAttachmentOptional | Optional Signer Attachment    |   PDF Form Field Names that include &#x60;DocuSignIgnoreTransform&#x60; or &#x60;eSignIgnoreTransform&#x60; will not be transformed.  PDF Form Date fields that include &#x60;DocuSignDateSigned&#x60; or &#x60;eSignDateSigned&#x60; will be transformed to Date Signed fields.  ## Template Email Subject Merge Fields  This feature enables you to insert recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s &#x60;roleName&#x60;, are added to the &#x60;emailSubject&#x60; when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient.  If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  * To add a recipient&#39;s name in the subject line add the following text   in the &#x60;emailSubject&#x60; when creating the template or when sending an   envelope from a template:     &#x60;[[&lt;roleName&gt;_UserName]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;&#x60;  * To add a recipient&#39;s email address in the subject line add the   following text in the emailSubject when creating the template or when   sending an envelope from a template:     &#x60;[[&lt;roleName&gt;_Email]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;&#x60;  In both cases &#x60;&lt;roleName&gt;&#x60; is the recipient&#39;s &#x60;roleName&#x60; in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.  ## Branding an Envelope  The following rules are used to determine the &#x60;brandId&#x60; used in an envelope:  * If a &#x60;brandId&#x60; is specified in the envelope or template   and that &#x60;brandId&#x60; is available to the account,   that brand is used in the envelope. * If more than one template is used in an envelope,   and more than one &#x60;brandId&#x60; is specified,   the first &#x60;brandId&#x60; specified is used throughout the envelope. * In cases where no brand is specified,   and the sender belongs to a group:   - If there is only one brand associated with the group,     then that brand is used in the envelope.   - Otherwise, the account&#39;s default signing brand is used. * For envelopes that do not meet any of the previous criteria,   the account&#39;s default signing brand is used for the envelope.   ## BCC Email Address Feature  The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options.  Do **not** use this feature to send a copy of the envelope to a recipient who does not need to sign. Use a Carbon Copy or Certified Delivery Recipient type instead.  ## Merge Recipient Roles for Draft Envelopes  When an envelope with multiple templates is sent, the recipients from the templates are merged according to the template roles, and empty recipients are removed. When creating an envelope with multiple templates, but not sending it (keeping it in a created state), duplicate recipients are not merged, which could leave duplicate recipients in the envelope.  To prevent this, the query parameter &#x60;merge_roles_on_draft&#x60; should be added when posting a draft envelope (&#x60;status&#x60; is &#x60;created&#x60;) with multiple templates. Doing this will merge template roles and remove empty recipients.   DocuSign recommends that the &#x60;merge_roles_on_draft&#x60; query parameter be used any time you are creating an envelope with multiple templates and keeping it in draft (&#x60;status&#x60; is &#x60;created&#x60;) status.   [agentDef]:                 #/definitions/agent [apirules]:                 /esign/guide/appendix/resource_limits.html#api-rules-and-limits [ccDef]:                     #/definitions/carbonCopy [certfiedDef]:               #/definitions/certifiedDelivery [connectConfigurationsRes]: /esign/restapi/Connect/ConnectConfigurations/ [connectGuide]:             https://www.docusign.com/supportdocs/pdf/connect-guide.pdf [devecenterrecipients]:     https://www.docusign.com/developer-center/explore/features/recipients [documentDef]:               #/definitions/document [editorDef]:                 #/definitions/editor [envelopeDef]:               #/definitions/envelopeDefinition [envelopeRecipientsDef]:     #/definitions/EnvelopeRecipients [envelopeRecipientsRes]:    /esign/restapi/Envelopes/EnvelopeRecipients/ [envRecipientTabsDef]:       #/definitions/EnvelopeRecipientTabs [envRecipientTabsRes]:      /esign/restapi/Envelopes/EnvelopeRecipientTabs/ [eventNotificationDef]:      #/definitions/eventNotification [inPersonDef]:               #/definitions/inPersonSigner [intermediaryDef]:           #/definitions/intermediary [signerDef]:                 #/definitions/signer 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="cdseMode">Reserved for DocuSign.  (optional)</param>
        /// <param name="completedDocumentsOnly">Reserved for DocuSign.  (optional)</param>
        /// <param name="mergeRolesOnDraft">When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the &#x60;status&#x60; field is set to &#x60;created&#x60;.)  ###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates. (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>EnvelopeSummary</returns>
        public EnvelopeSummary EnvelopesPostEnvelopes (string accountId, string cdseMode = null, string completedDocumentsOnly = null, string mergeRolesOnDraft = null, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<EnvelopeSummary> localVarResponse = EnvelopesPostEnvelopesWithHttpInfo(accountId, cdseMode, completedDocumentsOnly, mergeRolesOnDraft, envelopeDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an envelope. Creates and sends an envelope or creates a draft envelope. Envelopes are fundamental resources in the DocuSign platform and are used in a variety of ways.  With this method you can:  * Create and send an envelope   with documents, recipients, and tabs. * Create and send an envelope from a template. * Create and send an envelope from   a combination of documents and templates. * Create a draft envelope.  There are many ways to use envelopes. You can create and send an envelope with a single API request, or you can use several API requests to create, populate, and send envelopes.  When you use this method to create and send an envelope in a single request, the following parameters are required:  | Parameter      | Description | | :- -- -- -- -      | :- -- -- -- -- - | | &#x60;status&#x60;       | Set to &#x60;sent&#x60; to send the envelope to recipients.&lt;br&gt;Set to &#x60;created&#x60; (or don&#39;t set at all) to save the envelope as a draft. | | &#x60;emailSubject&#x60; | The subject of the email used to send the envelope. | | &#x60;documents&#x60;    | The documents to be signed. | | &#x60;recipients&#x60;   | The email addresses of the envelope recipients. |  If you are creating an envelope to be sent later, save it as a draft by either setting &#x60;status&#x60; to &#x60;created&#x60; or leaving it unset. For instance, you can create a draft envelope with documents only. Using additional API requests, you can add the recipients and send the envelope in subsequent API requests.    ## Feature Availability  Not all DocuSign features are available to all accounts. Use DocuSign Admin to check and enable feature availability. You can also check feature availability via the web application. For example, if the web application allows you to send an envelope with SMS authentication, then you can use the same feature through the API.  ## Sending Envelopes  Documents can be included with the Envelopes:create method, or a template can include documents. Documents can be added by using a multipart/form request or by using the &#x60;documentBase64&#x60; property of the [&#x60;document&#x60; object][documentDef].  ### Adding Documents to Requests  There are two ways to add documents to your envelopes:  1. Use the &#x60;documents&#x60; property of the envelope definition. 2. Send this request as a multipart/form-data &#x60;POST&#x60;    with documents added through additional request parts.  Using the &#x60;documents&#x60; property is the simpler option, but the request may be quite large due to the base64 encoding. This example shows how to add a document using this method.  &#x60;&#x60;&#x60;json {   \&quot;status\&quot;: \&quot;sent\&quot;,   \&quot;emailSubject\&quot;: \&quot;Example of one recipient, type signer\&quot;,   \&quot;documents\&quot;: [{     \&quot;documentId\&quot;: \&quot;1\&quot;,     \&quot;name\&quot;: \&quot;contract.pdf\&quot;,     \&quot;documentBase64\&quot;: \&quot;base64 document bytes...\&quot;,   }],   \&quot;recipients\&quot;: {     \&quot;signers\&quot;: [{       \&quot;name\&quot;: \&quot;Lisa Simpson\&quot;,       \&quot;email\&quot;: \&quot;lisa@email.com\&quot;,       \&quot;recipientId\&quot;: \&quot;1\&quot;,       \&quot;routingOrder\&quot;: \&quot;1\&quot;,       \&quot;tabs\&quot;: {         \&quot;signHereTabs\&quot;: [{           \&quot;xPosition\&quot;: \&quot;150\&quot;,           \&quot;yPosition\&quot;: \&quot;200\&quot;,           \&quot;documentId\&quot;: \&quot;1\&quot;,           \&quot;pageNumber\&quot;: \&quot;1\&quot;         }],       }     }]   } } &#x60;&#x60;&#x60;  If you are using a multipart/form-data &#x60;POST&#x60; request, you do not have to base64 encode your documents. You place the envelope definition in one part and the document bytes in another:  &#x60;&#x60;&#x60; - -AAA Content-Type: application/json Content-Disposition: form-data  &lt;ENVELOPE DEFINITION GOES HERE&gt; - -AAA Content-Type:application/pdf Content-Disposition: file; filename&#x3D;\&quot;contract.pdf\&quot;; documentid&#x3D;1  &lt;DOCUMENT BYTES GO HERE&gt; - -AAA- - &#x60;&#x60;&#x60;  ### Using Supplemental Documents  Supplemental documents are supporting materials such as disclosures and other informational documents that need to accompany a document sent for signature. These supplemental documents are available to the signer to view and acknowledge, without making the envelope too large or confusing for signers.  Supplemental documents use the following properties in the [&#x60;document&#x60; object][documentDef].  | Name                  | Type    | Description| | :- -- -- -- -- -- -- -- -- -- - | :- -- -- - || | includeInDownload     | Boolean | When set to **true**, the document is included in the combined document download. The default value is **true| | display               | String  | This string sets the display and behavior properties of the document during signing. The possible values are:&lt;br&gt;&#x60;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;modal&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a modal window. This is the recommended value for supplemental documents.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;download&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a new browser window.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;inline&lt;/code&gt;&lt;br&gt;This value is not used with supplemental documents, but is the default value for all other documents. The document is shown in the normal signing window.&lt;/li&gt;&lt;/ul&gt; | | signerMustAcknowledge | String  | Sets how the signer interacts with the supplemental document. The possible values are:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;no_interaction&lt;/code&gt;&lt;br&gt;No recipient action is required.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view&lt;/code&gt;&lt;br&gt;The recipient is required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;accept&lt;/code&gt;&lt;br&gt;The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view_accept&lt;/code&gt;&lt;br&gt;The recipient is required to view and accept the document.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;                                                                                                                                                    |   [viewtab]: /esign/restapi/Envelopes/EnvelopeRecipientTabs/#view-tab  The [View][viewtab] and Approve tabs are used to set the interactions for individual recipients. The View tab includes a &#x60;required&#x60; property that requires the recipient to view the supplemental document. If the View tab &#x60;required&#x60; property is not set, the recipient can, but is not required to, view the supplemental document.  To use the View and Approve tabs for supplemental documents, the document &#x60;display&#x60; property must be set to &#x60;modal&#x60; or &#x60;download&#x60;.  The actions that the recipient must take depend on the value of the &#x60;signerMustAcknowledge&#x60; document property and whether the signer is assigned View or Approve tabs on the document.  To set the interactions for individual recipients, set the &#x60;signerMustAcknowledge&#x60; property to &#x60;no_interaction&#x60;, then add View and Approve tabs on the appropriate document for the recipient.   The action that a signer must take depends on the value of the &#x60;signerMustAcknowledge&#x60; document property, whether the signer has an Approve tab, and the value of the &#x60;required&#x60; property of the View tab. The following table shows the actions a recipient must take for different combinations of these tabs and properties.    | Document &#x60;signerMustAcknowledge&#x60;property  | Approve Tab | View Tab &#x60;required&#x60; property  | Recipient is required to ...  | | :- -- -                                     | :- -- -       | :- -- -                         | :- -- -                         | | no_interaction                            | No          |  - -                           |  Take no action               | | no_interaction                            | No          |  false                        |  Take no action               | | no_interaction                            | No          |  true                         |  View                         | | no_interaction                            | Yes         |  false                        |  Accept                       | | no_interaction                            | Yes         |  true                         |  View and Accept              | | view                                      | No          |  - -                           |  View                         | | view                                      | Yes         |  - -                           |  View and Accept              | | accept                                    | - -          |  false                        |  Accept                       | | accept                                    | - -          |  true                         |  View and Accept              | | view_accept                               | - -          |  - -                           |  View and Accept              |     ### Recipient Types  An [&#x60;envelopeDefinition&#x60; object][envelopeDef] is used as the method&#39;s body. Envelope recipients can be defined in the envelope or in templates. The &#x60;envelopeDefinition&#x60; object&#39;s &#x60;recipients&#x60; property is an [&#x60;EnvelopeRecipients&#x60; resource object][envelopeRecipientsDef]. It includes arrays of the seven types of recipients defined by DocuSign:  | Recipient type                      | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - || | [Agents][agentDef]                  | An agent recipient can add name and email information for recipients that appear after the agent in routing order.                                                                                                                                                                                                                                                                                                                                                                                  | | [Carbon Copies][ccDef]              | Carbon copy recipients get a copy of the envelope but don&#39;t need to sign, initial, date or add information to any of the documents. This type of recipient can be used in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient&#39;s order in the process flow and when the envelope is completed.                                                                                                                                      | | [Certified Deliveries][certfiedDef] | Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don&#39;t need to sign, initial, date or add information to any of the documents.                                                                                                                                                                                                                                                                                                    | | [Editors][editorDef]                | Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor. | | [In-Person Signers][inPersonDef]    | An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer.                                                                                                                                                                                                                                                                                                                                                                            | | [Intermediaries][intermediaryDef]   | An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.                                                                                                                                                                                                                                                                  | | [Signers][signerDef]                | A signer is a recipient who must sign, initial, date, or add data to form fields on the documents in the envelope.                                                                                                                                                                                                                                                                                                                                                                                  |   Additional information about the different types of recipients is available from the [&#x60;EnvelopeRecipients&#x60; resource page][envelopeRecipientsRes] and from the Developer Center [Recipients][devecenterrecipients] topic.    ### Tabs  Tabs (also referred to as tags and fields in the web application), can be defined in the &#x60;envelopeDefinition&#x60;, in templates, by transforming PDF Form Fields, or by using Composite Templates (see below).  The &#x60;inPersonSigner&#x60;, and &#x60;signer&#x60; recipient objects include a &#x60;tabs&#x60; property. It is an [&#x60;EnvelopeRecipientTabs&#x60; resource object][envRecipientTabsDef] that includes arrays of the different tab types available. See the [&#x60;EnvelopeRecipientTabs&#x60; resource][envRecipientTabsRes] for more information.   ## Using Templates  Envelopes use specific people or groups as recipients. Templates can specify a role, eg &#x60;account_manager.&#x60; When a template is used in an envelope, the roles must be replaced with specific people or groups.  When you create an envelope using a &#x60;templateId&#x60;, the different recipient type objects within the [&#x60;EnvelopeRecipients&#x60; property][envelopeRecipientsDef] are used to assign recipients to the template&#39;s roles via the &#x60;roleName&#x60; property. The recipient objects can also override settings that were specified in the template, and set values for tab fields that were defined in the template.  ### Message Lock  When a template is added or applied to an envelope, and the template has a locked email subject and message, that subject and message are used for the envelope and cannot be changed even if another locked template is subsequently added or applied to the envelope. The &#x60;messageLock&#x60; property is used to lock the email subject and message.  If an email subject or message is entered before adding or applying a template with &#x60;messageLock&#x60; set to **true**, the email subject and message is overwritten with the locked email subject and message from the template.  ## Envelope Status  The status of sent envelopes can be determined through the DocuSign webhook system or by polling. Webhooks are highly recommended: they provide your application with the quickest updates when an envelope&#39;s status changes. DocuSign limits polling to once every 15 minutes or less frequently. See [API Rules and Limits][apirules] for more information and examples.   When a webhook is used, DocuSign calls your application via the URL you provide, with a notification XML message.  See the [Webhook recipe](https://www.docusign.com/developer-center/recipes/webhook-status) for examples and live demos of using webhooks.  ## Webhook Options  The two webhook options, &#x60;eventNotification&#x60; and Connect, use the same notification mechanism and message formats. Use &#x60;eventNotification&#x60; to create a webhook for a specific envelope sent via the API. Connect webhooks can be used for any envelope sent from an account, from any user, from any client. The [Connect guide][connectGuide] discusses the webhook notification message format.  ### eventNotification Webhooks  The Envelopes:create method includes an optional [&#x60;eventNotification&#x60; object][eventNotificationDef] property that adds a webhook to the envelope. &#x60;eventNotification&#x60; webhooks are available for all DocuSign accounts with API access.  ### Connect Webhooks  Connect can be used to create a webhook for all envelopes sent by all users in an account, either through the API or through other DocuSign clients (web, mobile, etc). Connect configurations are independent of specific envelopes. A Connect configuration includes a filter that may be used to limit the webhook to specific users, envelope statuses, etc.  You can create and manage Connect configurations with the [ConnectConfigurations resource][connectConfigurationsRes]. Configurations can also be created and managed from DocuSign Admin accessed by selecting **Go to Admin** from the menu next to your picture on the DocuSign web app. See the **Connect** topic in the **Integrations** section of DocuSign Admin. For repeatability, and to minimize support questions, creating Connect configurations via the API is recommended, especially for ISVs.  Connect is available for some DocuSign account types. Please contact DocuSign Sales for more information.  ## Composite Templates  The Composite Templates feature, like [compositing in film production](https://en.wikipedia.org/wiki/Compositing), enables you to overlay document, recipient, and tab definitions from multiple sources, including PDF Form Field definitions, templates defined on the server, and more.  Each Composite Template consists of optional elements: server templates, inline templates, PDF Metadata templates, and documents.  * The Composite Template ID is an optional element used to identify the   composite template. It is used as a reference when adding document   object information via a multipart HTTP message. If used, the document   content-disposition must include the &#x60;compositeTemplateId&#x60; to which the   document should be added. If &#x60;compositeTemplateId&#x60; is not specified in   the content-disposition, the document is applied based on the   &#x60;documentId&#x60; only. If no document object is specified, the composite   template inherits the first document.  * Server Templates are server-side templates stored on the DocuSign   platform. If supplied, they are overlaid into the envelope in the order   of their Sequence value.  * Inline Templates provide a container to add documents, recipients,   tabs, and custom fields. If inline templates are supplied, they are   overlaid into the envelope in the order of their Sequence value.  * Document objects are optional structures that provide a container to   pass in a document or form. If this object is not included, the   composite template inherits the *first* document it finds from a server   template or inline template, starting with the lowest sequence value.  PDF Form objects are only transformed from the document object. DocuSign does not derive PDF form properties from server templates or inline templates. To instruct DocuSign to transform fields from the PDF form, set &#x60;transformPdfFields&#x60; to **true** for the document.  See [PDF Form Field Transformation](#pdf-form-field-transformation) for more information about process.  * PDF Metadata Templates provide a container to embed design-time   template information into a PDF document. DocuSign uses this information   when processing the Envelope. This convention allows the document to   carry the signing instructions with it, so that less information needs   to be provided at run-time through an inline template or synchronized   with an external structure like a server template. PDF Metadata   templates are stored in the Metadata layer of a PDF in accordance with   Acrobat&#39;s XMP specification. DocuSign will only find PDF Metadata   templates inside documents passed in the Document object (see below). If   supplied, the PDF metadata template will be overlaid into the envelope   in the order of its Sequence value.  ### Compositing the Definitions  Each Composite Template adds a new document and templates overlay into the envelope. For each Composite Template these rules are applied:  * Templates are overlaid in the order of their Sequence value. * If Document is not passed into the Composite Template&#39;s &#x60;document&#x60;   field, the *first* template&#39;s document (based on the template&#39;s Sequence   value) is used. * Last in wins in all cases except for the document (i.e. envelope   information, recipient information, secure field information). There is   no special casing.  For example, if you want higher security on a tab, then that needs to be specified in a later template (by sequence number) than where the tab is included. If you want higher security on a role recipient, then it needs to be in a later template than where that role recipient is specified.  * Recipient matching is based on Recipient Role and Routing Order. If   there are matches, the recipient information is merged together. A final   pass is done on all Composite Templates, after all template overlays   have been applied, to collapse recipients with the same email, username   and routing order. This prevents having the same recipients at the same   routing order.  * If you specify in a template that a recipient is locked, once that   recipient is overlaid the recipient attributes can no longer be changed.   The only items that can be changed for the recipient in this case are   the email, username, access code and IDCheckInformationInput.  * Tab matching is based on Tab Labels, Tab Types and Documents. If a Tab   Label matches but the Document is not supplied, the Tab is overlaid for   all the Documents.  For example, if you have a simple inline template with only one tab in it with a label and a value, the Signature, Initial, Company, Envelope ID, User Name tabs will only be matched and collapsed if they fall in the exact same X and Y locations.  * &#x60;roleName&#x60; and &#x60;tabLabel&#x60; matching is case sensitive.  * The &#x60;defaultRecipient&#x60; property enables you to specify which recipient   the tabs generated from a PDF form are mapped to. You can also set PDF   form generated tabs to a recipient other than the default recipient by   specifying the mapping of the tab label that is created to one of the   template recipients.  * You can use &#x60;tabLabel&#x60; wild carding to map a series of tabs from the PDF   form. To use this you must end a tab label with \&quot;\\*\&quot; and then the system   matches tabs that start with the label.  * If no &#x60;defaultRecipient&#x60; is specified, tabs must be explicitly mapped   to recipients in order to be generated from the form. Unmapped form   objects will not be generated into their DocuSign equivalents. (In the   case of Signature/Initials, the tabs will be disregarded entirely; in   the case of pdf text fields, the field data will be flattened on the   Envelope document, but there will not be a corresponding DocuSign data   tab.)  ### Including the Document Content for Composite Templates  Document content can be supplied inline, using the &#x60;documentBase64&#x60; or can be included in a multipart HTTP message. If a multipart message is used and there are multiple Composite Templates, the document content-disposition can include the &#x60;compositeTemplateId&#x60; to which the document should be added. Using the &#x60;compositeTemplateId&#x60; sets which documents are associated with particular composite templates. An example of this usage is:  &#x60;&#x60;&#x60; - -5cd3320a-5aac-4453-b3a4-cbb52a4cba5d Content-Type: application/pdf Content-Disposition: file; filename&#x3D;\&quot;eula.pdf\&quot;; documentId&#x3D;1; compositeTemplateId&#x3D;\&quot;1\&quot; Content-Transfer-Encoding: base64 &#x60;&#x60;&#x60;  ### PDF Form Field Transformation  Only the following PDF Form FieldTypes are transformed to DocuSign tabs:  * CheckBox * DateTime * ListBox * Numeric * Password * Radio * Signature, * Text  Field Properties that are transformed:  * Read Only * Required * Max Length * Positions * Initial Data  When transforming a PDF Form Digital Signature Field, the following rules apply. Any other PDF Form Digital Signature Field will be transformed to a DocuSign Signature tab   | If the PDF Field Name contains                              | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                       | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional       | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                 | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional | Optional Initials             |   When transforming PDF Form Text Fields, the following rules apply. Any other PDF Form Text Field will be transformed to a DocuSign data (text) tab.   | If the PDF Field Name contains                                        | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                                 | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional                 | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                           | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional           | Optional Initials             | | DocuSignEnvelopeID or&lt;br&gt; eSignEnvelopeID                             | EnvelopeID                    | | DocuSignCompany or&lt;br&gt; eSignCompany                                   | Company                       | | DocuSignDateSigned or&lt;br&gt; eSignDateSigned                             | Date Signed                   | | DocuSignTitle or&lt;br&gt; eSignTitle                                       | Title                         | | DocuSignFullName or&lt;br&gt; eSignFullName                                 | Full Name                     | | DocuSignSignerAttachmentOptional or&lt;br&gt; eSignSignerAttachmentOptional | Optional Signer Attachment    |   PDF Form Field Names that include &#x60;DocuSignIgnoreTransform&#x60; or &#x60;eSignIgnoreTransform&#x60; will not be transformed.  PDF Form Date fields that include &#x60;DocuSignDateSigned&#x60; or &#x60;eSignDateSigned&#x60; will be transformed to Date Signed fields.  ## Template Email Subject Merge Fields  This feature enables you to insert recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s &#x60;roleName&#x60;, are added to the &#x60;emailSubject&#x60; when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient.  If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  * To add a recipient&#39;s name in the subject line add the following text   in the &#x60;emailSubject&#x60; when creating the template or when sending an   envelope from a template:     &#x60;[[&lt;roleName&gt;_UserName]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;&#x60;  * To add a recipient&#39;s email address in the subject line add the   following text in the emailSubject when creating the template or when   sending an envelope from a template:     &#x60;[[&lt;roleName&gt;_Email]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;&#x60;  In both cases &#x60;&lt;roleName&gt;&#x60; is the recipient&#39;s &#x60;roleName&#x60; in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.  ## Branding an Envelope  The following rules are used to determine the &#x60;brandId&#x60; used in an envelope:  * If a &#x60;brandId&#x60; is specified in the envelope or template   and that &#x60;brandId&#x60; is available to the account,   that brand is used in the envelope. * If more than one template is used in an envelope,   and more than one &#x60;brandId&#x60; is specified,   the first &#x60;brandId&#x60; specified is used throughout the envelope. * In cases where no brand is specified,   and the sender belongs to a group:   - If there is only one brand associated with the group,     then that brand is used in the envelope.   - Otherwise, the account&#39;s default signing brand is used. * For envelopes that do not meet any of the previous criteria,   the account&#39;s default signing brand is used for the envelope.   ## BCC Email Address Feature  The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options.  Do **not** use this feature to send a copy of the envelope to a recipient who does not need to sign. Use a Carbon Copy or Certified Delivery Recipient type instead.  ## Merge Recipient Roles for Draft Envelopes  When an envelope with multiple templates is sent, the recipients from the templates are merged according to the template roles, and empty recipients are removed. When creating an envelope with multiple templates, but not sending it (keeping it in a created state), duplicate recipients are not merged, which could leave duplicate recipients in the envelope.  To prevent this, the query parameter &#x60;merge_roles_on_draft&#x60; should be added when posting a draft envelope (&#x60;status&#x60; is &#x60;created&#x60;) with multiple templates. Doing this will merge template roles and remove empty recipients.   DocuSign recommends that the &#x60;merge_roles_on_draft&#x60; query parameter be used any time you are creating an envelope with multiple templates and keeping it in draft (&#x60;status&#x60; is &#x60;created&#x60;) status.   [agentDef]:                 #/definitions/agent [apirules]:                 /esign/guide/appendix/resource_limits.html#api-rules-and-limits [ccDef]:                     #/definitions/carbonCopy [certfiedDef]:               #/definitions/certifiedDelivery [connectConfigurationsRes]: /esign/restapi/Connect/ConnectConfigurations/ [connectGuide]:             https://www.docusign.com/supportdocs/pdf/connect-guide.pdf [devecenterrecipients]:     https://www.docusign.com/developer-center/explore/features/recipients [documentDef]:               #/definitions/document [editorDef]:                 #/definitions/editor [envelopeDef]:               #/definitions/envelopeDefinition [envelopeRecipientsDef]:     #/definitions/EnvelopeRecipients [envelopeRecipientsRes]:    /esign/restapi/Envelopes/EnvelopeRecipients/ [envRecipientTabsDef]:       #/definitions/EnvelopeRecipientTabs [envRecipientTabsRes]:      /esign/restapi/Envelopes/EnvelopeRecipientTabs/ [eventNotificationDef]:      #/definitions/eventNotification [inPersonDef]:               #/definitions/inPersonSigner [intermediaryDef]:           #/definitions/intermediary [signerDef]:                 #/definitions/signer 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="cdseMode">Reserved for DocuSign.  (optional)</param>
        /// <param name="completedDocumentsOnly">Reserved for DocuSign.  (optional)</param>
        /// <param name="mergeRolesOnDraft">When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the &#x60;status&#x60; field is set to &#x60;created&#x60;.)  ###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates. (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeSummary</returns>
        public ApiResponse< EnvelopeSummary > EnvelopesPostEnvelopesWithHttpInfo (string accountId, string cdseMode = null, string completedDocumentsOnly = null, string mergeRolesOnDraft = null, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->EnvelopesPostEnvelopes");

            var localVarPath = "/v2/accounts/{accountId}/envelopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (cdseMode != null) localVarQueryParams.Add("cdse_mode", Configuration.ApiClient.ParameterToString(cdseMode)); // query parameter
            if (completedDocumentsOnly != null) localVarQueryParams.Add("completed_documents_only", Configuration.ApiClient.ParameterToString(completedDocumentsOnly)); // query parameter
            if (mergeRolesOnDraft != null) localVarQueryParams.Add("merge_roles_on_draft", Configuration.ApiClient.ParameterToString(mergeRolesOnDraft)); // query parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvelopesPostEnvelopes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeSummary)));
            
        }

        /// <summary>
        /// Creates an envelope. Creates and sends an envelope or creates a draft envelope. Envelopes are fundamental resources in the DocuSign platform and are used in a variety of ways.  With this method you can:  * Create and send an envelope   with documents, recipients, and tabs. * Create and send an envelope from a template. * Create and send an envelope from   a combination of documents and templates. * Create a draft envelope.  There are many ways to use envelopes. You can create and send an envelope with a single API request, or you can use several API requests to create, populate, and send envelopes.  When you use this method to create and send an envelope in a single request, the following parameters are required:  | Parameter      | Description | | :- -- -- -- -      | :- -- -- -- -- - | | &#x60;status&#x60;       | Set to &#x60;sent&#x60; to send the envelope to recipients.&lt;br&gt;Set to &#x60;created&#x60; (or don&#39;t set at all) to save the envelope as a draft. | | &#x60;emailSubject&#x60; | The subject of the email used to send the envelope. | | &#x60;documents&#x60;    | The documents to be signed. | | &#x60;recipients&#x60;   | The email addresses of the envelope recipients. |  If you are creating an envelope to be sent later, save it as a draft by either setting &#x60;status&#x60; to &#x60;created&#x60; or leaving it unset. For instance, you can create a draft envelope with documents only. Using additional API requests, you can add the recipients and send the envelope in subsequent API requests.    ## Feature Availability  Not all DocuSign features are available to all accounts. Use DocuSign Admin to check and enable feature availability. You can also check feature availability via the web application. For example, if the web application allows you to send an envelope with SMS authentication, then you can use the same feature through the API.  ## Sending Envelopes  Documents can be included with the Envelopes:create method, or a template can include documents. Documents can be added by using a multipart/form request or by using the &#x60;documentBase64&#x60; property of the [&#x60;document&#x60; object][documentDef].  ### Adding Documents to Requests  There are two ways to add documents to your envelopes:  1. Use the &#x60;documents&#x60; property of the envelope definition. 2. Send this request as a multipart/form-data &#x60;POST&#x60;    with documents added through additional request parts.  Using the &#x60;documents&#x60; property is the simpler option, but the request may be quite large due to the base64 encoding. This example shows how to add a document using this method.  &#x60;&#x60;&#x60;json {   \&quot;status\&quot;: \&quot;sent\&quot;,   \&quot;emailSubject\&quot;: \&quot;Example of one recipient, type signer\&quot;,   \&quot;documents\&quot;: [{     \&quot;documentId\&quot;: \&quot;1\&quot;,     \&quot;name\&quot;: \&quot;contract.pdf\&quot;,     \&quot;documentBase64\&quot;: \&quot;base64 document bytes...\&quot;,   }],   \&quot;recipients\&quot;: {     \&quot;signers\&quot;: [{       \&quot;name\&quot;: \&quot;Lisa Simpson\&quot;,       \&quot;email\&quot;: \&quot;lisa@email.com\&quot;,       \&quot;recipientId\&quot;: \&quot;1\&quot;,       \&quot;routingOrder\&quot;: \&quot;1\&quot;,       \&quot;tabs\&quot;: {         \&quot;signHereTabs\&quot;: [{           \&quot;xPosition\&quot;: \&quot;150\&quot;,           \&quot;yPosition\&quot;: \&quot;200\&quot;,           \&quot;documentId\&quot;: \&quot;1\&quot;,           \&quot;pageNumber\&quot;: \&quot;1\&quot;         }],       }     }]   } } &#x60;&#x60;&#x60;  If you are using a multipart/form-data &#x60;POST&#x60; request, you do not have to base64 encode your documents. You place the envelope definition in one part and the document bytes in another:  &#x60;&#x60;&#x60; - -AAA Content-Type: application/json Content-Disposition: form-data  &lt;ENVELOPE DEFINITION GOES HERE&gt; - -AAA Content-Type:application/pdf Content-Disposition: file; filename&#x3D;\&quot;contract.pdf\&quot;; documentid&#x3D;1  &lt;DOCUMENT BYTES GO HERE&gt; - -AAA- - &#x60;&#x60;&#x60;  ### Using Supplemental Documents  Supplemental documents are supporting materials such as disclosures and other informational documents that need to accompany a document sent for signature. These supplemental documents are available to the signer to view and acknowledge, without making the envelope too large or confusing for signers.  Supplemental documents use the following properties in the [&#x60;document&#x60; object][documentDef].  | Name                  | Type    | Description| | :- -- -- -- -- -- -- -- -- -- - | :- -- -- - || | includeInDownload     | Boolean | When set to **true**, the document is included in the combined document download. The default value is **true| | display               | String  | This string sets the display and behavior properties of the document during signing. The possible values are:&lt;br&gt;&#x60;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;modal&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a modal window. This is the recommended value for supplemental documents.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;download&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a new browser window.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;inline&lt;/code&gt;&lt;br&gt;This value is not used with supplemental documents, but is the default value for all other documents. The document is shown in the normal signing window.&lt;/li&gt;&lt;/ul&gt; | | signerMustAcknowledge | String  | Sets how the signer interacts with the supplemental document. The possible values are:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;no_interaction&lt;/code&gt;&lt;br&gt;No recipient action is required.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view&lt;/code&gt;&lt;br&gt;The recipient is required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;accept&lt;/code&gt;&lt;br&gt;The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view_accept&lt;/code&gt;&lt;br&gt;The recipient is required to view and accept the document.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;                                                                                                                                                    |   [viewtab]: /esign/restapi/Envelopes/EnvelopeRecipientTabs/#view-tab  The [View][viewtab] and Approve tabs are used to set the interactions for individual recipients. The View tab includes a &#x60;required&#x60; property that requires the recipient to view the supplemental document. If the View tab &#x60;required&#x60; property is not set, the recipient can, but is not required to, view the supplemental document.  To use the View and Approve tabs for supplemental documents, the document &#x60;display&#x60; property must be set to &#x60;modal&#x60; or &#x60;download&#x60;.  The actions that the recipient must take depend on the value of the &#x60;signerMustAcknowledge&#x60; document property and whether the signer is assigned View or Approve tabs on the document.  To set the interactions for individual recipients, set the &#x60;signerMustAcknowledge&#x60; property to &#x60;no_interaction&#x60;, then add View and Approve tabs on the appropriate document for the recipient.   The action that a signer must take depends on the value of the &#x60;signerMustAcknowledge&#x60; document property, whether the signer has an Approve tab, and the value of the &#x60;required&#x60; property of the View tab. The following table shows the actions a recipient must take for different combinations of these tabs and properties.    | Document &#x60;signerMustAcknowledge&#x60;property  | Approve Tab | View Tab &#x60;required&#x60; property  | Recipient is required to ...  | | :- -- -                                     | :- -- -       | :- -- -                         | :- -- -                         | | no_interaction                            | No          |  - -                           |  Take no action               | | no_interaction                            | No          |  false                        |  Take no action               | | no_interaction                            | No          |  true                         |  View                         | | no_interaction                            | Yes         |  false                        |  Accept                       | | no_interaction                            | Yes         |  true                         |  View and Accept              | | view                                      | No          |  - -                           |  View                         | | view                                      | Yes         |  - -                           |  View and Accept              | | accept                                    | - -          |  false                        |  Accept                       | | accept                                    | - -          |  true                         |  View and Accept              | | view_accept                               | - -          |  - -                           |  View and Accept              |     ### Recipient Types  An [&#x60;envelopeDefinition&#x60; object][envelopeDef] is used as the method&#39;s body. Envelope recipients can be defined in the envelope or in templates. The &#x60;envelopeDefinition&#x60; object&#39;s &#x60;recipients&#x60; property is an [&#x60;EnvelopeRecipients&#x60; resource object][envelopeRecipientsDef]. It includes arrays of the seven types of recipients defined by DocuSign:  | Recipient type                      | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - || | [Agents][agentDef]                  | An agent recipient can add name and email information for recipients that appear after the agent in routing order.                                                                                                                                                                                                                                                                                                                                                                                  | | [Carbon Copies][ccDef]              | Carbon copy recipients get a copy of the envelope but don&#39;t need to sign, initial, date or add information to any of the documents. This type of recipient can be used in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient&#39;s order in the process flow and when the envelope is completed.                                                                                                                                      | | [Certified Deliveries][certfiedDef] | Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don&#39;t need to sign, initial, date or add information to any of the documents.                                                                                                                                                                                                                                                                                                    | | [Editors][editorDef]                | Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor. | | [In-Person Signers][inPersonDef]    | An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer.                                                                                                                                                                                                                                                                                                                                                                            | | [Intermediaries][intermediaryDef]   | An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.                                                                                                                                                                                                                                                                  | | [Signers][signerDef]                | A signer is a recipient who must sign, initial, date, or add data to form fields on the documents in the envelope.                                                                                                                                                                                                                                                                                                                                                                                  |   Additional information about the different types of recipients is available from the [&#x60;EnvelopeRecipients&#x60; resource page][envelopeRecipientsRes] and from the Developer Center [Recipients][devecenterrecipients] topic.    ### Tabs  Tabs (also referred to as tags and fields in the web application), can be defined in the &#x60;envelopeDefinition&#x60;, in templates, by transforming PDF Form Fields, or by using Composite Templates (see below).  The &#x60;inPersonSigner&#x60;, and &#x60;signer&#x60; recipient objects include a &#x60;tabs&#x60; property. It is an [&#x60;EnvelopeRecipientTabs&#x60; resource object][envRecipientTabsDef] that includes arrays of the different tab types available. See the [&#x60;EnvelopeRecipientTabs&#x60; resource][envRecipientTabsRes] for more information.   ## Using Templates  Envelopes use specific people or groups as recipients. Templates can specify a role, eg &#x60;account_manager.&#x60; When a template is used in an envelope, the roles must be replaced with specific people or groups.  When you create an envelope using a &#x60;templateId&#x60;, the different recipient type objects within the [&#x60;EnvelopeRecipients&#x60; property][envelopeRecipientsDef] are used to assign recipients to the template&#39;s roles via the &#x60;roleName&#x60; property. The recipient objects can also override settings that were specified in the template, and set values for tab fields that were defined in the template.  ### Message Lock  When a template is added or applied to an envelope, and the template has a locked email subject and message, that subject and message are used for the envelope and cannot be changed even if another locked template is subsequently added or applied to the envelope. The &#x60;messageLock&#x60; property is used to lock the email subject and message.  If an email subject or message is entered before adding or applying a template with &#x60;messageLock&#x60; set to **true**, the email subject and message is overwritten with the locked email subject and message from the template.  ## Envelope Status  The status of sent envelopes can be determined through the DocuSign webhook system or by polling. Webhooks are highly recommended: they provide your application with the quickest updates when an envelope&#39;s status changes. DocuSign limits polling to once every 15 minutes or less frequently. See [API Rules and Limits][apirules] for more information and examples.   When a webhook is used, DocuSign calls your application via the URL you provide, with a notification XML message.  See the [Webhook recipe](https://www.docusign.com/developer-center/recipes/webhook-status) for examples and live demos of using webhooks.  ## Webhook Options  The two webhook options, &#x60;eventNotification&#x60; and Connect, use the same notification mechanism and message formats. Use &#x60;eventNotification&#x60; to create a webhook for a specific envelope sent via the API. Connect webhooks can be used for any envelope sent from an account, from any user, from any client. The [Connect guide][connectGuide] discusses the webhook notification message format.  ### eventNotification Webhooks  The Envelopes:create method includes an optional [&#x60;eventNotification&#x60; object][eventNotificationDef] property that adds a webhook to the envelope. &#x60;eventNotification&#x60; webhooks are available for all DocuSign accounts with API access.  ### Connect Webhooks  Connect can be used to create a webhook for all envelopes sent by all users in an account, either through the API or through other DocuSign clients (web, mobile, etc). Connect configurations are independent of specific envelopes. A Connect configuration includes a filter that may be used to limit the webhook to specific users, envelope statuses, etc.  You can create and manage Connect configurations with the [ConnectConfigurations resource][connectConfigurationsRes]. Configurations can also be created and managed from DocuSign Admin accessed by selecting **Go to Admin** from the menu next to your picture on the DocuSign web app. See the **Connect** topic in the **Integrations** section of DocuSign Admin. For repeatability, and to minimize support questions, creating Connect configurations via the API is recommended, especially for ISVs.  Connect is available for some DocuSign account types. Please contact DocuSign Sales for more information.  ## Composite Templates  The Composite Templates feature, like [compositing in film production](https://en.wikipedia.org/wiki/Compositing), enables you to overlay document, recipient, and tab definitions from multiple sources, including PDF Form Field definitions, templates defined on the server, and more.  Each Composite Template consists of optional elements: server templates, inline templates, PDF Metadata templates, and documents.  * The Composite Template ID is an optional element used to identify the   composite template. It is used as a reference when adding document   object information via a multipart HTTP message. If used, the document   content-disposition must include the &#x60;compositeTemplateId&#x60; to which the   document should be added. If &#x60;compositeTemplateId&#x60; is not specified in   the content-disposition, the document is applied based on the   &#x60;documentId&#x60; only. If no document object is specified, the composite   template inherits the first document.  * Server Templates are server-side templates stored on the DocuSign   platform. If supplied, they are overlaid into the envelope in the order   of their Sequence value.  * Inline Templates provide a container to add documents, recipients,   tabs, and custom fields. If inline templates are supplied, they are   overlaid into the envelope in the order of their Sequence value.  * Document objects are optional structures that provide a container to   pass in a document or form. If this object is not included, the   composite template inherits the *first* document it finds from a server   template or inline template, starting with the lowest sequence value.  PDF Form objects are only transformed from the document object. DocuSign does not derive PDF form properties from server templates or inline templates. To instruct DocuSign to transform fields from the PDF form, set &#x60;transformPdfFields&#x60; to **true** for the document.  See [PDF Form Field Transformation](#pdf-form-field-transformation) for more information about process.  * PDF Metadata Templates provide a container to embed design-time   template information into a PDF document. DocuSign uses this information   when processing the Envelope. This convention allows the document to   carry the signing instructions with it, so that less information needs   to be provided at run-time through an inline template or synchronized   with an external structure like a server template. PDF Metadata   templates are stored in the Metadata layer of a PDF in accordance with   Acrobat&#39;s XMP specification. DocuSign will only find PDF Metadata   templates inside documents passed in the Document object (see below). If   supplied, the PDF metadata template will be overlaid into the envelope   in the order of its Sequence value.  ### Compositing the Definitions  Each Composite Template adds a new document and templates overlay into the envelope. For each Composite Template these rules are applied:  * Templates are overlaid in the order of their Sequence value. * If Document is not passed into the Composite Template&#39;s &#x60;document&#x60;   field, the *first* template&#39;s document (based on the template&#39;s Sequence   value) is used. * Last in wins in all cases except for the document (i.e. envelope   information, recipient information, secure field information). There is   no special casing.  For example, if you want higher security on a tab, then that needs to be specified in a later template (by sequence number) than where the tab is included. If you want higher security on a role recipient, then it needs to be in a later template than where that role recipient is specified.  * Recipient matching is based on Recipient Role and Routing Order. If   there are matches, the recipient information is merged together. A final   pass is done on all Composite Templates, after all template overlays   have been applied, to collapse recipients with the same email, username   and routing order. This prevents having the same recipients at the same   routing order.  * If you specify in a template that a recipient is locked, once that   recipient is overlaid the recipient attributes can no longer be changed.   The only items that can be changed for the recipient in this case are   the email, username, access code and IDCheckInformationInput.  * Tab matching is based on Tab Labels, Tab Types and Documents. If a Tab   Label matches but the Document is not supplied, the Tab is overlaid for   all the Documents.  For example, if you have a simple inline template with only one tab in it with a label and a value, the Signature, Initial, Company, Envelope ID, User Name tabs will only be matched and collapsed if they fall in the exact same X and Y locations.  * &#x60;roleName&#x60; and &#x60;tabLabel&#x60; matching is case sensitive.  * The &#x60;defaultRecipient&#x60; property enables you to specify which recipient   the tabs generated from a PDF form are mapped to. You can also set PDF   form generated tabs to a recipient other than the default recipient by   specifying the mapping of the tab label that is created to one of the   template recipients.  * You can use &#x60;tabLabel&#x60; wild carding to map a series of tabs from the PDF   form. To use this you must end a tab label with \&quot;\\*\&quot; and then the system   matches tabs that start with the label.  * If no &#x60;defaultRecipient&#x60; is specified, tabs must be explicitly mapped   to recipients in order to be generated from the form. Unmapped form   objects will not be generated into their DocuSign equivalents. (In the   case of Signature/Initials, the tabs will be disregarded entirely; in   the case of pdf text fields, the field data will be flattened on the   Envelope document, but there will not be a corresponding DocuSign data   tab.)  ### Including the Document Content for Composite Templates  Document content can be supplied inline, using the &#x60;documentBase64&#x60; or can be included in a multipart HTTP message. If a multipart message is used and there are multiple Composite Templates, the document content-disposition can include the &#x60;compositeTemplateId&#x60; to which the document should be added. Using the &#x60;compositeTemplateId&#x60; sets which documents are associated with particular composite templates. An example of this usage is:  &#x60;&#x60;&#x60; - -5cd3320a-5aac-4453-b3a4-cbb52a4cba5d Content-Type: application/pdf Content-Disposition: file; filename&#x3D;\&quot;eula.pdf\&quot;; documentId&#x3D;1; compositeTemplateId&#x3D;\&quot;1\&quot; Content-Transfer-Encoding: base64 &#x60;&#x60;&#x60;  ### PDF Form Field Transformation  Only the following PDF Form FieldTypes are transformed to DocuSign tabs:  * CheckBox * DateTime * ListBox * Numeric * Password * Radio * Signature, * Text  Field Properties that are transformed:  * Read Only * Required * Max Length * Positions * Initial Data  When transforming a PDF Form Digital Signature Field, the following rules apply. Any other PDF Form Digital Signature Field will be transformed to a DocuSign Signature tab   | If the PDF Field Name contains                              | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                       | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional       | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                 | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional | Optional Initials             |   When transforming PDF Form Text Fields, the following rules apply. Any other PDF Form Text Field will be transformed to a DocuSign data (text) tab.   | If the PDF Field Name contains                                        | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                                 | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional                 | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                           | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional           | Optional Initials             | | DocuSignEnvelopeID or&lt;br&gt; eSignEnvelopeID                             | EnvelopeID                    | | DocuSignCompany or&lt;br&gt; eSignCompany                                   | Company                       | | DocuSignDateSigned or&lt;br&gt; eSignDateSigned                             | Date Signed                   | | DocuSignTitle or&lt;br&gt; eSignTitle                                       | Title                         | | DocuSignFullName or&lt;br&gt; eSignFullName                                 | Full Name                     | | DocuSignSignerAttachmentOptional or&lt;br&gt; eSignSignerAttachmentOptional | Optional Signer Attachment    |   PDF Form Field Names that include &#x60;DocuSignIgnoreTransform&#x60; or &#x60;eSignIgnoreTransform&#x60; will not be transformed.  PDF Form Date fields that include &#x60;DocuSignDateSigned&#x60; or &#x60;eSignDateSigned&#x60; will be transformed to Date Signed fields.  ## Template Email Subject Merge Fields  This feature enables you to insert recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s &#x60;roleName&#x60;, are added to the &#x60;emailSubject&#x60; when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient.  If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  * To add a recipient&#39;s name in the subject line add the following text   in the &#x60;emailSubject&#x60; when creating the template or when sending an   envelope from a template:     &#x60;[[&lt;roleName&gt;_UserName]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;&#x60;  * To add a recipient&#39;s email address in the subject line add the   following text in the emailSubject when creating the template or when   sending an envelope from a template:     &#x60;[[&lt;roleName&gt;_Email]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;&#x60;  In both cases &#x60;&lt;roleName&gt;&#x60; is the recipient&#39;s &#x60;roleName&#x60; in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.  ## Branding an Envelope  The following rules are used to determine the &#x60;brandId&#x60; used in an envelope:  * If a &#x60;brandId&#x60; is specified in the envelope or template   and that &#x60;brandId&#x60; is available to the account,   that brand is used in the envelope. * If more than one template is used in an envelope,   and more than one &#x60;brandId&#x60; is specified,   the first &#x60;brandId&#x60; specified is used throughout the envelope. * In cases where no brand is specified,   and the sender belongs to a group:   - If there is only one brand associated with the group,     then that brand is used in the envelope.   - Otherwise, the account&#39;s default signing brand is used. * For envelopes that do not meet any of the previous criteria,   the account&#39;s default signing brand is used for the envelope.   ## BCC Email Address Feature  The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options.  Do **not** use this feature to send a copy of the envelope to a recipient who does not need to sign. Use a Carbon Copy or Certified Delivery Recipient type instead.  ## Merge Recipient Roles for Draft Envelopes  When an envelope with multiple templates is sent, the recipients from the templates are merged according to the template roles, and empty recipients are removed. When creating an envelope with multiple templates, but not sending it (keeping it in a created state), duplicate recipients are not merged, which could leave duplicate recipients in the envelope.  To prevent this, the query parameter &#x60;merge_roles_on_draft&#x60; should be added when posting a draft envelope (&#x60;status&#x60; is &#x60;created&#x60;) with multiple templates. Doing this will merge template roles and remove empty recipients.   DocuSign recommends that the &#x60;merge_roles_on_draft&#x60; query parameter be used any time you are creating an envelope with multiple templates and keeping it in draft (&#x60;status&#x60; is &#x60;created&#x60;) status.   [agentDef]:                 #/definitions/agent [apirules]:                 /esign/guide/appendix/resource_limits.html#api-rules-and-limits [ccDef]:                     #/definitions/carbonCopy [certfiedDef]:               #/definitions/certifiedDelivery [connectConfigurationsRes]: /esign/restapi/Connect/ConnectConfigurations/ [connectGuide]:             https://www.docusign.com/supportdocs/pdf/connect-guide.pdf [devecenterrecipients]:     https://www.docusign.com/developer-center/explore/features/recipients [documentDef]:               #/definitions/document [editorDef]:                 #/definitions/editor [envelopeDef]:               #/definitions/envelopeDefinition [envelopeRecipientsDef]:     #/definitions/EnvelopeRecipients [envelopeRecipientsRes]:    /esign/restapi/Envelopes/EnvelopeRecipients/ [envRecipientTabsDef]:       #/definitions/EnvelopeRecipientTabs [envRecipientTabsRes]:      /esign/restapi/Envelopes/EnvelopeRecipientTabs/ [eventNotificationDef]:      #/definitions/eventNotification [inPersonDef]:               #/definitions/inPersonSigner [intermediaryDef]:           #/definitions/intermediary [signerDef]:                 #/definitions/signer 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="cdseMode">Reserved for DocuSign.  (optional)</param>
        /// <param name="completedDocumentsOnly">Reserved for DocuSign.  (optional)</param>
        /// <param name="mergeRolesOnDraft">When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the &#x60;status&#x60; field is set to &#x60;created&#x60;.)  ###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates. (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of EnvelopeSummary</returns>
        public async System.Threading.Tasks.Task<EnvelopeSummary> EnvelopesPostEnvelopesAsync (string accountId, string cdseMode = null, string completedDocumentsOnly = null, string mergeRolesOnDraft = null, EnvelopeDefinition envelopeDefinition = null)
        {
             ApiResponse<EnvelopeSummary> localVarResponse = await EnvelopesPostEnvelopesAsyncWithHttpInfo(accountId, cdseMode, completedDocumentsOnly, mergeRolesOnDraft, envelopeDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an envelope. Creates and sends an envelope or creates a draft envelope. Envelopes are fundamental resources in the DocuSign platform and are used in a variety of ways.  With this method you can:  * Create and send an envelope   with documents, recipients, and tabs. * Create and send an envelope from a template. * Create and send an envelope from   a combination of documents and templates. * Create a draft envelope.  There are many ways to use envelopes. You can create and send an envelope with a single API request, or you can use several API requests to create, populate, and send envelopes.  When you use this method to create and send an envelope in a single request, the following parameters are required:  | Parameter      | Description | | :- -- -- -- -      | :- -- -- -- -- - | | &#x60;status&#x60;       | Set to &#x60;sent&#x60; to send the envelope to recipients.&lt;br&gt;Set to &#x60;created&#x60; (or don&#39;t set at all) to save the envelope as a draft. | | &#x60;emailSubject&#x60; | The subject of the email used to send the envelope. | | &#x60;documents&#x60;    | The documents to be signed. | | &#x60;recipients&#x60;   | The email addresses of the envelope recipients. |  If you are creating an envelope to be sent later, save it as a draft by either setting &#x60;status&#x60; to &#x60;created&#x60; or leaving it unset. For instance, you can create a draft envelope with documents only. Using additional API requests, you can add the recipients and send the envelope in subsequent API requests.    ## Feature Availability  Not all DocuSign features are available to all accounts. Use DocuSign Admin to check and enable feature availability. You can also check feature availability via the web application. For example, if the web application allows you to send an envelope with SMS authentication, then you can use the same feature through the API.  ## Sending Envelopes  Documents can be included with the Envelopes:create method, or a template can include documents. Documents can be added by using a multipart/form request or by using the &#x60;documentBase64&#x60; property of the [&#x60;document&#x60; object][documentDef].  ### Adding Documents to Requests  There are two ways to add documents to your envelopes:  1. Use the &#x60;documents&#x60; property of the envelope definition. 2. Send this request as a multipart/form-data &#x60;POST&#x60;    with documents added through additional request parts.  Using the &#x60;documents&#x60; property is the simpler option, but the request may be quite large due to the base64 encoding. This example shows how to add a document using this method.  &#x60;&#x60;&#x60;json {   \&quot;status\&quot;: \&quot;sent\&quot;,   \&quot;emailSubject\&quot;: \&quot;Example of one recipient, type signer\&quot;,   \&quot;documents\&quot;: [{     \&quot;documentId\&quot;: \&quot;1\&quot;,     \&quot;name\&quot;: \&quot;contract.pdf\&quot;,     \&quot;documentBase64\&quot;: \&quot;base64 document bytes...\&quot;,   }],   \&quot;recipients\&quot;: {     \&quot;signers\&quot;: [{       \&quot;name\&quot;: \&quot;Lisa Simpson\&quot;,       \&quot;email\&quot;: \&quot;lisa@email.com\&quot;,       \&quot;recipientId\&quot;: \&quot;1\&quot;,       \&quot;routingOrder\&quot;: \&quot;1\&quot;,       \&quot;tabs\&quot;: {         \&quot;signHereTabs\&quot;: [{           \&quot;xPosition\&quot;: \&quot;150\&quot;,           \&quot;yPosition\&quot;: \&quot;200\&quot;,           \&quot;documentId\&quot;: \&quot;1\&quot;,           \&quot;pageNumber\&quot;: \&quot;1\&quot;         }],       }     }]   } } &#x60;&#x60;&#x60;  If you are using a multipart/form-data &#x60;POST&#x60; request, you do not have to base64 encode your documents. You place the envelope definition in one part and the document bytes in another:  &#x60;&#x60;&#x60; - -AAA Content-Type: application/json Content-Disposition: form-data  &lt;ENVELOPE DEFINITION GOES HERE&gt; - -AAA Content-Type:application/pdf Content-Disposition: file; filename&#x3D;\&quot;contract.pdf\&quot;; documentid&#x3D;1  &lt;DOCUMENT BYTES GO HERE&gt; - -AAA- - &#x60;&#x60;&#x60;  ### Using Supplemental Documents  Supplemental documents are supporting materials such as disclosures and other informational documents that need to accompany a document sent for signature. These supplemental documents are available to the signer to view and acknowledge, without making the envelope too large or confusing for signers.  Supplemental documents use the following properties in the [&#x60;document&#x60; object][documentDef].  | Name                  | Type    | Description| | :- -- -- -- -- -- -- -- -- -- - | :- -- -- - || | includeInDownload     | Boolean | When set to **true**, the document is included in the combined document download. The default value is **true| | display               | String  | This string sets the display and behavior properties of the document during signing. The possible values are:&lt;br&gt;&#x60;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;modal&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a modal window. This is the recommended value for supplemental documents.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;download&lt;/code&gt;&lt;br&gt;The document is shown as a supplement action strip and can be viewed, downloaded, or printed in a new browser window.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;inline&lt;/code&gt;&lt;br&gt;This value is not used with supplemental documents, but is the default value for all other documents. The document is shown in the normal signing window.&lt;/li&gt;&lt;/ul&gt; | | signerMustAcknowledge | String  | Sets how the signer interacts with the supplemental document. The possible values are:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;no_interaction&lt;/code&gt;&lt;br&gt;No recipient action is required.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view&lt;/code&gt;&lt;br&gt;The recipient is required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;accept&lt;/code&gt;&lt;br&gt;The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;view_accept&lt;/code&gt;&lt;br&gt;The recipient is required to view and accept the document.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;                                                                                                                                                    |   [viewtab]: /esign/restapi/Envelopes/EnvelopeRecipientTabs/#view-tab  The [View][viewtab] and Approve tabs are used to set the interactions for individual recipients. The View tab includes a &#x60;required&#x60; property that requires the recipient to view the supplemental document. If the View tab &#x60;required&#x60; property is not set, the recipient can, but is not required to, view the supplemental document.  To use the View and Approve tabs for supplemental documents, the document &#x60;display&#x60; property must be set to &#x60;modal&#x60; or &#x60;download&#x60;.  The actions that the recipient must take depend on the value of the &#x60;signerMustAcknowledge&#x60; document property and whether the signer is assigned View or Approve tabs on the document.  To set the interactions for individual recipients, set the &#x60;signerMustAcknowledge&#x60; property to &#x60;no_interaction&#x60;, then add View and Approve tabs on the appropriate document for the recipient.   The action that a signer must take depends on the value of the &#x60;signerMustAcknowledge&#x60; document property, whether the signer has an Approve tab, and the value of the &#x60;required&#x60; property of the View tab. The following table shows the actions a recipient must take for different combinations of these tabs and properties.    | Document &#x60;signerMustAcknowledge&#x60;property  | Approve Tab | View Tab &#x60;required&#x60; property  | Recipient is required to ...  | | :- -- -                                     | :- -- -       | :- -- -                         | :- -- -                         | | no_interaction                            | No          |  - -                           |  Take no action               | | no_interaction                            | No          |  false                        |  Take no action               | | no_interaction                            | No          |  true                         |  View                         | | no_interaction                            | Yes         |  false                        |  Accept                       | | no_interaction                            | Yes         |  true                         |  View and Accept              | | view                                      | No          |  - -                           |  View                         | | view                                      | Yes         |  - -                           |  View and Accept              | | accept                                    | - -          |  false                        |  Accept                       | | accept                                    | - -          |  true                         |  View and Accept              | | view_accept                               | - -          |  - -                           |  View and Accept              |     ### Recipient Types  An [&#x60;envelopeDefinition&#x60; object][envelopeDef] is used as the method&#39;s body. Envelope recipients can be defined in the envelope or in templates. The &#x60;envelopeDefinition&#x60; object&#39;s &#x60;recipients&#x60; property is an [&#x60;EnvelopeRecipients&#x60; resource object][envelopeRecipientsDef]. It includes arrays of the seven types of recipients defined by DocuSign:  | Recipient type                      | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - || | [Agents][agentDef]                  | An agent recipient can add name and email information for recipients that appear after the agent in routing order.                                                                                                                                                                                                                                                                                                                                                                                  | | [Carbon Copies][ccDef]              | Carbon copy recipients get a copy of the envelope but don&#39;t need to sign, initial, date or add information to any of the documents. This type of recipient can be used in any routing order. Carbon copy recipients receive their copy of the envelope when the envelope reaches the recipient&#39;s order in the process flow and when the envelope is completed.                                                                                                                                      | | [Certified Deliveries][certfiedDef] | Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don&#39;t need to sign, initial, date or add information to any of the documents.                                                                                                                                                                                                                                                                                                    | | [Editors][editorDef]                | Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Advanced Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and data fields for the remaining recipients. The recipient must have a DocuSign account to be an editor. | | [In-Person Signers][inPersonDef]    | An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer.                                                                                                                                                                                                                                                                                                                                                                            | | [Intermediaries][intermediaryDef]   | An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.                                                                                                                                                                                                                                                                  | | [Signers][signerDef]                | A signer is a recipient who must sign, initial, date, or add data to form fields on the documents in the envelope.                                                                                                                                                                                                                                                                                                                                                                                  |   Additional information about the different types of recipients is available from the [&#x60;EnvelopeRecipients&#x60; resource page][envelopeRecipientsRes] and from the Developer Center [Recipients][devecenterrecipients] topic.    ### Tabs  Tabs (also referred to as tags and fields in the web application), can be defined in the &#x60;envelopeDefinition&#x60;, in templates, by transforming PDF Form Fields, or by using Composite Templates (see below).  The &#x60;inPersonSigner&#x60;, and &#x60;signer&#x60; recipient objects include a &#x60;tabs&#x60; property. It is an [&#x60;EnvelopeRecipientTabs&#x60; resource object][envRecipientTabsDef] that includes arrays of the different tab types available. See the [&#x60;EnvelopeRecipientTabs&#x60; resource][envRecipientTabsRes] for more information.   ## Using Templates  Envelopes use specific people or groups as recipients. Templates can specify a role, eg &#x60;account_manager.&#x60; When a template is used in an envelope, the roles must be replaced with specific people or groups.  When you create an envelope using a &#x60;templateId&#x60;, the different recipient type objects within the [&#x60;EnvelopeRecipients&#x60; property][envelopeRecipientsDef] are used to assign recipients to the template&#39;s roles via the &#x60;roleName&#x60; property. The recipient objects can also override settings that were specified in the template, and set values for tab fields that were defined in the template.  ### Message Lock  When a template is added or applied to an envelope, and the template has a locked email subject and message, that subject and message are used for the envelope and cannot be changed even if another locked template is subsequently added or applied to the envelope. The &#x60;messageLock&#x60; property is used to lock the email subject and message.  If an email subject or message is entered before adding or applying a template with &#x60;messageLock&#x60; set to **true**, the email subject and message is overwritten with the locked email subject and message from the template.  ## Envelope Status  The status of sent envelopes can be determined through the DocuSign webhook system or by polling. Webhooks are highly recommended: they provide your application with the quickest updates when an envelope&#39;s status changes. DocuSign limits polling to once every 15 minutes or less frequently. See [API Rules and Limits][apirules] for more information and examples.   When a webhook is used, DocuSign calls your application via the URL you provide, with a notification XML message.  See the [Webhook recipe](https://www.docusign.com/developer-center/recipes/webhook-status) for examples and live demos of using webhooks.  ## Webhook Options  The two webhook options, &#x60;eventNotification&#x60; and Connect, use the same notification mechanism and message formats. Use &#x60;eventNotification&#x60; to create a webhook for a specific envelope sent via the API. Connect webhooks can be used for any envelope sent from an account, from any user, from any client. The [Connect guide][connectGuide] discusses the webhook notification message format.  ### eventNotification Webhooks  The Envelopes:create method includes an optional [&#x60;eventNotification&#x60; object][eventNotificationDef] property that adds a webhook to the envelope. &#x60;eventNotification&#x60; webhooks are available for all DocuSign accounts with API access.  ### Connect Webhooks  Connect can be used to create a webhook for all envelopes sent by all users in an account, either through the API or through other DocuSign clients (web, mobile, etc). Connect configurations are independent of specific envelopes. A Connect configuration includes a filter that may be used to limit the webhook to specific users, envelope statuses, etc.  You can create and manage Connect configurations with the [ConnectConfigurations resource][connectConfigurationsRes]. Configurations can also be created and managed from DocuSign Admin accessed by selecting **Go to Admin** from the menu next to your picture on the DocuSign web app. See the **Connect** topic in the **Integrations** section of DocuSign Admin. For repeatability, and to minimize support questions, creating Connect configurations via the API is recommended, especially for ISVs.  Connect is available for some DocuSign account types. Please contact DocuSign Sales for more information.  ## Composite Templates  The Composite Templates feature, like [compositing in film production](https://en.wikipedia.org/wiki/Compositing), enables you to overlay document, recipient, and tab definitions from multiple sources, including PDF Form Field definitions, templates defined on the server, and more.  Each Composite Template consists of optional elements: server templates, inline templates, PDF Metadata templates, and documents.  * The Composite Template ID is an optional element used to identify the   composite template. It is used as a reference when adding document   object information via a multipart HTTP message. If used, the document   content-disposition must include the &#x60;compositeTemplateId&#x60; to which the   document should be added. If &#x60;compositeTemplateId&#x60; is not specified in   the content-disposition, the document is applied based on the   &#x60;documentId&#x60; only. If no document object is specified, the composite   template inherits the first document.  * Server Templates are server-side templates stored on the DocuSign   platform. If supplied, they are overlaid into the envelope in the order   of their Sequence value.  * Inline Templates provide a container to add documents, recipients,   tabs, and custom fields. If inline templates are supplied, they are   overlaid into the envelope in the order of their Sequence value.  * Document objects are optional structures that provide a container to   pass in a document or form. If this object is not included, the   composite template inherits the *first* document it finds from a server   template or inline template, starting with the lowest sequence value.  PDF Form objects are only transformed from the document object. DocuSign does not derive PDF form properties from server templates or inline templates. To instruct DocuSign to transform fields from the PDF form, set &#x60;transformPdfFields&#x60; to **true** for the document.  See [PDF Form Field Transformation](#pdf-form-field-transformation) for more information about process.  * PDF Metadata Templates provide a container to embed design-time   template information into a PDF document. DocuSign uses this information   when processing the Envelope. This convention allows the document to   carry the signing instructions with it, so that less information needs   to be provided at run-time through an inline template or synchronized   with an external structure like a server template. PDF Metadata   templates are stored in the Metadata layer of a PDF in accordance with   Acrobat&#39;s XMP specification. DocuSign will only find PDF Metadata   templates inside documents passed in the Document object (see below). If   supplied, the PDF metadata template will be overlaid into the envelope   in the order of its Sequence value.  ### Compositing the Definitions  Each Composite Template adds a new document and templates overlay into the envelope. For each Composite Template these rules are applied:  * Templates are overlaid in the order of their Sequence value. * If Document is not passed into the Composite Template&#39;s &#x60;document&#x60;   field, the *first* template&#39;s document (based on the template&#39;s Sequence   value) is used. * Last in wins in all cases except for the document (i.e. envelope   information, recipient information, secure field information). There is   no special casing.  For example, if you want higher security on a tab, then that needs to be specified in a later template (by sequence number) than where the tab is included. If you want higher security on a role recipient, then it needs to be in a later template than where that role recipient is specified.  * Recipient matching is based on Recipient Role and Routing Order. If   there are matches, the recipient information is merged together. A final   pass is done on all Composite Templates, after all template overlays   have been applied, to collapse recipients with the same email, username   and routing order. This prevents having the same recipients at the same   routing order.  * If you specify in a template that a recipient is locked, once that   recipient is overlaid the recipient attributes can no longer be changed.   The only items that can be changed for the recipient in this case are   the email, username, access code and IDCheckInformationInput.  * Tab matching is based on Tab Labels, Tab Types and Documents. If a Tab   Label matches but the Document is not supplied, the Tab is overlaid for   all the Documents.  For example, if you have a simple inline template with only one tab in it with a label and a value, the Signature, Initial, Company, Envelope ID, User Name tabs will only be matched and collapsed if they fall in the exact same X and Y locations.  * &#x60;roleName&#x60; and &#x60;tabLabel&#x60; matching is case sensitive.  * The &#x60;defaultRecipient&#x60; property enables you to specify which recipient   the tabs generated from a PDF form are mapped to. You can also set PDF   form generated tabs to a recipient other than the default recipient by   specifying the mapping of the tab label that is created to one of the   template recipients.  * You can use &#x60;tabLabel&#x60; wild carding to map a series of tabs from the PDF   form. To use this you must end a tab label with \&quot;\\*\&quot; and then the system   matches tabs that start with the label.  * If no &#x60;defaultRecipient&#x60; is specified, tabs must be explicitly mapped   to recipients in order to be generated from the form. Unmapped form   objects will not be generated into their DocuSign equivalents. (In the   case of Signature/Initials, the tabs will be disregarded entirely; in   the case of pdf text fields, the field data will be flattened on the   Envelope document, but there will not be a corresponding DocuSign data   tab.)  ### Including the Document Content for Composite Templates  Document content can be supplied inline, using the &#x60;documentBase64&#x60; or can be included in a multipart HTTP message. If a multipart message is used and there are multiple Composite Templates, the document content-disposition can include the &#x60;compositeTemplateId&#x60; to which the document should be added. Using the &#x60;compositeTemplateId&#x60; sets which documents are associated with particular composite templates. An example of this usage is:  &#x60;&#x60;&#x60; - -5cd3320a-5aac-4453-b3a4-cbb52a4cba5d Content-Type: application/pdf Content-Disposition: file; filename&#x3D;\&quot;eula.pdf\&quot;; documentId&#x3D;1; compositeTemplateId&#x3D;\&quot;1\&quot; Content-Transfer-Encoding: base64 &#x60;&#x60;&#x60;  ### PDF Form Field Transformation  Only the following PDF Form FieldTypes are transformed to DocuSign tabs:  * CheckBox * DateTime * ListBox * Numeric * Password * Radio * Signature, * Text  Field Properties that are transformed:  * Read Only * Required * Max Length * Positions * Initial Data  When transforming a PDF Form Digital Signature Field, the following rules apply. Any other PDF Form Digital Signature Field will be transformed to a DocuSign Signature tab   | If the PDF Field Name contains                              | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                       | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional       | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                 | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional | Optional Initials             |   When transforming PDF Form Text Fields, the following rules apply. Any other PDF Form Text Field will be transformed to a DocuSign data (text) tab.   | If the PDF Field Name contains                                        | Then the DocuSign tab will be | | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | DocuSignSignHere or&lt;br&gt; eSignSignHere                                 | Signature                     | | DocuSignSignHereOptional or&lt;br&gt; eSignSignHereOptional                 | Optional Signature            | | DocuSignInitialHere or&lt;br&gt; eSignInitialHere                           | Initials                      | | DocuSignInitialHereOptional or&lt;br&gt; eSignInitialHereOptional           | Optional Initials             | | DocuSignEnvelopeID or&lt;br&gt; eSignEnvelopeID                             | EnvelopeID                    | | DocuSignCompany or&lt;br&gt; eSignCompany                                   | Company                       | | DocuSignDateSigned or&lt;br&gt; eSignDateSigned                             | Date Signed                   | | DocuSignTitle or&lt;br&gt; eSignTitle                                       | Title                         | | DocuSignFullName or&lt;br&gt; eSignFullName                                 | Full Name                     | | DocuSignSignerAttachmentOptional or&lt;br&gt; eSignSignerAttachmentOptional | Optional Signer Attachment    |   PDF Form Field Names that include &#x60;DocuSignIgnoreTransform&#x60; or &#x60;eSignIgnoreTransform&#x60; will not be transformed.  PDF Form Date fields that include &#x60;DocuSignDateSigned&#x60; or &#x60;eSignDateSigned&#x60; will be transformed to Date Signed fields.  ## Template Email Subject Merge Fields  This feature enables you to insert recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s &#x60;roleName&#x60;, are added to the &#x60;emailSubject&#x60; when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient.  If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  * To add a recipient&#39;s name in the subject line add the following text   in the &#x60;emailSubject&#x60; when creating the template or when sending an   envelope from a template:     &#x60;[[&lt;roleName&gt;_UserName]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;&#x60;  * To add a recipient&#39;s email address in the subject line add the   following text in the emailSubject when creating the template or when   sending an envelope from a template:     &#x60;[[&lt;roleName&gt;_Email]]&#x60;     Example:     &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;&#x60;  In both cases &#x60;&lt;roleName&gt;&#x60; is the recipient&#39;s &#x60;roleName&#x60; in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.  ## Branding an Envelope  The following rules are used to determine the &#x60;brandId&#x60; used in an envelope:  * If a &#x60;brandId&#x60; is specified in the envelope or template   and that &#x60;brandId&#x60; is available to the account,   that brand is used in the envelope. * If more than one template is used in an envelope,   and more than one &#x60;brandId&#x60; is specified,   the first &#x60;brandId&#x60; specified is used throughout the envelope. * In cases where no brand is specified,   and the sender belongs to a group:   - If there is only one brand associated with the group,     then that brand is used in the envelope.   - Otherwise, the account&#39;s default signing brand is used. * For envelopes that do not meet any of the previous criteria,   the account&#39;s default signing brand is used for the envelope.   ## BCC Email Address Feature  The BCC Email address feature is designed to provide a copy of all email communications for external archiving purposes. DocuSign recommends that envelopes sent using the BCC for Email Archive feature, including the BCC Email Override option, include additional signer authentication options.  Do **not** use this feature to send a copy of the envelope to a recipient who does not need to sign. Use a Carbon Copy or Certified Delivery Recipient type instead.  ## Merge Recipient Roles for Draft Envelopes  When an envelope with multiple templates is sent, the recipients from the templates are merged according to the template roles, and empty recipients are removed. When creating an envelope with multiple templates, but not sending it (keeping it in a created state), duplicate recipients are not merged, which could leave duplicate recipients in the envelope.  To prevent this, the query parameter &#x60;merge_roles_on_draft&#x60; should be added when posting a draft envelope (&#x60;status&#x60; is &#x60;created&#x60;) with multiple templates. Doing this will merge template roles and remove empty recipients.   DocuSign recommends that the &#x60;merge_roles_on_draft&#x60; query parameter be used any time you are creating an envelope with multiple templates and keeping it in draft (&#x60;status&#x60; is &#x60;created&#x60;) status.   [agentDef]:                 #/definitions/agent [apirules]:                 /esign/guide/appendix/resource_limits.html#api-rules-and-limits [ccDef]:                     #/definitions/carbonCopy [certfiedDef]:               #/definitions/certifiedDelivery [connectConfigurationsRes]: /esign/restapi/Connect/ConnectConfigurations/ [connectGuide]:             https://www.docusign.com/supportdocs/pdf/connect-guide.pdf [devecenterrecipients]:     https://www.docusign.com/developer-center/explore/features/recipients [documentDef]:               #/definitions/document [editorDef]:                 #/definitions/editor [envelopeDef]:               #/definitions/envelopeDefinition [envelopeRecipientsDef]:     #/definitions/EnvelopeRecipients [envelopeRecipientsRes]:    /esign/restapi/Envelopes/EnvelopeRecipients/ [envRecipientTabsDef]:       #/definitions/EnvelopeRecipientTabs [envRecipientTabsRes]:      /esign/restapi/Envelopes/EnvelopeRecipientTabs/ [eventNotificationDef]:      #/definitions/eventNotification [inPersonDef]:               #/definitions/inPersonSigner [intermediaryDef]:           #/definitions/intermediary [signerDef]:                 #/definitions/signer 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="cdseMode">Reserved for DocuSign.  (optional)</param>
        /// <param name="completedDocumentsOnly">Reserved for DocuSign.  (optional)</param>
        /// <param name="mergeRolesOnDraft">When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the &#x60;status&#x60; field is set to &#x60;created&#x60;.)  ###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates. (optional)</param>
        /// <param name="envelopeDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeSummary>> EnvelopesPostEnvelopesAsyncWithHttpInfo (string accountId, string cdseMode = null, string completedDocumentsOnly = null, string mergeRolesOnDraft = null, EnvelopeDefinition envelopeDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->EnvelopesPostEnvelopes");

            var localVarPath = "/v2/accounts/{accountId}/envelopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (cdseMode != null) localVarQueryParams.Add("cdse_mode", Configuration.ApiClient.ParameterToString(cdseMode)); // query parameter
            if (completedDocumentsOnly != null) localVarQueryParams.Add("completed_documents_only", Configuration.ApiClient.ParameterToString(completedDocumentsOnly)); // query parameter
            if (mergeRolesOnDraft != null) localVarQueryParams.Add("merge_roles_on_draft", Configuration.ApiClient.ParameterToString(mergeRolesOnDraft)); // query parameter
            if (envelopeDefinition != null && envelopeDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvelopesPostEnvelopes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeSummary)));
            
        }

        /// <summary>
        /// Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft The Put Envelopes endpoint provides the following functionality:  * Sends the specified single draft envelope. Add {\&quot;status\&quot;:\&quot;sent\&quot;} to the request body to send the envelope.  * Voids the specified in-process envelope. Add {\&quot;status\&quot;:\&quot;voided\&quot;, \&quot;voidedReason\&quot;:\&quot;The reason for voiding the envelope\&quot;} to the request body to void the envelope.  * Replaces the current email subject and message for a draft envelope. Add {\&quot;emailSubject\&quot;:\&quot;subject\&quot;,  \&quot;emailBlurb\&quot;:\&quot;message\&quot;}  to the request body to modify the subject and message.  * Place the envelope documents and envelope metadata in a purge queue so that this information is removed from the DocuSign system. Add {\&quot;purgeState\&quot;:\&quot;purge type\&quot;} to the request body.  *Additional information on purging documents*  The purge request can only be used for completed envelopes that are not marked as the authoritative copy. The requesting user must have permission to purge documents and must be the sender (the requesting user can act as the sender using Send On Behalf Of).  ###### Note: If you have set the Document Retention policy on your account, envelope documents are automatically placed in the purge queue and the warning emails are sent at the end of the retention period.  ###### Note: You can set the Document Retention policy in the Classic DocuSign Experience by specifying the number of days to retain documents.  ###### Note: Setting a Document Retention policy is the same as setting a schedule for purging documents.  When the purge request is initiated the envelope documents, or documents and envelope metadata, are placed in a purge queue for deletion in 14 days. A warning email notification is sent to the sender and recipients associated with the envelope, notifying them that the envelope documents will be deleted in 14 days and providing a link to the documents. A second email is sent 7 days later with the same message. At the end of the 14-day period, the envelope documents are deleted from the system.  If &#x60;purgeState&#x3D;\&quot;documents_queued\&quot;&#x60; is used in the request, then only the documents are deleted and any corresponding attachments and tabs remain in the DocuSign system. If &#x60;purgeState&#x3D; \&quot;documents_and_metadata_queued\&quot;&#x60; is used in the request, then the documents, attachments, and tabs are deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes. (optional)</param>
        /// <param name="resendEnvelope">When set to **true**, sends the specified envelope again. (optional)</param>
        /// <param name="envelopes"> (optional)</param>
        /// <returns>EnvelopeUpdateSummary</returns>
        public EnvelopeUpdateSummary EnvelopesPutEnvelope (string accountId, string envelopeId, string advancedUpdate = null, string resendEnvelope = null, Envelopes envelopes = null)
        {
             ApiResponse<EnvelopeUpdateSummary> localVarResponse = EnvelopesPutEnvelopeWithHttpInfo(accountId, envelopeId, advancedUpdate, resendEnvelope, envelopes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft The Put Envelopes endpoint provides the following functionality:  * Sends the specified single draft envelope. Add {\&quot;status\&quot;:\&quot;sent\&quot;} to the request body to send the envelope.  * Voids the specified in-process envelope. Add {\&quot;status\&quot;:\&quot;voided\&quot;, \&quot;voidedReason\&quot;:\&quot;The reason for voiding the envelope\&quot;} to the request body to void the envelope.  * Replaces the current email subject and message for a draft envelope. Add {\&quot;emailSubject\&quot;:\&quot;subject\&quot;,  \&quot;emailBlurb\&quot;:\&quot;message\&quot;}  to the request body to modify the subject and message.  * Place the envelope documents and envelope metadata in a purge queue so that this information is removed from the DocuSign system. Add {\&quot;purgeState\&quot;:\&quot;purge type\&quot;} to the request body.  *Additional information on purging documents*  The purge request can only be used for completed envelopes that are not marked as the authoritative copy. The requesting user must have permission to purge documents and must be the sender (the requesting user can act as the sender using Send On Behalf Of).  ###### Note: If you have set the Document Retention policy on your account, envelope documents are automatically placed in the purge queue and the warning emails are sent at the end of the retention period.  ###### Note: You can set the Document Retention policy in the Classic DocuSign Experience by specifying the number of days to retain documents.  ###### Note: Setting a Document Retention policy is the same as setting a schedule for purging documents.  When the purge request is initiated the envelope documents, or documents and envelope metadata, are placed in a purge queue for deletion in 14 days. A warning email notification is sent to the sender and recipients associated with the envelope, notifying them that the envelope documents will be deleted in 14 days and providing a link to the documents. A second email is sent 7 days later with the same message. At the end of the 14-day period, the envelope documents are deleted from the system.  If &#x60;purgeState&#x3D;\&quot;documents_queued\&quot;&#x60; is used in the request, then only the documents are deleted and any corresponding attachments and tabs remain in the DocuSign system. If &#x60;purgeState&#x3D; \&quot;documents_and_metadata_queued\&quot;&#x60; is used in the request, then the documents, attachments, and tabs are deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes. (optional)</param>
        /// <param name="resendEnvelope">When set to **true**, sends the specified envelope again. (optional)</param>
        /// <param name="envelopes"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeUpdateSummary</returns>
        public ApiResponse< EnvelopeUpdateSummary > EnvelopesPutEnvelopeWithHttpInfo (string accountId, string envelopeId, string advancedUpdate = null, string resendEnvelope = null, Envelopes envelopes = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->EnvelopesPutEnvelope");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->EnvelopesPutEnvelope");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (advancedUpdate != null) localVarQueryParams.Add("advanced_update", Configuration.ApiClient.ParameterToString(advancedUpdate)); // query parameter
            if (resendEnvelope != null) localVarQueryParams.Add("resend_envelope", Configuration.ApiClient.ParameterToString(resendEnvelope)); // query parameter
            if (envelopes != null && envelopes.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopes; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvelopesPutEnvelope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeUpdateSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeUpdateSummary)));
            
        }

        /// <summary>
        /// Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft The Put Envelopes endpoint provides the following functionality:  * Sends the specified single draft envelope. Add {\&quot;status\&quot;:\&quot;sent\&quot;} to the request body to send the envelope.  * Voids the specified in-process envelope. Add {\&quot;status\&quot;:\&quot;voided\&quot;, \&quot;voidedReason\&quot;:\&quot;The reason for voiding the envelope\&quot;} to the request body to void the envelope.  * Replaces the current email subject and message for a draft envelope. Add {\&quot;emailSubject\&quot;:\&quot;subject\&quot;,  \&quot;emailBlurb\&quot;:\&quot;message\&quot;}  to the request body to modify the subject and message.  * Place the envelope documents and envelope metadata in a purge queue so that this information is removed from the DocuSign system. Add {\&quot;purgeState\&quot;:\&quot;purge type\&quot;} to the request body.  *Additional information on purging documents*  The purge request can only be used for completed envelopes that are not marked as the authoritative copy. The requesting user must have permission to purge documents and must be the sender (the requesting user can act as the sender using Send On Behalf Of).  ###### Note: If you have set the Document Retention policy on your account, envelope documents are automatically placed in the purge queue and the warning emails are sent at the end of the retention period.  ###### Note: You can set the Document Retention policy in the Classic DocuSign Experience by specifying the number of days to retain documents.  ###### Note: Setting a Document Retention policy is the same as setting a schedule for purging documents.  When the purge request is initiated the envelope documents, or documents and envelope metadata, are placed in a purge queue for deletion in 14 days. A warning email notification is sent to the sender and recipients associated with the envelope, notifying them that the envelope documents will be deleted in 14 days and providing a link to the documents. A second email is sent 7 days later with the same message. At the end of the 14-day period, the envelope documents are deleted from the system.  If &#x60;purgeState&#x3D;\&quot;documents_queued\&quot;&#x60; is used in the request, then only the documents are deleted and any corresponding attachments and tabs remain in the DocuSign system. If &#x60;purgeState&#x3D; \&quot;documents_and_metadata_queued\&quot;&#x60; is used in the request, then the documents, attachments, and tabs are deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes. (optional)</param>
        /// <param name="resendEnvelope">When set to **true**, sends the specified envelope again. (optional)</param>
        /// <param name="envelopes"> (optional)</param>
        /// <returns>Task of EnvelopeUpdateSummary</returns>
        public async System.Threading.Tasks.Task<EnvelopeUpdateSummary> EnvelopesPutEnvelopeAsync (string accountId, string envelopeId, string advancedUpdate = null, string resendEnvelope = null, Envelopes envelopes = null)
        {
             ApiResponse<EnvelopeUpdateSummary> localVarResponse = await EnvelopesPutEnvelopeAsyncWithHttpInfo(accountId, envelopeId, advancedUpdate, resendEnvelope, envelopes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft The Put Envelopes endpoint provides the following functionality:  * Sends the specified single draft envelope. Add {\&quot;status\&quot;:\&quot;sent\&quot;} to the request body to send the envelope.  * Voids the specified in-process envelope. Add {\&quot;status\&quot;:\&quot;voided\&quot;, \&quot;voidedReason\&quot;:\&quot;The reason for voiding the envelope\&quot;} to the request body to void the envelope.  * Replaces the current email subject and message for a draft envelope. Add {\&quot;emailSubject\&quot;:\&quot;subject\&quot;,  \&quot;emailBlurb\&quot;:\&quot;message\&quot;}  to the request body to modify the subject and message.  * Place the envelope documents and envelope metadata in a purge queue so that this information is removed from the DocuSign system. Add {\&quot;purgeState\&quot;:\&quot;purge type\&quot;} to the request body.  *Additional information on purging documents*  The purge request can only be used for completed envelopes that are not marked as the authoritative copy. The requesting user must have permission to purge documents and must be the sender (the requesting user can act as the sender using Send On Behalf Of).  ###### Note: If you have set the Document Retention policy on your account, envelope documents are automatically placed in the purge queue and the warning emails are sent at the end of the retention period.  ###### Note: You can set the Document Retention policy in the Classic DocuSign Experience by specifying the number of days to retain documents.  ###### Note: Setting a Document Retention policy is the same as setting a schedule for purging documents.  When the purge request is initiated the envelope documents, or documents and envelope metadata, are placed in a purge queue for deletion in 14 days. A warning email notification is sent to the sender and recipients associated with the envelope, notifying them that the envelope documents will be deleted in 14 days and providing a link to the documents. A second email is sent 7 days later with the same message. At the end of the 14-day period, the envelope documents are deleted from the system.  If &#x60;purgeState&#x3D;\&quot;documents_queued\&quot;&#x60; is used in the request, then only the documents are deleted and any corresponding attachments and tabs remain in the DocuSign system. If &#x60;purgeState&#x3D; \&quot;documents_and_metadata_queued\&quot;&#x60; is used in the request, then the documents, attachments, and tabs are deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="advancedUpdate">When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes. (optional)</param>
        /// <param name="resendEnvelope">When set to **true**, sends the specified envelope again. (optional)</param>
        /// <param name="envelopes"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeUpdateSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeUpdateSummary>> EnvelopesPutEnvelopeAsyncWithHttpInfo (string accountId, string envelopeId, string advancedUpdate = null, string resendEnvelope = null, Envelopes envelopes = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->EnvelopesPutEnvelope");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->EnvelopesPutEnvelope");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (advancedUpdate != null) localVarQueryParams.Add("advanced_update", Configuration.ApiClient.ParameterToString(advancedUpdate)); // query parameter
            if (resendEnvelope != null) localVarQueryParams.Add("resend_envelope", Configuration.ApiClient.ParameterToString(resendEnvelope)); // query parameter
            if (envelopes != null && envelopes.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopes; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvelopesPutEnvelope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeUpdateSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeUpdateSummary)));
            
        }

        /// <summary>
        /// Gets the envelope status for the specified envelopes. Retrieves the envelope status for the specified envelopes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="email">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">The date/time setting that specifies when the request begins checking for status changes for envelopes in the account.  This is required unless parameters &#x60;envelopeIds&#x60; and/or &#x60;transactionIds&#x60; are set. (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="toDate">Optional date/time setting that specifies the last date/time  or envelope status changes in the result set.   Default: \&quot;now\&quot;, the time that you call the method.   (optional)</param>
        /// <param name="envelopeIdsRequest"> (optional)</param>
        /// <returns>EnvelopesInformation</returns>
        public EnvelopesInformation EnvelopesPutStatus (string accountId, string email = null, string fromDate = null, string startPosition = null, string toDate = null, EnvelopeIdsRequest envelopeIdsRequest = null)
        {
             ApiResponse<EnvelopesInformation> localVarResponse = EnvelopesPutStatusWithHttpInfo(accountId, email, fromDate, startPosition, toDate, envelopeIdsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the envelope status for the specified envelopes. Retrieves the envelope status for the specified envelopes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="email">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">The date/time setting that specifies when the request begins checking for status changes for envelopes in the account.  This is required unless parameters &#x60;envelopeIds&#x60; and/or &#x60;transactionIds&#x60; are set. (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="toDate">Optional date/time setting that specifies the last date/time  or envelope status changes in the result set.   Default: \&quot;now\&quot;, the time that you call the method.   (optional)</param>
        /// <param name="envelopeIdsRequest"> (optional)</param>
        /// <returns>ApiResponse of EnvelopesInformation</returns>
        public ApiResponse< EnvelopesInformation > EnvelopesPutStatusWithHttpInfo (string accountId, string email = null, string fromDate = null, string startPosition = null, string toDate = null, EnvelopeIdsRequest envelopeIdsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->EnvelopesPutStatus");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter
            if (envelopeIdsRequest != null && envelopeIdsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeIdsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeIdsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvelopesPutStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopesInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopesInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopesInformation)));
            
        }

        /// <summary>
        /// Gets the envelope status for the specified envelopes. Retrieves the envelope status for the specified envelopes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="email">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">The date/time setting that specifies when the request begins checking for status changes for envelopes in the account.  This is required unless parameters &#x60;envelopeIds&#x60; and/or &#x60;transactionIds&#x60; are set. (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="toDate">Optional date/time setting that specifies the last date/time  or envelope status changes in the result set.   Default: \&quot;now\&quot;, the time that you call the method.   (optional)</param>
        /// <param name="envelopeIdsRequest"> (optional)</param>
        /// <returns>Task of EnvelopesInformation</returns>
        public async System.Threading.Tasks.Task<EnvelopesInformation> EnvelopesPutStatusAsync (string accountId, string email = null, string fromDate = null, string startPosition = null, string toDate = null, EnvelopeIdsRequest envelopeIdsRequest = null)
        {
             ApiResponse<EnvelopesInformation> localVarResponse = await EnvelopesPutStatusAsyncWithHttpInfo(accountId, email, fromDate, startPosition, toDate, envelopeIdsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the envelope status for the specified envelopes. Retrieves the envelope status for the specified envelopes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="email">Reserved for DocuSign.  (optional)</param>
        /// <param name="fromDate">The date/time setting that specifies when the request begins checking for status changes for envelopes in the account.  This is required unless parameters &#x60;envelopeIds&#x60; and/or &#x60;transactionIds&#x60; are set. (optional)</param>
        /// <param name="startPosition">Reserved for DocuSign.  (optional)</param>
        /// <param name="toDate">Optional date/time setting that specifies the last date/time  or envelope status changes in the result set.   Default: \&quot;now\&quot;, the time that you call the method.   (optional)</param>
        /// <param name="envelopeIdsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopesInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopesInformation>> EnvelopesPutStatusAsyncWithHttpInfo (string accountId, string email = null, string fromDate = null, string startPosition = null, string toDate = null, EnvelopeIdsRequest envelopeIdsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->EnvelopesPutStatus");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter
            if (envelopeIdsRequest != null && envelopeIdsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeIdsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeIdsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnvelopesPutStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopesInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopesInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopesInformation)));
            
        }

        /// <summary>
        /// Gets envelope notification information. Retrieves the envelope notification, reminders and expirations, information for an existing envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Notification</returns>
        public Notification NotificationGetEnvelopesEnvelopeIdNotification (string accountId, string envelopeId)
        {
             ApiResponse<Notification> localVarResponse = NotificationGetEnvelopesEnvelopeIdNotificationWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets envelope notification information. Retrieves the envelope notification, reminders and expirations, information for an existing envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>ApiResponse of Notification</returns>
        public ApiResponse< Notification > NotificationGetEnvelopesEnvelopeIdNotificationWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->NotificationGetEnvelopesEnvelopeIdNotification");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->NotificationGetEnvelopesEnvelopeIdNotification");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationGetEnvelopesEnvelopeIdNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
            
        }

        /// <summary>
        /// Gets envelope notification information. Retrieves the envelope notification, reminders and expirations, information for an existing envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> NotificationGetEnvelopesEnvelopeIdNotificationAsync (string accountId, string envelopeId)
        {
             ApiResponse<Notification> localVarResponse = await NotificationGetEnvelopesEnvelopeIdNotificationAsyncWithHttpInfo(accountId, envelopeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets envelope notification information. Retrieves the envelope notification, reminders and expirations, information for an existing envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notification>> NotificationGetEnvelopesEnvelopeIdNotificationAsyncWithHttpInfo (string accountId, string envelopeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->NotificationGetEnvelopesEnvelopeIdNotification");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->NotificationGetEnvelopesEnvelopeIdNotification");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationGetEnvelopesEnvelopeIdNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
            
        }

        /// <summary>
        /// Sets envelope notification (Reminders/Expirations) structure for an existing envelope. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeNotificationRequest"> (optional)</param>
        /// <returns>Notification</returns>
        public Notification NotificationPutEnvelopesEnvelopeIdNotification (string accountId, string envelopeId, EnvelopeNotificationRequest envelopeNotificationRequest = null)
        {
             ApiResponse<Notification> localVarResponse = NotificationPutEnvelopesEnvelopeIdNotificationWithHttpInfo(accountId, envelopeId, envelopeNotificationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets envelope notification (Reminders/Expirations) structure for an existing envelope. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeNotificationRequest"> (optional)</param>
        /// <returns>ApiResponse of Notification</returns>
        public ApiResponse< Notification > NotificationPutEnvelopesEnvelopeIdNotificationWithHttpInfo (string accountId, string envelopeId, EnvelopeNotificationRequest envelopeNotificationRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->NotificationPutEnvelopesEnvelopeIdNotification");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->NotificationPutEnvelopesEnvelopeIdNotification");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeNotificationRequest != null && envelopeNotificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeNotificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeNotificationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationPutEnvelopesEnvelopeIdNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
            
        }

        /// <summary>
        /// Sets envelope notification (Reminders/Expirations) structure for an existing envelope. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeNotificationRequest"> (optional)</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> NotificationPutEnvelopesEnvelopeIdNotificationAsync (string accountId, string envelopeId, EnvelopeNotificationRequest envelopeNotificationRequest = null)
        {
             ApiResponse<Notification> localVarResponse = await NotificationPutEnvelopesEnvelopeIdNotificationAsyncWithHttpInfo(accountId, envelopeId, envelopeNotificationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets envelope notification (Reminders/Expirations) structure for an existing envelope. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeNotificationRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notification>> NotificationPutEnvelopesEnvelopeIdNotificationAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeNotificationRequest envelopeNotificationRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->NotificationPutEnvelopesEnvelopeIdNotification");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->NotificationPutEnvelopesEnvelopeIdNotification");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeNotificationRequest != null && envelopeNotificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeNotificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeNotificationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationPutEnvelopesEnvelopeIdNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
            
        }

        /// <summary>
        /// Deletes a page from a document in an envelope. Deletes a page from a document in an envelope based on the page number.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns></returns>
        public void PagesDeletePage (string accountId, string documentId, string envelopeId, string pageNumber)
        {
             PagesDeletePageWithHttpInfo(accountId, documentId, envelopeId, pageNumber);
        }

        /// <summary>
        /// Deletes a page from a document in an envelope. Deletes a page from a document in an envelope based on the page number.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PagesDeletePageWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->PagesDeletePage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopesApi->PagesDeletePage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->PagesDeletePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling EnvelopesApi->PagesDeletePage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesDeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a page from a document in an envelope. Deletes a page from a document in an envelope based on the page number.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PagesDeletePageAsync (string accountId, string documentId, string envelopeId, string pageNumber)
        {
             await PagesDeletePageAsyncWithHttpInfo(accountId, documentId, envelopeId, pageNumber);

        }

        /// <summary>
        /// Deletes a page from a document in an envelope. Deletes a page from a document in an envelope based on the page number.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PagesDeletePageAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->PagesDeletePage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopesApi->PagesDeletePage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->PagesDeletePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling EnvelopesApi->PagesDeletePage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesDeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a page image from an envelope for display. Retrieves a page image for display from the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="dpi">Sets the dpi for the image. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PagesGetPageImage (string accountId, string documentId, string envelopeId, string pageNumber, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PagesGetPageImageWithHttpInfo(accountId, documentId, envelopeId, pageNumber, dpi, maxHeight, maxWidth, showChanges);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a page image from an envelope for display. Retrieves a page image for display from the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="dpi">Sets the dpi for the image. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PagesGetPageImageWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->PagesGetPageImage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopesApi->PagesGetPageImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->PagesGetPageImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling EnvelopesApi->PagesGetPageImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (dpi != null) localVarQueryParams.Add("dpi", Configuration.ApiClient.ParameterToString(dpi)); // query parameter
            if (maxHeight != null) localVarQueryParams.Add("max_height", Configuration.ApiClient.ParameterToString(maxHeight)); // query parameter
            if (maxWidth != null) localVarQueryParams.Add("max_width", Configuration.ApiClient.ParameterToString(maxWidth)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesGetPageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Gets a page image from an envelope for display. Retrieves a page image for display from the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="dpi">Sets the dpi for the image. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PagesGetPageImageAsync (string accountId, string documentId, string envelopeId, string pageNumber, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PagesGetPageImageAsyncWithHttpInfo(accountId, documentId, envelopeId, pageNumber, dpi, maxHeight, maxWidth, showChanges);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a page image from an envelope for display. Retrieves a page image for display from the specified envelope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="dpi">Sets the dpi for the image. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width for the page image in pixels. The dpi is recalculated based on this setting. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PagesGetPageImageAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->PagesGetPageImage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopesApi->PagesGetPageImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->PagesGetPageImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling EnvelopesApi->PagesGetPageImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (dpi != null) localVarQueryParams.Add("dpi", Configuration.ApiClient.ParameterToString(dpi)); // query parameter
            if (maxHeight != null) localVarQueryParams.Add("max_height", Configuration.ApiClient.ParameterToString(maxHeight)); // query parameter
            if (maxWidth != null) localVarQueryParams.Add("max_width", Configuration.ApiClient.ParameterToString(maxWidth)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesGetPageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Returns document page image(s) based on input. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>PageImages</returns>
        public PageImages PagesGetPageImages (string accountId, string documentId, string envelopeId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null)
        {
             ApiResponse<PageImages> localVarResponse = PagesGetPageImagesWithHttpInfo(accountId, documentId, envelopeId, count, dpi, maxHeight, maxWidth, nocache, showChanges, startPosition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document page image(s) based on input. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>ApiResponse of PageImages</returns>
        public ApiResponse< PageImages > PagesGetPageImagesWithHttpInfo (string accountId, string documentId, string envelopeId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->PagesGetPageImages");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopesApi->PagesGetPageImages");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->PagesGetPageImages");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (dpi != null) localVarQueryParams.Add("dpi", Configuration.ApiClient.ParameterToString(dpi)); // query parameter
            if (maxHeight != null) localVarQueryParams.Add("max_height", Configuration.ApiClient.ParameterToString(maxHeight)); // query parameter
            if (maxWidth != null) localVarQueryParams.Add("max_width", Configuration.ApiClient.ParameterToString(maxWidth)); // query parameter
            if (nocache != null) localVarQueryParams.Add("nocache", Configuration.ApiClient.ParameterToString(nocache)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesGetPageImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageImages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageImages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageImages)));
            
        }

        /// <summary>
        /// Returns document page image(s) based on input. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of PageImages</returns>
        public async System.Threading.Tasks.Task<PageImages> PagesGetPageImagesAsync (string accountId, string documentId, string envelopeId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null)
        {
             ApiResponse<PageImages> localVarResponse = await PagesGetPageImagesAsyncWithHttpInfo(accountId, documentId, envelopeId, count, dpi, maxHeight, maxWidth, nocache, showChanges, startPosition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns document page image(s) based on input. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of ApiResponse (PageImages)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageImages>> PagesGetPageImagesAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->PagesGetPageImages");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopesApi->PagesGetPageImages");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->PagesGetPageImages");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (dpi != null) localVarQueryParams.Add("dpi", Configuration.ApiClient.ParameterToString(dpi)); // query parameter
            if (maxHeight != null) localVarQueryParams.Add("max_height", Configuration.ApiClient.ParameterToString(maxHeight)); // query parameter
            if (maxWidth != null) localVarQueryParams.Add("max_width", Configuration.ApiClient.ParameterToString(maxWidth)); // query parameter
            if (nocache != null) localVarQueryParams.Add("nocache", Configuration.ApiClient.ParameterToString(nocache)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesGetPageImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageImages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageImages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageImages)));
            
        }

        /// <summary>
        /// Rotates page image from an envelope for display. Rotates page image from an envelope for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns></returns>
        public void PagesPutPageImage (string accountId, string documentId, string envelopeId, string pageNumber, PageRequest pageRequest = null)
        {
             PagesPutPageImageWithHttpInfo(accountId, documentId, envelopeId, pageNumber, pageRequest);
        }

        /// <summary>
        /// Rotates page image from an envelope for display. Rotates page image from an envelope for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PagesPutPageImageWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber, PageRequest pageRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->PagesPutPageImage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopesApi->PagesPutPageImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->PagesPutPageImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling EnvelopesApi->PagesPutPageImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (pageRequest != null && pageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesPutPageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Rotates page image from an envelope for display. Rotates page image from an envelope for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PagesPutPageImageAsync (string accountId, string documentId, string envelopeId, string pageNumber, PageRequest pageRequest = null)
        {
             await PagesPutPageImageAsyncWithHttpInfo(accountId, documentId, envelopeId, pageNumber, pageRequest);

        }

        /// <summary>
        /// Rotates page image from an envelope for display. Rotates page image from an envelope for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PagesPutPageImageAsyncWithHttpInfo (string accountId, string documentId, string envelopeId, string pageNumber, PageRequest pageRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->PagesPutPageImage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling EnvelopesApi->PagesPutPageImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->PagesPutPageImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling EnvelopesApi->PagesPutPageImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (pageRequest != null && pageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesPutPageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the initials image for a user. Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user id and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RecipientsGetRecipientInitialsImage (string accountId, string envelopeId, string recipientId, string includeChrome = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = RecipientsGetRecipientInitialsImageWithHttpInfo(accountId, envelopeId, recipientId, includeChrome);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the initials image for a user. Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user id and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > RecipientsGetRecipientInitialsImageWithHttpInfo (string accountId, string envelopeId, string recipientId, string includeChrome = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->RecipientsGetRecipientInitialsImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->RecipientsGetRecipientInitialsImage");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopesApi->RecipientsGetRecipientInitialsImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/gif"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter
            if (includeChrome != null) localVarQueryParams.Add("include_chrome", Configuration.ApiClient.ParameterToString(includeChrome)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsGetRecipientInitialsImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Gets the initials image for a user. Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user id and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RecipientsGetRecipientInitialsImageAsync (string accountId, string envelopeId, string recipientId, string includeChrome = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await RecipientsGetRecipientInitialsImageAsyncWithHttpInfo(accountId, envelopeId, recipientId, includeChrome);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the initials image for a user. Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user id and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RecipientsGetRecipientInitialsImageAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId, string includeChrome = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->RecipientsGetRecipientInitialsImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->RecipientsGetRecipientInitialsImage");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopesApi->RecipientsGetRecipientInitialsImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/gif"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter
            if (includeChrome != null) localVarQueryParams.Add("include_chrome", Configuration.ApiClient.ParameterToString(includeChrome)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsGetRecipientInitialsImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Gets signature information for a signer or sign-in-person recipient. Retrieves signature information for a signer or sign-in-person recipient.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>UserSignatures</returns>
        public UserSignatures RecipientsGetRecipientSignature (string accountId, string envelopeId, string recipientId)
        {
             ApiResponse<UserSignatures> localVarResponse = RecipientsGetRecipientSignatureWithHttpInfo(accountId, envelopeId, recipientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets signature information for a signer or sign-in-person recipient. Retrieves signature information for a signer or sign-in-person recipient.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>ApiResponse of UserSignatures</returns>
        public ApiResponse< UserSignatures > RecipientsGetRecipientSignatureWithHttpInfo (string accountId, string envelopeId, string recipientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->RecipientsGetRecipientSignature");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->RecipientsGetRecipientSignature");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopesApi->RecipientsGetRecipientSignature");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsGetRecipientSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSignatures>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSignatures) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSignatures)));
            
        }

        /// <summary>
        /// Gets signature information for a signer or sign-in-person recipient. Retrieves signature information for a signer or sign-in-person recipient.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of UserSignatures</returns>
        public async System.Threading.Tasks.Task<UserSignatures> RecipientsGetRecipientSignatureAsync (string accountId, string envelopeId, string recipientId)
        {
             ApiResponse<UserSignatures> localVarResponse = await RecipientsGetRecipientSignatureAsyncWithHttpInfo(accountId, envelopeId, recipientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets signature information for a signer or sign-in-person recipient. Retrieves signature information for a signer or sign-in-person recipient.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of ApiResponse (UserSignatures)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSignatures>> RecipientsGetRecipientSignatureAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->RecipientsGetRecipientSignature");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->RecipientsGetRecipientSignature");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopesApi->RecipientsGetRecipientSignature");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsGetRecipientSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSignatures>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSignatures) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSignatures)));
            
        }

        /// <summary>
        /// Retrieve signature image information for a signer/sign-in-person recipient. Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that don&#39;t properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">When set to **true**, indicates the chromed version of the signature image should be retrieved. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RecipientsGetRecipientSignatureImage (string accountId, string envelopeId, string recipientId, string includeChrome = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = RecipientsGetRecipientSignatureImageWithHttpInfo(accountId, envelopeId, recipientId, includeChrome);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve signature image information for a signer/sign-in-person recipient. Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that don&#39;t properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">When set to **true**, indicates the chromed version of the signature image should be retrieved. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > RecipientsGetRecipientSignatureImageWithHttpInfo (string accountId, string envelopeId, string recipientId, string includeChrome = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->RecipientsGetRecipientSignatureImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->RecipientsGetRecipientSignatureImage");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopesApi->RecipientsGetRecipientSignatureImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/gif"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter
            if (includeChrome != null) localVarQueryParams.Add("include_chrome", Configuration.ApiClient.ParameterToString(includeChrome)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsGetRecipientSignatureImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Retrieve signature image information for a signer/sign-in-person recipient. Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that don&#39;t properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">When set to **true**, indicates the chromed version of the signature image should be retrieved. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RecipientsGetRecipientSignatureImageAsync (string accountId, string envelopeId, string recipientId, string includeChrome = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await RecipientsGetRecipientSignatureImageAsyncWithHttpInfo(accountId, envelopeId, recipientId, includeChrome);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve signature image information for a signer/sign-in-person recipient. Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the account.  The &#x60;signatureIdOrName&#x60; parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (&#x60;signatureId&#x60;), since some names contain characters that don&#39;t properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \&quot;Bob Smith\&quot; to \&quot;Bob%20Smith\&quot;  Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <param name="includeChrome">When set to **true**, indicates the chromed version of the signature image should be retrieved. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RecipientsGetRecipientSignatureImageAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId, string includeChrome = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->RecipientsGetRecipientSignatureImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->RecipientsGetRecipientSignatureImage");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopesApi->RecipientsGetRecipientSignatureImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/gif"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter
            if (includeChrome != null) localVarQueryParams.Add("include_chrome", Configuration.ApiClient.ParameterToString(includeChrome)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsGetRecipientSignatureImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Sets the initials image for an accountless signer. Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns></returns>
        public void RecipientsPutRecipientInitialsImage (string accountId, string envelopeId, string recipientId)
        {
             RecipientsPutRecipientInitialsImageWithHttpInfo(accountId, envelopeId, recipientId);
        }

        /// <summary>
        /// Sets the initials image for an accountless signer. Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RecipientsPutRecipientInitialsImageWithHttpInfo (string accountId, string envelopeId, string recipientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->RecipientsPutRecipientInitialsImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->RecipientsPutRecipientInitialsImage");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopesApi->RecipientsPutRecipientInitialsImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsPutRecipientInitialsImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the initials image for an accountless signer. Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RecipientsPutRecipientInitialsImageAsync (string accountId, string envelopeId, string recipientId)
        {
             await RecipientsPutRecipientInitialsImageAsyncWithHttpInfo(accountId, envelopeId, recipientId);

        }

        /// <summary>
        /// Sets the initials image for an accountless signer. Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RecipientsPutRecipientInitialsImageAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->RecipientsPutRecipientInitialsImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->RecipientsPutRecipientInitialsImage");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopesApi->RecipientsPutRecipientInitialsImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsPutRecipientInitialsImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the signature image for an accountless signer. Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns></returns>
        public void RecipientsPutRecipientSignatureImage (string accountId, string envelopeId, string recipientId)
        {
             RecipientsPutRecipientSignatureImageWithHttpInfo(accountId, envelopeId, recipientId);
        }

        /// <summary>
        /// Sets the signature image for an accountless signer. Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RecipientsPutRecipientSignatureImageWithHttpInfo (string accountId, string envelopeId, string recipientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->RecipientsPutRecipientSignatureImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->RecipientsPutRecipientSignatureImage");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopesApi->RecipientsPutRecipientSignatureImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsPutRecipientSignatureImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the signature image for an accountless signer. Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RecipientsPutRecipientSignatureImageAsync (string accountId, string envelopeId, string recipientId)
        {
             await RecipientsPutRecipientSignatureImageAsyncWithHttpInfo(accountId, envelopeId, recipientId);

        }

        /// <summary>
        /// Sets the signature image for an accountless signer. Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the &#x60;CanSendEnvelope&#x60; property set to **true** and the &#x60;ExpressSendOnly&#x60; property in &#x60;SendingUser&#x60; structure must be set to **false**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RecipientsPutRecipientSignatureImageAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopesApi->RecipientsPutRecipientSignatureImage");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopesApi->RecipientsPutRecipientSignatureImage");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopesApi->RecipientsPutRecipientSignatureImage");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsPutRecipientSignatureImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
