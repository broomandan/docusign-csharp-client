/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvelopeRecipientsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a recipient from an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes a recipient from a &#x60;draft&#x60; or &#x60;sent&#x60; envelope.  If the envelope is \&quot;In Process\&quot; (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>EnvelopeRecipients</returns>
        EnvelopeRecipients RecipientsDeleteRecipient (string accountId, string envelopeId, string recipientId);

        /// <summary>
        /// Deletes a recipient from an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes a recipient from a &#x60;draft&#x60; or &#x60;sent&#x60; envelope.  If the envelope is \&quot;In Process\&quot; (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>ApiResponse of EnvelopeRecipients</returns>
        ApiResponse<EnvelopeRecipients> RecipientsDeleteRecipientWithHttpInfo (string accountId, string envelopeId, string recipientId);
        /// <summary>
        /// Deletes recipients from an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes one or more recipients from a draft or sent envelope. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.  If the envelope is &#x60;In Process&#x60;, meaning that it has been sent and has not  been completed or voided, recipients that have completed their actions cannot be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>EnvelopeRecipients</returns>
        EnvelopeRecipients RecipientsDeleteRecipients (string accountId, string envelopeId, EnvelopeRecipients envelopeRecipients = null);

        /// <summary>
        /// Deletes recipients from an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes one or more recipients from a draft or sent envelope. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.  If the envelope is &#x60;In Process&#x60;, meaning that it has been sent and has not  been completed or voided, recipients that have completed their actions cannot be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeRecipients</returns>
        ApiResponse<EnvelopeRecipients> RecipientsDeleteRecipientsWithHttpInfo (string accountId, string envelopeId, EnvelopeRecipients envelopeRecipients = null);
        /// <summary>
        /// Gets the status of recipients for an envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list.   The &#x60;currentRoutingOrder&#x60; property of the response contains the &#x60;routingOrder&#x60; value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeAnchorTabLocations"> When set to **true** and &#x60;include_tabs&#x60; is set to **true**, all tabs with anchor tab properties are included in the response.  (optional)</param>
        /// <param name="includeExtended"> When set to **true**, the extended properties are included in the response.  (optional)</param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeTabs">When set to **true**, the tab information associated with the recipient is included in the response. (optional)</param>
        /// <returns>EnvelopeRecipients</returns>
        EnvelopeRecipients RecipientsGetRecipients (string accountId, string envelopeId, string includeAnchorTabLocations = null, string includeExtended = null, string includeMetadata = null, string includeTabs = null);

        /// <summary>
        /// Gets the status of recipients for an envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list.   The &#x60;currentRoutingOrder&#x60; property of the response contains the &#x60;routingOrder&#x60; value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeAnchorTabLocations"> When set to **true** and &#x60;include_tabs&#x60; is set to **true**, all tabs with anchor tab properties are included in the response.  (optional)</param>
        /// <param name="includeExtended"> When set to **true**, the extended properties are included in the response.  (optional)</param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeTabs">When set to **true**, the tab information associated with the recipient is included in the response. (optional)</param>
        /// <returns>ApiResponse of EnvelopeRecipients</returns>
        ApiResponse<EnvelopeRecipients> RecipientsGetRecipientsWithHttpInfo (string accountId, string envelopeId, string includeAnchorTabLocations = null, string includeExtended = null, string includeMetadata = null, string includeTabs = null);
        /// <summary>
        /// Adds one or more recipients to an envelope.
        /// </summary>
        /// <remarks>
        /// Adds one or more recipients to an envelope.  For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient, an email is only sent if the optional &#x60;resend_envelope&#x60; query string is set to **true**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>EnvelopeRecipients</returns>
        EnvelopeRecipients RecipientsPostRecipients (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null);

        /// <summary>
        /// Adds one or more recipients to an envelope.
        /// </summary>
        /// <remarks>
        /// Adds one or more recipients to an envelope.  For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient, an email is only sent if the optional &#x60;resend_envelope&#x60; query string is set to **true**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeRecipients</returns>
        ApiResponse<EnvelopeRecipients> RecipientsPostRecipientsWithHttpInfo (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null);
        /// <summary>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope.
        /// </summary>
        /// <remarks>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope.   For draft envelopes, you can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.  Once an envelope has been sent, you can only edit: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;signerName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, and &#x60;deliveryMethod&#x60;. You can also select to resend an envelope by using the &#x60;resend_envelope&#x60; option.  If you send information for a recipient that does not already exist in a draft envelope, the recipient is added to the envelope (similar to the POST).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>RecipientsUpdateSummary</returns>
        RecipientsUpdateSummary RecipientsPutRecipients (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null);

        /// <summary>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope.
        /// </summary>
        /// <remarks>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope.   For draft envelopes, you can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.  Once an envelope has been sent, you can only edit: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;signerName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, and &#x60;deliveryMethod&#x60;. You can also select to resend an envelope by using the &#x60;resend_envelope&#x60; option.  If you send information for a recipient that does not already exist in a draft envelope, the recipient is added to the envelope (similar to the POST).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>ApiResponse of RecipientsUpdateSummary</returns>
        ApiResponse<RecipientsUpdateSummary> RecipientsPutRecipientsWithHttpInfo (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a recipient from an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes a recipient from a &#x60;draft&#x60; or &#x60;sent&#x60; envelope.  If the envelope is \&quot;In Process\&quot; (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of EnvelopeRecipients</returns>
        System.Threading.Tasks.Task<EnvelopeRecipients> RecipientsDeleteRecipientAsync (string accountId, string envelopeId, string recipientId);

        /// <summary>
        /// Deletes a recipient from an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes a recipient from a &#x60;draft&#x60; or &#x60;sent&#x60; envelope.  If the envelope is \&quot;In Process\&quot; (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of ApiResponse (EnvelopeRecipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeRecipients>> RecipientsDeleteRecipientAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId);
        /// <summary>
        /// Deletes recipients from an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes one or more recipients from a draft or sent envelope. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.  If the envelope is &#x60;In Process&#x60;, meaning that it has been sent and has not  been completed or voided, recipients that have completed their actions cannot be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of EnvelopeRecipients</returns>
        System.Threading.Tasks.Task<EnvelopeRecipients> RecipientsDeleteRecipientsAsync (string accountId, string envelopeId, EnvelopeRecipients envelopeRecipients = null);

        /// <summary>
        /// Deletes recipients from an envelope.
        /// </summary>
        /// <remarks>
        /// Deletes one or more recipients from a draft or sent envelope. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.  If the envelope is &#x60;In Process&#x60;, meaning that it has been sent and has not  been completed or voided, recipients that have completed their actions cannot be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeRecipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeRecipients>> RecipientsDeleteRecipientsAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeRecipients envelopeRecipients = null);
        /// <summary>
        /// Gets the status of recipients for an envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list.   The &#x60;currentRoutingOrder&#x60; property of the response contains the &#x60;routingOrder&#x60; value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeAnchorTabLocations"> When set to **true** and &#x60;include_tabs&#x60; is set to **true**, all tabs with anchor tab properties are included in the response.  (optional)</param>
        /// <param name="includeExtended"> When set to **true**, the extended properties are included in the response.  (optional)</param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeTabs">When set to **true**, the tab information associated with the recipient is included in the response. (optional)</param>
        /// <returns>Task of EnvelopeRecipients</returns>
        System.Threading.Tasks.Task<EnvelopeRecipients> RecipientsGetRecipientsAsync (string accountId, string envelopeId, string includeAnchorTabLocations = null, string includeExtended = null, string includeMetadata = null, string includeTabs = null);

        /// <summary>
        /// Gets the status of recipients for an envelope.
        /// </summary>
        /// <remarks>
        /// Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list.   The &#x60;currentRoutingOrder&#x60; property of the response contains the &#x60;routingOrder&#x60; value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeAnchorTabLocations"> When set to **true** and &#x60;include_tabs&#x60; is set to **true**, all tabs with anchor tab properties are included in the response.  (optional)</param>
        /// <param name="includeExtended"> When set to **true**, the extended properties are included in the response.  (optional)</param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeTabs">When set to **true**, the tab information associated with the recipient is included in the response. (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeRecipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeRecipients>> RecipientsGetRecipientsAsyncWithHttpInfo (string accountId, string envelopeId, string includeAnchorTabLocations = null, string includeExtended = null, string includeMetadata = null, string includeTabs = null);
        /// <summary>
        /// Adds one or more recipients to an envelope.
        /// </summary>
        /// <remarks>
        /// Adds one or more recipients to an envelope.  For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient, an email is only sent if the optional &#x60;resend_envelope&#x60; query string is set to **true**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of EnvelopeRecipients</returns>
        System.Threading.Tasks.Task<EnvelopeRecipients> RecipientsPostRecipientsAsync (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null);

        /// <summary>
        /// Adds one or more recipients to an envelope.
        /// </summary>
        /// <remarks>
        /// Adds one or more recipients to an envelope.  For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient, an email is only sent if the optional &#x60;resend_envelope&#x60; query string is set to **true**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeRecipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeRecipients>> RecipientsPostRecipientsAsyncWithHttpInfo (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null);
        /// <summary>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope.
        /// </summary>
        /// <remarks>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope.   For draft envelopes, you can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.  Once an envelope has been sent, you can only edit: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;signerName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, and &#x60;deliveryMethod&#x60;. You can also select to resend an envelope by using the &#x60;resend_envelope&#x60; option.  If you send information for a recipient that does not already exist in a draft envelope, the recipient is added to the envelope (similar to the POST).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of RecipientsUpdateSummary</returns>
        System.Threading.Tasks.Task<RecipientsUpdateSummary> RecipientsPutRecipientsAsync (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null);

        /// <summary>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope.
        /// </summary>
        /// <remarks>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope.   For draft envelopes, you can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.  Once an envelope has been sent, you can only edit: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;signerName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, and &#x60;deliveryMethod&#x60;. You can also select to resend an envelope by using the &#x60;resend_envelope&#x60; option.  If you send information for a recipient that does not already exist in a draft envelope, the recipient is added to the envelope (similar to the POST).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of ApiResponse (RecipientsUpdateSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecipientsUpdateSummary>> RecipientsPutRecipientsAsyncWithHttpInfo (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnvelopeRecipientsApi : IEnvelopeRecipientsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeRecipientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvelopeRecipientsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeRecipientsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvelopeRecipientsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a recipient from an envelope. Deletes a recipient from a &#x60;draft&#x60; or &#x60;sent&#x60; envelope.  If the envelope is \&quot;In Process\&quot; (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>EnvelopeRecipients</returns>
        public EnvelopeRecipients RecipientsDeleteRecipient (string accountId, string envelopeId, string recipientId)
        {
             ApiResponse<EnvelopeRecipients> localVarResponse = RecipientsDeleteRecipientWithHttpInfo(accountId, envelopeId, recipientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a recipient from an envelope. Deletes a recipient from a &#x60;draft&#x60; or &#x60;sent&#x60; envelope.  If the envelope is \&quot;In Process\&quot; (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>ApiResponse of EnvelopeRecipients</returns>
        public ApiResponse< EnvelopeRecipients > RecipientsDeleteRecipientWithHttpInfo (string accountId, string envelopeId, string recipientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeRecipientsApi->RecipientsDeleteRecipient");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeRecipientsApi->RecipientsDeleteRecipient");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopeRecipientsApi->RecipientsDeleteRecipient");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsDeleteRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeRecipients) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeRecipients)));
            
        }

        /// <summary>
        /// Deletes a recipient from an envelope. Deletes a recipient from a &#x60;draft&#x60; or &#x60;sent&#x60; envelope.  If the envelope is \&quot;In Process\&quot; (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of EnvelopeRecipients</returns>
        public async System.Threading.Tasks.Task<EnvelopeRecipients> RecipientsDeleteRecipientAsync (string accountId, string envelopeId, string recipientId)
        {
             ApiResponse<EnvelopeRecipients> localVarResponse = await RecipientsDeleteRecipientAsyncWithHttpInfo(accountId, envelopeId, recipientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a recipient from an envelope. Deletes a recipient from a &#x60;draft&#x60; or &#x60;sent&#x60; envelope.  If the envelope is \&quot;In Process\&quot; (has been sent and is not completed or voided), recipients that have completed their actions cannot be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="recipientId">The &#x60;recipientId&#x60; used when the envelope or template was created.</param>
        /// <returns>Task of ApiResponse (EnvelopeRecipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeRecipients>> RecipientsDeleteRecipientAsyncWithHttpInfo (string accountId, string envelopeId, string recipientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeRecipientsApi->RecipientsDeleteRecipient");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeRecipientsApi->RecipientsDeleteRecipient");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling EnvelopeRecipientsApi->RecipientsDeleteRecipient");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (recipientId != null) localVarPathParams.Add("recipientId", Configuration.ApiClient.ParameterToString(recipientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsDeleteRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeRecipients) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeRecipients)));
            
        }

        /// <summary>
        /// Deletes recipients from an envelope. Deletes one or more recipients from a draft or sent envelope. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.  If the envelope is &#x60;In Process&#x60;, meaning that it has been sent and has not  been completed or voided, recipients that have completed their actions cannot be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>EnvelopeRecipients</returns>
        public EnvelopeRecipients RecipientsDeleteRecipients (string accountId, string envelopeId, EnvelopeRecipients envelopeRecipients = null)
        {
             ApiResponse<EnvelopeRecipients> localVarResponse = RecipientsDeleteRecipientsWithHttpInfo(accountId, envelopeId, envelopeRecipients);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes recipients from an envelope. Deletes one or more recipients from a draft or sent envelope. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.  If the envelope is &#x60;In Process&#x60;, meaning that it has been sent and has not  been completed or voided, recipients that have completed their actions cannot be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeRecipients</returns>
        public ApiResponse< EnvelopeRecipients > RecipientsDeleteRecipientsWithHttpInfo (string accountId, string envelopeId, EnvelopeRecipients envelopeRecipients = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeRecipientsApi->RecipientsDeleteRecipients");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeRecipientsApi->RecipientsDeleteRecipients");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeRecipients != null && envelopeRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeRecipients; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsDeleteRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeRecipients) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeRecipients)));
            
        }

        /// <summary>
        /// Deletes recipients from an envelope. Deletes one or more recipients from a draft or sent envelope. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.  If the envelope is &#x60;In Process&#x60;, meaning that it has been sent and has not  been completed or voided, recipients that have completed their actions cannot be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of EnvelopeRecipients</returns>
        public async System.Threading.Tasks.Task<EnvelopeRecipients> RecipientsDeleteRecipientsAsync (string accountId, string envelopeId, EnvelopeRecipients envelopeRecipients = null)
        {
             ApiResponse<EnvelopeRecipients> localVarResponse = await RecipientsDeleteRecipientsAsyncWithHttpInfo(accountId, envelopeId, envelopeRecipients);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes recipients from an envelope. Deletes one or more recipients from a draft or sent envelope. Recipients to be deleted are listed in the request, with the &#x60;recipientId&#x60; being used as the key for deleting recipients.  If the envelope is &#x60;In Process&#x60;, meaning that it has been sent and has not  been completed or voided, recipients that have completed their actions cannot be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeRecipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeRecipients>> RecipientsDeleteRecipientsAsyncWithHttpInfo (string accountId, string envelopeId, EnvelopeRecipients envelopeRecipients = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeRecipientsApi->RecipientsDeleteRecipients");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeRecipientsApi->RecipientsDeleteRecipients");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (envelopeRecipients != null && envelopeRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeRecipients; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsDeleteRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeRecipients) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeRecipients)));
            
        }

        /// <summary>
        /// Gets the status of recipients for an envelope. Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list.   The &#x60;currentRoutingOrder&#x60; property of the response contains the &#x60;routingOrder&#x60; value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeAnchorTabLocations"> When set to **true** and &#x60;include_tabs&#x60; is set to **true**, all tabs with anchor tab properties are included in the response.  (optional)</param>
        /// <param name="includeExtended"> When set to **true**, the extended properties are included in the response.  (optional)</param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeTabs">When set to **true**, the tab information associated with the recipient is included in the response. (optional)</param>
        /// <returns>EnvelopeRecipients</returns>
        public EnvelopeRecipients RecipientsGetRecipients (string accountId, string envelopeId, string includeAnchorTabLocations = null, string includeExtended = null, string includeMetadata = null, string includeTabs = null)
        {
             ApiResponse<EnvelopeRecipients> localVarResponse = RecipientsGetRecipientsWithHttpInfo(accountId, envelopeId, includeAnchorTabLocations, includeExtended, includeMetadata, includeTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of recipients for an envelope. Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list.   The &#x60;currentRoutingOrder&#x60; property of the response contains the &#x60;routingOrder&#x60; value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeAnchorTabLocations"> When set to **true** and &#x60;include_tabs&#x60; is set to **true**, all tabs with anchor tab properties are included in the response.  (optional)</param>
        /// <param name="includeExtended"> When set to **true**, the extended properties are included in the response.  (optional)</param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeTabs">When set to **true**, the tab information associated with the recipient is included in the response. (optional)</param>
        /// <returns>ApiResponse of EnvelopeRecipients</returns>
        public ApiResponse< EnvelopeRecipients > RecipientsGetRecipientsWithHttpInfo (string accountId, string envelopeId, string includeAnchorTabLocations = null, string includeExtended = null, string includeMetadata = null, string includeTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeRecipientsApi->RecipientsGetRecipients");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeRecipientsApi->RecipientsGetRecipients");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (includeAnchorTabLocations != null) localVarQueryParams.Add("include_anchor_tab_locations", Configuration.ApiClient.ParameterToString(includeAnchorTabLocations)); // query parameter
            if (includeExtended != null) localVarQueryParams.Add("include_extended", Configuration.ApiClient.ParameterToString(includeExtended)); // query parameter
            if (includeMetadata != null) localVarQueryParams.Add("include_metadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter
            if (includeTabs != null) localVarQueryParams.Add("include_tabs", Configuration.ApiClient.ParameterToString(includeTabs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsGetRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeRecipients) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeRecipients)));
            
        }

        /// <summary>
        /// Gets the status of recipients for an envelope. Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list.   The &#x60;currentRoutingOrder&#x60; property of the response contains the &#x60;routingOrder&#x60; value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeAnchorTabLocations"> When set to **true** and &#x60;include_tabs&#x60; is set to **true**, all tabs with anchor tab properties are included in the response.  (optional)</param>
        /// <param name="includeExtended"> When set to **true**, the extended properties are included in the response.  (optional)</param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeTabs">When set to **true**, the tab information associated with the recipient is included in the response. (optional)</param>
        /// <returns>Task of EnvelopeRecipients</returns>
        public async System.Threading.Tasks.Task<EnvelopeRecipients> RecipientsGetRecipientsAsync (string accountId, string envelopeId, string includeAnchorTabLocations = null, string includeExtended = null, string includeMetadata = null, string includeTabs = null)
        {
             ApiResponse<EnvelopeRecipients> localVarResponse = await RecipientsGetRecipientsAsyncWithHttpInfo(accountId, envelopeId, includeAnchorTabLocations, includeExtended, includeMetadata, includeTabs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the status of recipients for an envelope. Retrieves the status of all recipients in a single envelope and identifies the current recipient in the routing list.   The &#x60;currentRoutingOrder&#x60; property of the response contains the &#x60;routingOrder&#x60; value of the current recipient indicating that the envelope has been sent to the recipient, but the recipient has not completed their actions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="includeAnchorTabLocations"> When set to **true** and &#x60;include_tabs&#x60; is set to **true**, all tabs with anchor tab properties are included in the response.  (optional)</param>
        /// <param name="includeExtended"> When set to **true**, the extended properties are included in the response.  (optional)</param>
        /// <param name="includeMetadata">Reserved for DocuSign.  (optional)</param>
        /// <param name="includeTabs">When set to **true**, the tab information associated with the recipient is included in the response. (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeRecipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeRecipients>> RecipientsGetRecipientsAsyncWithHttpInfo (string accountId, string envelopeId, string includeAnchorTabLocations = null, string includeExtended = null, string includeMetadata = null, string includeTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeRecipientsApi->RecipientsGetRecipients");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeRecipientsApi->RecipientsGetRecipients");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (includeAnchorTabLocations != null) localVarQueryParams.Add("include_anchor_tab_locations", Configuration.ApiClient.ParameterToString(includeAnchorTabLocations)); // query parameter
            if (includeExtended != null) localVarQueryParams.Add("include_extended", Configuration.ApiClient.ParameterToString(includeExtended)); // query parameter
            if (includeMetadata != null) localVarQueryParams.Add("include_metadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter
            if (includeTabs != null) localVarQueryParams.Add("include_tabs", Configuration.ApiClient.ParameterToString(includeTabs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsGetRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeRecipients) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeRecipients)));
            
        }

        /// <summary>
        /// Adds one or more recipients to an envelope. Adds one or more recipients to an envelope.  For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient, an email is only sent if the optional &#x60;resend_envelope&#x60; query string is set to **true**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>EnvelopeRecipients</returns>
        public EnvelopeRecipients RecipientsPostRecipients (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null)
        {
             ApiResponse<EnvelopeRecipients> localVarResponse = RecipientsPostRecipientsWithHttpInfo(accountId, envelopeId, resendEnvelope, envelopeRecipients);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds one or more recipients to an envelope. Adds one or more recipients to an envelope.  For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient, an email is only sent if the optional &#x60;resend_envelope&#x60; query string is set to **true**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeRecipients</returns>
        public ApiResponse< EnvelopeRecipients > RecipientsPostRecipientsWithHttpInfo (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeRecipientsApi->RecipientsPostRecipients");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeRecipientsApi->RecipientsPostRecipients");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (resendEnvelope != null) localVarQueryParams.Add("resend_envelope", Configuration.ApiClient.ParameterToString(resendEnvelope)); // query parameter
            if (envelopeRecipients != null && envelopeRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeRecipients; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsPostRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeRecipients) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeRecipients)));
            
        }

        /// <summary>
        /// Adds one or more recipients to an envelope. Adds one or more recipients to an envelope.  For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient, an email is only sent if the optional &#x60;resend_envelope&#x60; query string is set to **true**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of EnvelopeRecipients</returns>
        public async System.Threading.Tasks.Task<EnvelopeRecipients> RecipientsPostRecipientsAsync (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null)
        {
             ApiResponse<EnvelopeRecipients> localVarResponse = await RecipientsPostRecipientsAsyncWithHttpInfo(accountId, envelopeId, resendEnvelope, envelopeRecipients);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds one or more recipients to an envelope. Adds one or more recipients to an envelope.  For an in process envelope, one that has been sent and has not been completed or voided, an email is sent to a new recipient when they are reached in the routing order. If the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient, an email is only sent if the optional &#x60;resend_envelope&#x60; query string is set to **true**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeRecipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeRecipients>> RecipientsPostRecipientsAsyncWithHttpInfo (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeRecipientsApi->RecipientsPostRecipients");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeRecipientsApi->RecipientsPostRecipients");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (resendEnvelope != null) localVarQueryParams.Add("resend_envelope", Configuration.ApiClient.ParameterToString(resendEnvelope)); // query parameter
            if (envelopeRecipients != null && envelopeRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeRecipients; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsPostRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeRecipients) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeRecipients)));
            
        }

        /// <summary>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope. Updates recipients in a draft envelope or corrects recipient information for an in process envelope.   For draft envelopes, you can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.  Once an envelope has been sent, you can only edit: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;signerName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, and &#x60;deliveryMethod&#x60;. You can also select to resend an envelope by using the &#x60;resend_envelope&#x60; option.  If you send information for a recipient that does not already exist in a draft envelope, the recipient is added to the envelope (similar to the POST).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>RecipientsUpdateSummary</returns>
        public RecipientsUpdateSummary RecipientsPutRecipients (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null)
        {
             ApiResponse<RecipientsUpdateSummary> localVarResponse = RecipientsPutRecipientsWithHttpInfo(accountId, envelopeId, resendEnvelope, envelopeRecipients);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope. Updates recipients in a draft envelope or corrects recipient information for an in process envelope.   For draft envelopes, you can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.  Once an envelope has been sent, you can only edit: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;signerName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, and &#x60;deliveryMethod&#x60;. You can also select to resend an envelope by using the &#x60;resend_envelope&#x60; option.  If you send information for a recipient that does not already exist in a draft envelope, the recipient is added to the envelope (similar to the POST).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>ApiResponse of RecipientsUpdateSummary</returns>
        public ApiResponse< RecipientsUpdateSummary > RecipientsPutRecipientsWithHttpInfo (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeRecipientsApi->RecipientsPutRecipients");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeRecipientsApi->RecipientsPutRecipients");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (resendEnvelope != null) localVarQueryParams.Add("resend_envelope", Configuration.ApiClient.ParameterToString(resendEnvelope)); // query parameter
            if (envelopeRecipients != null && envelopeRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeRecipients; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsPutRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecipientsUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecipientsUpdateSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecipientsUpdateSummary)));
            
        }

        /// <summary>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope. Updates recipients in a draft envelope or corrects recipient information for an in process envelope.   For draft envelopes, you can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.  Once an envelope has been sent, you can only edit: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;signerName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, and &#x60;deliveryMethod&#x60;. You can also select to resend an envelope by using the &#x60;resend_envelope&#x60; option.  If you send information for a recipient that does not already exist in a draft envelope, the recipient is added to the envelope (similar to the POST).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of RecipientsUpdateSummary</returns>
        public async System.Threading.Tasks.Task<RecipientsUpdateSummary> RecipientsPutRecipientsAsync (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null)
        {
             ApiResponse<RecipientsUpdateSummary> localVarResponse = await RecipientsPutRecipientsAsyncWithHttpInfo(accountId, envelopeId, resendEnvelope, envelopeRecipients);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates recipients in a draft envelope or corrects recipient information for an in process envelope. Updates recipients in a draft envelope or corrects recipient information for an in process envelope.   For draft envelopes, you can edit the following properties: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, &#x60;deliveryMethod&#x60;, &#x60;accessCode&#x60;, and &#x60;requireIdLookup&#x60;.  Once an envelope has been sent, you can only edit: &#x60;email&#x60;, &#x60;userName&#x60;, &#x60;signerName&#x60;, &#x60;routingOrder&#x60;, &#x60;faxNumber&#x60;, and &#x60;deliveryMethod&#x60;. You can also select to resend an envelope by using the &#x60;resend_envelope&#x60; option.  If you send information for a recipient that does not already exist in a draft envelope, the recipient is added to the envelope (similar to the POST).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="envelopeId">The envelope&#39;s GUID. Eg 93be49ab-afa0-4adf-933c-f752070d71ec </param>
        /// <param name="resendEnvelope">When set to **true**, resends the   envelope if the new recipient&#39;s routing order is before or the same as the envelope&#39;s next recipient. (optional)</param>
        /// <param name="envelopeRecipients"> (optional)</param>
        /// <returns>Task of ApiResponse (RecipientsUpdateSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecipientsUpdateSummary>> RecipientsPutRecipientsAsyncWithHttpInfo (string accountId, string envelopeId, string resendEnvelope = null, EnvelopeRecipients envelopeRecipients = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling EnvelopeRecipientsApi->RecipientsPutRecipients");
            // verify the required parameter 'envelopeId' is set
            if (envelopeId == null)
                throw new ApiException(400, "Missing required parameter 'envelopeId' when calling EnvelopeRecipientsApi->RecipientsPutRecipients");

            var localVarPath = "/v2/accounts/{accountId}/envelopes/{envelopeId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (envelopeId != null) localVarPathParams.Add("envelopeId", Configuration.ApiClient.ParameterToString(envelopeId)); // path parameter
            if (resendEnvelope != null) localVarQueryParams.Add("resend_envelope", Configuration.ApiClient.ParameterToString(resendEnvelope)); // query parameter
            if (envelopeRecipients != null && envelopeRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(envelopeRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = envelopeRecipients; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecipientsPutRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecipientsUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecipientsUpdateSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecipientsUpdateSummary)));
            
        }

    }
}
