/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConnectConfigurationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes the specified connect configuration.
        /// </summary>
        /// <remarks>
        /// Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns></returns>
        void ConnectDeleteConnectConfig (string accountId, string connectId);

        /// <summary>
        /// Deletes the specified connect configuration.
        /// </summary>
        /// <remarks>
        /// Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConnectDeleteConnectConfigWithHttpInfo (string accountId, string connectId);
        /// <summary>
        /// Get information on a Connect Configuration
        /// </summary>
        /// <remarks>
        /// Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ConnectConfigResults</returns>
        ConnectConfigResults ConnectGetConnectConfig (string accountId, string connectId);

        /// <summary>
        /// Get information on a Connect Configuration
        /// </summary>
        /// <remarks>
        /// Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ApiResponse of ConnectConfigResults</returns>
        ApiResponse<ConnectConfigResults> ConnectGetConnectConfigWithHttpInfo (string accountId, string connectId);
        /// <summary>
        /// Get Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ConnectConfigResults</returns>
        ConnectConfigResults ConnectGetConnectConfigs (string accountId);

        /// <summary>
        /// Get Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of ConnectConfigResults</returns>
        ApiResponse<ConnectConfigResults> ConnectGetConnectConfigsWithHttpInfo (string accountId);
        /// <summary>
        /// Returns users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// Returns users from the configured Connect service.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="listIncludedUsers"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>IntegratedUserInfoList</returns>
        IntegratedUserInfoList ConnectGetConnectUsers (string accountId, string connectId, string count = null, string emailSubstring = null, string listIncludedUsers = null, string startPosition = null, string status = null, string userNameSubstring = null);

        /// <summary>
        /// Returns users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// Returns users from the configured Connect service.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="listIncludedUsers"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>ApiResponse of IntegratedUserInfoList</returns>
        ApiResponse<IntegratedUserInfoList> ConnectGetConnectUsersWithHttpInfo (string accountId, string connectId, string count = null, string emailSubstring = null, string listIncludedUsers = null, string startPosition = null, string status = null, string userNameSubstring = null);
        /// <summary>
        /// Creates a connect configuration for the specified account.
        /// </summary>
        /// <remarks>
        /// Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>ConnectConfigurations</returns>
        ConnectConfigurations ConnectPostConnectConfiguration (string accountId, ConnectConfigurations connectConfigurations = null);

        /// <summary>
        /// Creates a connect configuration for the specified account.
        /// </summary>
        /// <remarks>
        /// Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>ApiResponse of ConnectConfigurations</returns>
        ApiResponse<ConnectConfigurations> ConnectPostConnectConfigurationWithHttpInfo (string accountId, ConnectConfigurations connectConfigurations = null);
        /// <summary>
        /// Updates a specified Connect configuration.
        /// </summary>
        /// <remarks>
        /// Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>ConnectConfigurations</returns>
        ConnectConfigurations ConnectPutConnectConfiguration (string accountId, ConnectConfigurations connectConfigurations = null);

        /// <summary>
        /// Updates a specified Connect configuration.
        /// </summary>
        /// <remarks>
        /// Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>ApiResponse of ConnectConfigurations</returns>
        ApiResponse<ConnectConfigurations> ConnectPutConnectConfigurationWithHttpInfo (string accountId, ConnectConfigurations connectConfigurations = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes the specified connect configuration.
        /// </summary>
        /// <remarks>
        /// Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConnectDeleteConnectConfigAsync (string accountId, string connectId);

        /// <summary>
        /// Deletes the specified connect configuration.
        /// </summary>
        /// <remarks>
        /// Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConnectDeleteConnectConfigAsyncWithHttpInfo (string accountId, string connectId);
        /// <summary>
        /// Get information on a Connect Configuration
        /// </summary>
        /// <remarks>
        /// Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ConnectConfigResults</returns>
        System.Threading.Tasks.Task<ConnectConfigResults> ConnectGetConnectConfigAsync (string accountId, string connectId);

        /// <summary>
        /// Get information on a Connect Configuration
        /// </summary>
        /// <remarks>
        /// Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ApiResponse (ConnectConfigResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectConfigResults>> ConnectGetConnectConfigAsyncWithHttpInfo (string accountId, string connectId);
        /// <summary>
        /// Get Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ConnectConfigResults</returns>
        System.Threading.Tasks.Task<ConnectConfigResults> ConnectGetConnectConfigsAsync (string accountId);

        /// <summary>
        /// Get Connect Configuration Information
        /// </summary>
        /// <remarks>
        /// Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse (ConnectConfigResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectConfigResults>> ConnectGetConnectConfigsAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Returns users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// Returns users from the configured Connect service.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="listIncludedUsers"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>Task of IntegratedUserInfoList</returns>
        System.Threading.Tasks.Task<IntegratedUserInfoList> ConnectGetConnectUsersAsync (string accountId, string connectId, string count = null, string emailSubstring = null, string listIncludedUsers = null, string startPosition = null, string status = null, string userNameSubstring = null);

        /// <summary>
        /// Returns users from the configured Connect service.
        /// </summary>
        /// <remarks>
        /// Returns users from the configured Connect service.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="listIncludedUsers"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>Task of ApiResponse (IntegratedUserInfoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegratedUserInfoList>> ConnectGetConnectUsersAsyncWithHttpInfo (string accountId, string connectId, string count = null, string emailSubstring = null, string listIncludedUsers = null, string startPosition = null, string status = null, string userNameSubstring = null);
        /// <summary>
        /// Creates a connect configuration for the specified account.
        /// </summary>
        /// <remarks>
        /// Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>Task of ConnectConfigurations</returns>
        System.Threading.Tasks.Task<ConnectConfigurations> ConnectPostConnectConfigurationAsync (string accountId, ConnectConfigurations connectConfigurations = null);

        /// <summary>
        /// Creates a connect configuration for the specified account.
        /// </summary>
        /// <remarks>
        /// Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectConfigurations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectConfigurations>> ConnectPostConnectConfigurationAsyncWithHttpInfo (string accountId, ConnectConfigurations connectConfigurations = null);
        /// <summary>
        /// Updates a specified Connect configuration.
        /// </summary>
        /// <remarks>
        /// Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>Task of ConnectConfigurations</returns>
        System.Threading.Tasks.Task<ConnectConfigurations> ConnectPutConnectConfigurationAsync (string accountId, ConnectConfigurations connectConfigurations = null);

        /// <summary>
        /// Updates a specified Connect configuration.
        /// </summary>
        /// <remarks>
        /// Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectConfigurations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectConfigurations>> ConnectPutConnectConfigurationAsyncWithHttpInfo (string accountId, ConnectConfigurations connectConfigurations = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConnectConfigurationsApi : IConnectConfigurationsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectConfigurationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectConfigurationsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectConfigurationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConnectConfigurationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes the specified connect configuration. Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns></returns>
        public void ConnectDeleteConnectConfig (string accountId, string connectId)
        {
             ConnectDeleteConnectConfigWithHttpInfo(accountId, connectId);
        }

        /// <summary>
        /// Deletes the specified connect configuration. Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConnectDeleteConnectConfigWithHttpInfo (string accountId, string connectId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectDeleteConnectConfig");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectConfigurationsApi->ConnectDeleteConnectConfig");

            var localVarPath = "/v2/accounts/{accountId}/connect/{connectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", Configuration.ApiClient.ParameterToString(connectId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectDeleteConnectConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified connect configuration. Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConnectDeleteConnectConfigAsync (string accountId, string connectId)
        {
             await ConnectDeleteConnectConfigAsyncWithHttpInfo(accountId, connectId);

        }

        /// <summary>
        /// Deletes the specified connect configuration. Deletes the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function.    
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConnectDeleteConnectConfigAsyncWithHttpInfo (string accountId, string connectId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectDeleteConnectConfig");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectConfigurationsApi->ConnectDeleteConnectConfig");

            var localVarPath = "/v2/accounts/{accountId}/connect/{connectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", Configuration.ApiClient.ParameterToString(connectId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectDeleteConnectConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get information on a Connect Configuration Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ConnectConfigResults</returns>
        public ConnectConfigResults ConnectGetConnectConfig (string accountId, string connectId)
        {
             ApiResponse<ConnectConfigResults> localVarResponse = ConnectGetConnectConfigWithHttpInfo(accountId, connectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information on a Connect Configuration Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>ApiResponse of ConnectConfigResults</returns>
        public ApiResponse< ConnectConfigResults > ConnectGetConnectConfigWithHttpInfo (string accountId, string connectId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectGetConnectConfig");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectConfigurationsApi->ConnectGetConnectConfig");

            var localVarPath = "/v2/accounts/{accountId}/connect/{connectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", Configuration.ApiClient.ParameterToString(connectId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectGetConnectConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectConfigResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectConfigResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigResults)));
            
        }

        /// <summary>
        /// Get information on a Connect Configuration Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ConnectConfigResults</returns>
        public async System.Threading.Tasks.Task<ConnectConfigResults> ConnectGetConnectConfigAsync (string accountId, string connectId)
        {
             ApiResponse<ConnectConfigResults> localVarResponse = await ConnectGetConnectConfigAsyncWithHttpInfo(accountId, connectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information on a Connect Configuration Retrieves the information for the specified DocuSign Connect configuration.  ###### Note: Connect must be enabled for your account to use this function. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <returns>Task of ApiResponse (ConnectConfigResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectConfigResults>> ConnectGetConnectConfigAsyncWithHttpInfo (string accountId, string connectId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectGetConnectConfig");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectConfigurationsApi->ConnectGetConnectConfig");

            var localVarPath = "/v2/accounts/{accountId}/connect/{connectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", Configuration.ApiClient.ParameterToString(connectId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectGetConnectConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectConfigResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectConfigResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigResults)));
            
        }

        /// <summary>
        /// Get Connect Configuration Information Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ConnectConfigResults</returns>
        public ConnectConfigResults ConnectGetConnectConfigs (string accountId)
        {
             ApiResponse<ConnectConfigResults> localVarResponse = ConnectGetConnectConfigsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connect Configuration Information Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>ApiResponse of ConnectConfigResults</returns>
        public ApiResponse< ConnectConfigResults > ConnectGetConnectConfigsWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectGetConnectConfigs");

            var localVarPath = "/v2/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectGetConnectConfigs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectConfigResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectConfigResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigResults)));
            
        }

        /// <summary>
        /// Get Connect Configuration Information Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ConnectConfigResults</returns>
        public async System.Threading.Tasks.Task<ConnectConfigResults> ConnectGetConnectConfigsAsync (string accountId)
        {
             ApiResponse<ConnectConfigResults> localVarResponse = await ConnectGetConnectConfigsAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Connect Configuration Information Retrieves all the DocuSign Custom Connect definitions for the specified account.  ###### Note: Connect must be enabled for your account to use this function. This does not retrieve information for Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <returns>Task of ApiResponse (ConnectConfigResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectConfigResults>> ConnectGetConnectConfigsAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectGetConnectConfigs");

            var localVarPath = "/v2/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectGetConnectConfigs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectConfigResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectConfigResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigResults)));
            
        }

        /// <summary>
        /// Returns users from the configured Connect service. Returns users from the configured Connect service.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="listIncludedUsers"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>IntegratedUserInfoList</returns>
        public IntegratedUserInfoList ConnectGetConnectUsers (string accountId, string connectId, string count = null, string emailSubstring = null, string listIncludedUsers = null, string startPosition = null, string status = null, string userNameSubstring = null)
        {
             ApiResponse<IntegratedUserInfoList> localVarResponse = ConnectGetConnectUsersWithHttpInfo(accountId, connectId, count, emailSubstring, listIncludedUsers, startPosition, status, userNameSubstring);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns users from the configured Connect service. Returns users from the configured Connect service.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="listIncludedUsers"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>ApiResponse of IntegratedUserInfoList</returns>
        public ApiResponse< IntegratedUserInfoList > ConnectGetConnectUsersWithHttpInfo (string accountId, string connectId, string count = null, string emailSubstring = null, string listIncludedUsers = null, string startPosition = null, string status = null, string userNameSubstring = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectGetConnectUsers");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectConfigurationsApi->ConnectGetConnectUsers");

            var localVarPath = "/v2/accounts/{accountId}/connect/{connectId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", Configuration.ApiClient.ParameterToString(connectId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (emailSubstring != null) localVarQueryParams.Add("email_substring", Configuration.ApiClient.ParameterToString(emailSubstring)); // query parameter
            if (listIncludedUsers != null) localVarQueryParams.Add("list_included_users", Configuration.ApiClient.ParameterToString(listIncludedUsers)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (userNameSubstring != null) localVarQueryParams.Add("user_name_substring", Configuration.ApiClient.ParameterToString(userNameSubstring)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectGetConnectUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegratedUserInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntegratedUserInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegratedUserInfoList)));
            
        }

        /// <summary>
        /// Returns users from the configured Connect service. Returns users from the configured Connect service.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="listIncludedUsers"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>Task of IntegratedUserInfoList</returns>
        public async System.Threading.Tasks.Task<IntegratedUserInfoList> ConnectGetConnectUsersAsync (string accountId, string connectId, string count = null, string emailSubstring = null, string listIncludedUsers = null, string startPosition = null, string status = null, string userNameSubstring = null)
        {
             ApiResponse<IntegratedUserInfoList> localVarResponse = await ConnectGetConnectUsersAsyncWithHttpInfo(accountId, connectId, count, emailSubstring, listIncludedUsers, startPosition, status, userNameSubstring);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns users from the configured Connect service. Returns users from the configured Connect service.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectId">The ID of the custom Connect configuration being accessed.</param>
        /// <param name="count">Optional. Number of items to return.  (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="listIncludedUsers"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>Task of ApiResponse (IntegratedUserInfoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegratedUserInfoList>> ConnectGetConnectUsersAsyncWithHttpInfo (string accountId, string connectId, string count = null, string emailSubstring = null, string listIncludedUsers = null, string startPosition = null, string status = null, string userNameSubstring = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectGetConnectUsers");
            // verify the required parameter 'connectId' is set
            if (connectId == null)
                throw new ApiException(400, "Missing required parameter 'connectId' when calling ConnectConfigurationsApi->ConnectGetConnectUsers");

            var localVarPath = "/v2/accounts/{accountId}/connect/{connectId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectId != null) localVarPathParams.Add("connectId", Configuration.ApiClient.ParameterToString(connectId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (emailSubstring != null) localVarQueryParams.Add("email_substring", Configuration.ApiClient.ParameterToString(emailSubstring)); // query parameter
            if (listIncludedUsers != null) localVarQueryParams.Add("list_included_users", Configuration.ApiClient.ParameterToString(listIncludedUsers)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (userNameSubstring != null) localVarQueryParams.Add("user_name_substring", Configuration.ApiClient.ParameterToString(userNameSubstring)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectGetConnectUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegratedUserInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntegratedUserInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegratedUserInfoList)));
            
        }

        /// <summary>
        /// Creates a connect configuration for the specified account. Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>ConnectConfigurations</returns>
        public ConnectConfigurations ConnectPostConnectConfiguration (string accountId, ConnectConfigurations connectConfigurations = null)
        {
             ApiResponse<ConnectConfigurations> localVarResponse = ConnectPostConnectConfigurationWithHttpInfo(accountId, connectConfigurations);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a connect configuration for the specified account. Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>ApiResponse of ConnectConfigurations</returns>
        public ApiResponse< ConnectConfigurations > ConnectPostConnectConfigurationWithHttpInfo (string accountId, ConnectConfigurations connectConfigurations = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectPostConnectConfiguration");

            var localVarPath = "/v2/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectConfigurations != null && connectConfigurations.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(connectConfigurations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectConfigurations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectPostConnectConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectConfigurations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectConfigurations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigurations)));
            
        }

        /// <summary>
        /// Creates a connect configuration for the specified account. Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>Task of ConnectConfigurations</returns>
        public async System.Threading.Tasks.Task<ConnectConfigurations> ConnectPostConnectConfigurationAsync (string accountId, ConnectConfigurations connectConfigurations = null)
        {
             ApiResponse<ConnectConfigurations> localVarResponse = await ConnectPostConnectConfigurationAsyncWithHttpInfo(accountId, connectConfigurations);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a connect configuration for the specified account. Creates a DocuSign Custom Connect definition for your account. DocuSign Connect enables the sending of real-time data updates to external applications. These updates are generated by user transactions as the envelope progresses through actions to completion. The Connect Service provides updated information about the status of these transactions and returns updates that include the actual content of document form fields. Be aware that, these updates might or might not include the document itself. For more information about Connect, see the [ML:DocuSign Connect Service Guide].  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to set up Connect configurations for Salesforce or eOriginal.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectConfigurations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectConfigurations>> ConnectPostConnectConfigurationAsyncWithHttpInfo (string accountId, ConnectConfigurations connectConfigurations = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectPostConnectConfiguration");

            var localVarPath = "/v2/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectConfigurations != null && connectConfigurations.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(connectConfigurations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectConfigurations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectPostConnectConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectConfigurations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectConfigurations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigurations)));
            
        }

        /// <summary>
        /// Updates a specified Connect configuration. Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>ConnectConfigurations</returns>
        public ConnectConfigurations ConnectPutConnectConfiguration (string accountId, ConnectConfigurations connectConfigurations = null)
        {
             ApiResponse<ConnectConfigurations> localVarResponse = ConnectPutConnectConfigurationWithHttpInfo(accountId, connectConfigurations);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specified Connect configuration. Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>ApiResponse of ConnectConfigurations</returns>
        public ApiResponse< ConnectConfigurations > ConnectPutConnectConfigurationWithHttpInfo (string accountId, ConnectConfigurations connectConfigurations = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectPutConnectConfiguration");

            var localVarPath = "/v2/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectConfigurations != null && connectConfigurations.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(connectConfigurations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectConfigurations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectPutConnectConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectConfigurations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectConfigurations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigurations)));
            
        }

        /// <summary>
        /// Updates a specified Connect configuration. Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>Task of ConnectConfigurations</returns>
        public async System.Threading.Tasks.Task<ConnectConfigurations> ConnectPutConnectConfigurationAsync (string accountId, ConnectConfigurations connectConfigurations = null)
        {
             ApiResponse<ConnectConfigurations> localVarResponse = await ConnectPutConnectConfigurationAsyncWithHttpInfo(accountId, connectConfigurations);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specified Connect configuration. Updates the specified DocuSign Connect configuration in your account.  ###### Note: Connect must be enabled for your account to use this function. This cannot be used to update Connect configurations for Box, eOriginal, or Salesforce.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="connectConfigurations"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectConfigurations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectConfigurations>> ConnectPutConnectConfigurationAsyncWithHttpInfo (string accountId, ConnectConfigurations connectConfigurations = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConnectConfigurationsApi->ConnectPutConnectConfiguration");

            var localVarPath = "/v2/accounts/{accountId}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (connectConfigurations != null && connectConfigurations.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(connectConfigurations); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connectConfigurations; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConnectPutConnectConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectConfigurations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectConfigurations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectConfigurations)));
            
        }

    }
}
