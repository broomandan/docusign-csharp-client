/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISigningGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes one or more signing groups.
        /// </summary>
        /// <remarks>
        /// Deletes one or more signing groups in the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>SigningGroupInformation</returns>
        SigningGroupInformation SigningGroupsDeleteSigningGroups (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Deletes one or more signing groups.
        /// </summary>
        /// <remarks>
        /// Deletes one or more signing groups in the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        ApiResponse<SigningGroupInformation> SigningGroupsDeleteSigningGroupsWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        /// <summary>
        /// Gets information about a signing group. 
        /// </summary>
        /// <remarks>
        /// Retrieves information, including group member information, for the specified signing group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>SigningGroups</returns>
        SigningGroups SigningGroupsGetSigningGroup (string accountId, string signingGroupId);

        /// <summary>
        /// Gets information about a signing group. 
        /// </summary>
        /// <remarks>
        /// Retrieves information, including group member information, for the specified signing group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>ApiResponse of SigningGroups</returns>
        ApiResponse<SigningGroups> SigningGroupsGetSigningGroupWithHttpInfo (string accountId, string signingGroupId);
        /// <summary>
        /// Gets a list of the Signing Groups in an account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all signing groups in the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="includeUsers">When set to **true**, the response includes the signing group members.  (optional)</param>
        /// <returns>SigningGroupInformation</returns>
        SigningGroupInformation SigningGroupsGetSigningGroups (string accountId, string groupType = null, string includeUsers = null);

        /// <summary>
        /// Gets a list of the Signing Groups in an account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all signing groups in the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="includeUsers">When set to **true**, the response includes the signing group members.  (optional)</param>
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        ApiResponse<SigningGroupInformation> SigningGroupsGetSigningGroupsWithHttpInfo (string accountId, string groupType = null, string includeUsers = null);
        /// <summary>
        /// Creates a signing group. 
        /// </summary>
        /// <remarks>
        /// Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>SigningGroupInformation</returns>
        SigningGroupInformation SigningGroupsPostSigningGroups (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Creates a signing group. 
        /// </summary>
        /// <remarks>
        /// Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        ApiResponse<SigningGroupInformation> SigningGroupsPostSigningGroupsWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        /// <summary>
        /// Updates a signing group. 
        /// </summary>
        /// <remarks>
        /// Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroups"> (optional)</param>
        /// <returns>SigningGroups</returns>
        SigningGroups SigningGroupsPutSigningGroup (string accountId, string signingGroupId, SigningGroups signingGroups = null);

        /// <summary>
        /// Updates a signing group. 
        /// </summary>
        /// <remarks>
        /// Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroups"> (optional)</param>
        /// <returns>ApiResponse of SigningGroups</returns>
        ApiResponse<SigningGroups> SigningGroupsPutSigningGroupWithHttpInfo (string accountId, string signingGroupId, SigningGroups signingGroups = null);
        /// <summary>
        /// Updates signing group names.
        /// </summary>
        /// <remarks>
        /// Updates the name of one or more existing signing groups. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>SigningGroupInformation</returns>
        SigningGroupInformation SigningGroupsPutSigningGroups (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Updates signing group names.
        /// </summary>
        /// <remarks>
        /// Updates the name of one or more existing signing groups. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        ApiResponse<SigningGroupInformation> SigningGroupsPutSigningGroupsWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes one or more signing groups.
        /// </summary>
        /// <remarks>
        /// Deletes one or more signing groups in the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of SigningGroupInformation</returns>
        System.Threading.Tasks.Task<SigningGroupInformation> SigningGroupsDeleteSigningGroupsAsync (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Deletes one or more signing groups.
        /// </summary>
        /// <remarks>
        /// Deletes one or more signing groups in the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> SigningGroupsDeleteSigningGroupsAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        /// <summary>
        /// Gets information about a signing group. 
        /// </summary>
        /// <remarks>
        /// Retrieves information, including group member information, for the specified signing group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>Task of SigningGroups</returns>
        System.Threading.Tasks.Task<SigningGroups> SigningGroupsGetSigningGroupAsync (string accountId, string signingGroupId);

        /// <summary>
        /// Gets information about a signing group. 
        /// </summary>
        /// <remarks>
        /// Retrieves information, including group member information, for the specified signing group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>Task of ApiResponse (SigningGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroups>> SigningGroupsGetSigningGroupAsyncWithHttpInfo (string accountId, string signingGroupId);
        /// <summary>
        /// Gets a list of the Signing Groups in an account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all signing groups in the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="includeUsers">When set to **true**, the response includes the signing group members.  (optional)</param>
        /// <returns>Task of SigningGroupInformation</returns>
        System.Threading.Tasks.Task<SigningGroupInformation> SigningGroupsGetSigningGroupsAsync (string accountId, string groupType = null, string includeUsers = null);

        /// <summary>
        /// Gets a list of the Signing Groups in an account.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all signing groups in the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="includeUsers">When set to **true**, the response includes the signing group members.  (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> SigningGroupsGetSigningGroupsAsyncWithHttpInfo (string accountId, string groupType = null, string includeUsers = null);
        /// <summary>
        /// Creates a signing group. 
        /// </summary>
        /// <remarks>
        /// Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of SigningGroupInformation</returns>
        System.Threading.Tasks.Task<SigningGroupInformation> SigningGroupsPostSigningGroupsAsync (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Creates a signing group. 
        /// </summary>
        /// <remarks>
        /// Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> SigningGroupsPostSigningGroupsAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        /// <summary>
        /// Updates a signing group. 
        /// </summary>
        /// <remarks>
        /// Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroups"> (optional)</param>
        /// <returns>Task of SigningGroups</returns>
        System.Threading.Tasks.Task<SigningGroups> SigningGroupsPutSigningGroupAsync (string accountId, string signingGroupId, SigningGroups signingGroups = null);

        /// <summary>
        /// Updates a signing group. 
        /// </summary>
        /// <remarks>
        /// Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroups"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroups>> SigningGroupsPutSigningGroupAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroups signingGroups = null);
        /// <summary>
        /// Updates signing group names.
        /// </summary>
        /// <remarks>
        /// Updates the name of one or more existing signing groups. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of SigningGroupInformation</returns>
        System.Threading.Tasks.Task<SigningGroupInformation> SigningGroupsPutSigningGroupsAsync (string accountId, SigningGroupInformation signingGroupInformation = null);

        /// <summary>
        /// Updates signing group names.
        /// </summary>
        /// <remarks>
        /// Updates the name of one or more existing signing groups. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> SigningGroupsPutSigningGroupsAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SigningGroupsApi : ISigningGroupsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SigningGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SigningGroupsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SigningGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SigningGroupsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes one or more signing groups. Deletes one or more signing groups in the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>SigningGroupInformation</returns>
        public SigningGroupInformation SigningGroupsDeleteSigningGroups (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = SigningGroupsDeleteSigningGroupsWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more signing groups. Deletes one or more signing groups in the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        public ApiResponse< SigningGroupInformation > SigningGroupsDeleteSigningGroupsWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsDeleteSigningGroups");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsDeleteSigningGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }

        /// <summary>
        /// Deletes one or more signing groups. Deletes one or more signing groups in the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of SigningGroupInformation</returns>
        public async System.Threading.Tasks.Task<SigningGroupInformation> SigningGroupsDeleteSigningGroupsAsync (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = await SigningGroupsDeleteSigningGroupsAsyncWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes one or more signing groups. Deletes one or more signing groups in the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> SigningGroupsDeleteSigningGroupsAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsDeleteSigningGroups");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsDeleteSigningGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }

        /// <summary>
        /// Gets information about a signing group.  Retrieves information, including group member information, for the specified signing group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>SigningGroups</returns>
        public SigningGroups SigningGroupsGetSigningGroup (string accountId, string signingGroupId)
        {
             ApiResponse<SigningGroups> localVarResponse = SigningGroupsGetSigningGroupWithHttpInfo(accountId, signingGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about a signing group.  Retrieves information, including group member information, for the specified signing group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>ApiResponse of SigningGroups</returns>
        public ApiResponse< SigningGroups > SigningGroupsGetSigningGroupWithHttpInfo (string accountId, string signingGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsGetSigningGroup");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->SigningGroupsGetSigningGroup");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsGetSigningGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroups) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroups)));
            
        }

        /// <summary>
        /// Gets information about a signing group.  Retrieves information, including group member information, for the specified signing group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>Task of SigningGroups</returns>
        public async System.Threading.Tasks.Task<SigningGroups> SigningGroupsGetSigningGroupAsync (string accountId, string signingGroupId)
        {
             ApiResponse<SigningGroups> localVarResponse = await SigningGroupsGetSigningGroupAsyncWithHttpInfo(accountId, signingGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets information about a signing group.  Retrieves information, including group member information, for the specified signing group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>Task of ApiResponse (SigningGroups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroups>> SigningGroupsGetSigningGroupAsyncWithHttpInfo (string accountId, string signingGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsGetSigningGroup");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->SigningGroupsGetSigningGroup");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsGetSigningGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroups) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroups)));
            
        }

        /// <summary>
        /// Gets a list of the Signing Groups in an account. Retrieves a list of all signing groups in the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="includeUsers">When set to **true**, the response includes the signing group members.  (optional)</param>
        /// <returns>SigningGroupInformation</returns>
        public SigningGroupInformation SigningGroupsGetSigningGroups (string accountId, string groupType = null, string includeUsers = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = SigningGroupsGetSigningGroupsWithHttpInfo(accountId, groupType, includeUsers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the Signing Groups in an account. Retrieves a list of all signing groups in the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="includeUsers">When set to **true**, the response includes the signing group members.  (optional)</param>
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        public ApiResponse< SigningGroupInformation > SigningGroupsGetSigningGroupsWithHttpInfo (string accountId, string groupType = null, string includeUsers = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsGetSigningGroups");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupType != null) localVarQueryParams.Add("group_type", Configuration.ApiClient.ParameterToString(groupType)); // query parameter
            if (includeUsers != null) localVarQueryParams.Add("include_users", Configuration.ApiClient.ParameterToString(includeUsers)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsGetSigningGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }

        /// <summary>
        /// Gets a list of the Signing Groups in an account. Retrieves a list of all signing groups in the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="includeUsers">When set to **true**, the response includes the signing group members.  (optional)</param>
        /// <returns>Task of SigningGroupInformation</returns>
        public async System.Threading.Tasks.Task<SigningGroupInformation> SigningGroupsGetSigningGroupsAsync (string accountId, string groupType = null, string includeUsers = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = await SigningGroupsGetSigningGroupsAsyncWithHttpInfo(accountId, groupType, includeUsers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of the Signing Groups in an account. Retrieves a list of all signing groups in the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="groupType"> (optional)</param>
        /// <param name="includeUsers">When set to **true**, the response includes the signing group members.  (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> SigningGroupsGetSigningGroupsAsyncWithHttpInfo (string accountId, string groupType = null, string includeUsers = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsGetSigningGroups");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (groupType != null) localVarQueryParams.Add("group_type", Configuration.ApiClient.ParameterToString(groupType)); // query parameter
            if (includeUsers != null) localVarQueryParams.Add("include_users", Configuration.ApiClient.ParameterToString(includeUsers)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsGetSigningGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }

        /// <summary>
        /// Creates a signing group.  Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>SigningGroupInformation</returns>
        public SigningGroupInformation SigningGroupsPostSigningGroups (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = SigningGroupsPostSigningGroupsWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a signing group.  Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        public ApiResponse< SigningGroupInformation > SigningGroupsPostSigningGroupsWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsPostSigningGroups");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsPostSigningGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }

        /// <summary>
        /// Creates a signing group.  Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of SigningGroupInformation</returns>
        public async System.Threading.Tasks.Task<SigningGroupInformation> SigningGroupsPostSigningGroupsAsync (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = await SigningGroupsPostSigningGroupsAsyncWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a signing group.  Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> SigningGroupsPostSigningGroupsAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsPostSigningGroups");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsPostSigningGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }

        /// <summary>
        /// Updates a signing group.  Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroups"> (optional)</param>
        /// <returns>SigningGroups</returns>
        public SigningGroups SigningGroupsPutSigningGroup (string accountId, string signingGroupId, SigningGroups signingGroups = null)
        {
             ApiResponse<SigningGroups> localVarResponse = SigningGroupsPutSigningGroupWithHttpInfo(accountId, signingGroupId, signingGroups);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a signing group.  Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroups"> (optional)</param>
        /// <returns>ApiResponse of SigningGroups</returns>
        public ApiResponse< SigningGroups > SigningGroupsPutSigningGroupWithHttpInfo (string accountId, string signingGroupId, SigningGroups signingGroups = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsPutSigningGroup");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->SigningGroupsPutSigningGroup");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter
            if (signingGroups != null && signingGroups.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroups); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroups; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsPutSigningGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroups) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroups)));
            
        }

        /// <summary>
        /// Updates a signing group.  Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroups"> (optional)</param>
        /// <returns>Task of SigningGroups</returns>
        public async System.Threading.Tasks.Task<SigningGroups> SigningGroupsPutSigningGroupAsync (string accountId, string signingGroupId, SigningGroups signingGroups = null)
        {
             ApiResponse<SigningGroups> localVarResponse = await SigningGroupsPutSigningGroupAsyncWithHttpInfo(accountId, signingGroupId, signingGroups);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a signing group.  Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroups"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroups>> SigningGroupsPutSigningGroupAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroups signingGroups = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsPutSigningGroup");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupsApi->SigningGroupsPutSigningGroup");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter
            if (signingGroups != null && signingGroups.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroups); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroups; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsPutSigningGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroups) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroups)));
            
        }

        /// <summary>
        /// Updates signing group names. Updates the name of one or more existing signing groups. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>SigningGroupInformation</returns>
        public SigningGroupInformation SigningGroupsPutSigningGroups (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = SigningGroupsPutSigningGroupsWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates signing group names. Updates the name of one or more existing signing groups. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>ApiResponse of SigningGroupInformation</returns>
        public ApiResponse< SigningGroupInformation > SigningGroupsPutSigningGroupsWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsPutSigningGroups");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsPutSigningGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }

        /// <summary>
        /// Updates signing group names. Updates the name of one or more existing signing groups. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of SigningGroupInformation</returns>
        public async System.Threading.Tasks.Task<SigningGroupInformation> SigningGroupsPutSigningGroupsAsync (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
             ApiResponse<SigningGroupInformation> localVarResponse = await SigningGroupsPutSigningGroupsAsyncWithHttpInfo(accountId, signingGroupInformation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates signing group names. Updates the name of one or more existing signing groups. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupInformation>> SigningGroupsPutSigningGroupsAsyncWithHttpInfo (string accountId, SigningGroupInformation signingGroupInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupsApi->SigningGroupsPutSigningGroups");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupInformation != null && signingGroupInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsPutSigningGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupInformation)));
            
        }

    }
}
