/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISigningGroupUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes  one or more members from a signing group.
        /// </summary>
        /// <remarks>
        /// Deletes  one or more members from the specified signing group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>SigningGroupUsers</returns>
        SigningGroupUsers SigningGroupsDeleteSigningGroupUsers (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);

        /// <summary>
        /// Deletes  one or more members from a signing group.
        /// </summary>
        /// <remarks>
        /// Deletes  one or more members from the specified signing group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>ApiResponse of SigningGroupUsers</returns>
        ApiResponse<SigningGroupUsers> SigningGroupsDeleteSigningGroupUsersWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);
        /// <summary>
        /// Gets a list of members in a Signing Group.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of members in the specified Signing Group.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>SigningGroupUsers</returns>
        SigningGroupUsers SigningGroupsGetSigningGroupUsers (string accountId, string signingGroupId);

        /// <summary>
        /// Gets a list of members in a Signing Group.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of members in the specified Signing Group.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>ApiResponse of SigningGroupUsers</returns>
        ApiResponse<SigningGroupUsers> SigningGroupsGetSigningGroupUsersWithHttpInfo (string accountId, string signingGroupId);
        /// <summary>
        /// Adds members to a signing group. 
        /// </summary>
        /// <remarks>
        /// Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>SigningGroupUsers</returns>
        SigningGroupUsers SigningGroupsPutSigningGroupUsers (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);

        /// <summary>
        /// Adds members to a signing group. 
        /// </summary>
        /// <remarks>
        /// Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>ApiResponse of SigningGroupUsers</returns>
        ApiResponse<SigningGroupUsers> SigningGroupsPutSigningGroupUsersWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes  one or more members from a signing group.
        /// </summary>
        /// <remarks>
        /// Deletes  one or more members from the specified signing group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>Task of SigningGroupUsers</returns>
        System.Threading.Tasks.Task<SigningGroupUsers> SigningGroupsDeleteSigningGroupUsersAsync (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);

        /// <summary>
        /// Deletes  one or more members from a signing group.
        /// </summary>
        /// <remarks>
        /// Deletes  one or more members from the specified signing group. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> SigningGroupsDeleteSigningGroupUsersAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);
        /// <summary>
        /// Gets a list of members in a Signing Group.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of members in the specified Signing Group.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>Task of SigningGroupUsers</returns>
        System.Threading.Tasks.Task<SigningGroupUsers> SigningGroupsGetSigningGroupUsersAsync (string accountId, string signingGroupId);

        /// <summary>
        /// Gets a list of members in a Signing Group.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of members in the specified Signing Group.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> SigningGroupsGetSigningGroupUsersAsyncWithHttpInfo (string accountId, string signingGroupId);
        /// <summary>
        /// Adds members to a signing group. 
        /// </summary>
        /// <remarks>
        /// Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>Task of SigningGroupUsers</returns>
        System.Threading.Tasks.Task<SigningGroupUsers> SigningGroupsPutSigningGroupUsersAsync (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);

        /// <summary>
        /// Adds members to a signing group. 
        /// </summary>
        /// <remarks>
        /// Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> SigningGroupsPutSigningGroupUsersAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SigningGroupUsersApi : ISigningGroupUsersApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SigningGroupUsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SigningGroupUsersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SigningGroupUsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SigningGroupUsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes  one or more members from a signing group. Deletes  one or more members from the specified signing group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>SigningGroupUsers</returns>
        public SigningGroupUsers SigningGroupsDeleteSigningGroupUsers (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = SigningGroupsDeleteSigningGroupUsersWithHttpInfo(accountId, signingGroupId, signingGroupUsers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes  one or more members from a signing group. Deletes  one or more members from the specified signing group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>ApiResponse of SigningGroupUsers</returns>
        public ApiResponse< SigningGroupUsers > SigningGroupsDeleteSigningGroupUsersWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupUsersApi->SigningGroupsDeleteSigningGroupUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupUsersApi->SigningGroupsDeleteSigningGroupUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter
            if (signingGroupUsers != null && signingGroupUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupUsers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsDeleteSigningGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            
        }

        /// <summary>
        /// Deletes  one or more members from a signing group. Deletes  one or more members from the specified signing group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>Task of SigningGroupUsers</returns>
        public async System.Threading.Tasks.Task<SigningGroupUsers> SigningGroupsDeleteSigningGroupUsersAsync (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = await SigningGroupsDeleteSigningGroupUsersAsyncWithHttpInfo(accountId, signingGroupId, signingGroupUsers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes  one or more members from a signing group. Deletes  one or more members from the specified signing group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> SigningGroupsDeleteSigningGroupUsersAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupUsersApi->SigningGroupsDeleteSigningGroupUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupUsersApi->SigningGroupsDeleteSigningGroupUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter
            if (signingGroupUsers != null && signingGroupUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupUsers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsDeleteSigningGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            
        }

        /// <summary>
        /// Gets a list of members in a Signing Group. Retrieves the list of members in the specified Signing Group.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>SigningGroupUsers</returns>
        public SigningGroupUsers SigningGroupsGetSigningGroupUsers (string accountId, string signingGroupId)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = SigningGroupsGetSigningGroupUsersWithHttpInfo(accountId, signingGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of members in a Signing Group. Retrieves the list of members in the specified Signing Group.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>ApiResponse of SigningGroupUsers</returns>
        public ApiResponse< SigningGroupUsers > SigningGroupsGetSigningGroupUsersWithHttpInfo (string accountId, string signingGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupUsersApi->SigningGroupsGetSigningGroupUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupUsersApi->SigningGroupsGetSigningGroupUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsGetSigningGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            
        }

        /// <summary>
        /// Gets a list of members in a Signing Group. Retrieves the list of members in the specified Signing Group.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>Task of SigningGroupUsers</returns>
        public async System.Threading.Tasks.Task<SigningGroupUsers> SigningGroupsGetSigningGroupUsersAsync (string accountId, string signingGroupId)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = await SigningGroupsGetSigningGroupUsersAsyncWithHttpInfo(accountId, signingGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of members in a Signing Group. Retrieves the list of members in the specified Signing Group.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> SigningGroupsGetSigningGroupUsersAsyncWithHttpInfo (string accountId, string signingGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupUsersApi->SigningGroupsGetSigningGroupUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupUsersApi->SigningGroupsGetSigningGroupUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsGetSigningGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            
        }

        /// <summary>
        /// Adds members to a signing group.  Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>SigningGroupUsers</returns>
        public SigningGroupUsers SigningGroupsPutSigningGroupUsers (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = SigningGroupsPutSigningGroupUsersWithHttpInfo(accountId, signingGroupId, signingGroupUsers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds members to a signing group.  Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>ApiResponse of SigningGroupUsers</returns>
        public ApiResponse< SigningGroupUsers > SigningGroupsPutSigningGroupUsersWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupUsersApi->SigningGroupsPutSigningGroupUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupUsersApi->SigningGroupsPutSigningGroupUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter
            if (signingGroupUsers != null && signingGroupUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupUsers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsPutSigningGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            
        }

        /// <summary>
        /// Adds members to a signing group.  Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>Task of SigningGroupUsers</returns>
        public async System.Threading.Tasks.Task<SigningGroupUsers> SigningGroupsPutSigningGroupUsersAsync (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
             ApiResponse<SigningGroupUsers> localVarResponse = await SigningGroupsPutSigningGroupUsersAsyncWithHttpInfo(accountId, signingGroupId, signingGroupUsers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds members to a signing group.  Adds one or more new members to a signing group. A signing group can have a maximum of 50 members. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="signingGroupId"></param>
        /// <param name="signingGroupUsers"> (optional)</param>
        /// <returns>Task of ApiResponse (SigningGroupUsers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningGroupUsers>> SigningGroupsPutSigningGroupUsersAsyncWithHttpInfo (string accountId, string signingGroupId, SigningGroupUsers signingGroupUsers = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SigningGroupUsersApi->SigningGroupsPutSigningGroupUsers");
            // verify the required parameter 'signingGroupId' is set
            if (signingGroupId == null)
                throw new ApiException(400, "Missing required parameter 'signingGroupId' when calling SigningGroupUsersApi->SigningGroupsPutSigningGroupUsers");

            var localVarPath = "/v2/accounts/{accountId}/signing_groups/{signingGroupId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (signingGroupId != null) localVarPathParams.Add("signingGroupId", Configuration.ApiClient.ParameterToString(signingGroupId)); // path parameter
            if (signingGroupUsers != null && signingGroupUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(signingGroupUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingGroupUsers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SigningGroupsPutSigningGroupUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningGroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SigningGroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningGroupUsers)));
            
        }

    }
}
