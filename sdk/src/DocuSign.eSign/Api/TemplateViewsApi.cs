/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateViewsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides a URL to start an edit view of the Template UI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>TemplateViews</returns>
        TemplateViews ViewsPostTemplateEditView (string accountId, string templateId, ReturnUrlRequest returnUrlRequest = null);

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>ApiResponse of TemplateViews</returns>
        ApiResponse<TemplateViews> ViewsPostTemplateEditViewWithHttpInfo (string accountId, string templateId, ReturnUrlRequest returnUrlRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Provides a URL to start an edit view of the Template UI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of TemplateViews</returns>
        System.Threading.Tasks.Task<TemplateViews> ViewsPostTemplateEditViewAsync (string accountId, string templateId, ReturnUrlRequest returnUrlRequest = null);

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateViews)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateViews>> ViewsPostTemplateEditViewAsyncWithHttpInfo (string accountId, string templateId, ReturnUrlRequest returnUrlRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateViewsApi : ITemplateViewsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateViewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateViewsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateViewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateViewsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>TemplateViews</returns>
        public TemplateViews ViewsPostTemplateEditView (string accountId, string templateId, ReturnUrlRequest returnUrlRequest = null)
        {
             ApiResponse<TemplateViews> localVarResponse = ViewsPostTemplateEditViewWithHttpInfo(accountId, templateId, returnUrlRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>ApiResponse of TemplateViews</returns>
        public ApiResponse< TemplateViews > ViewsPostTemplateEditViewWithHttpInfo (string accountId, string templateId, ReturnUrlRequest returnUrlRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateViewsApi->ViewsPostTemplateEditView");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateViewsApi->ViewsPostTemplateEditView");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/views/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (returnUrlRequest != null && returnUrlRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(returnUrlRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = returnUrlRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostTemplateEditView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateViews)));
            
        }

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of TemplateViews</returns>
        public async System.Threading.Tasks.Task<TemplateViews> ViewsPostTemplateEditViewAsync (string accountId, string templateId, ReturnUrlRequest returnUrlRequest = null)
        {
             ApiResponse<TemplateViews> localVarResponse = await ViewsPostTemplateEditViewAsyncWithHttpInfo(accountId, templateId, returnUrlRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides a URL to start an edit view of the Template UI 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="returnUrlRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateViews)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateViews>> ViewsPostTemplateEditViewAsyncWithHttpInfo (string accountId, string templateId, ReturnUrlRequest returnUrlRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateViewsApi->ViewsPostTemplateEditView");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateViewsApi->ViewsPostTemplateEditView");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/views/edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (returnUrlRequest != null && returnUrlRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(returnUrlRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = returnUrlRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewsPostTemplateEditView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateViews>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateViews) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateViews)));
            
        }

    }
}
