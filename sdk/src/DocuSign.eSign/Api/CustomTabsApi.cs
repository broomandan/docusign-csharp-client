/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomTabsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes custom tab information.
        /// </summary>
        /// <remarks>
        /// Deletes the custom from the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns></returns>
        void TabDeleteCustomTab (string accountId, string customTabId);

        /// <summary>
        /// Deletes custom tab information.
        /// </summary>
        /// <remarks>
        /// Deletes the custom from the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TabDeleteCustomTabWithHttpInfo (string accountId, string customTabId);
        /// <summary>
        /// Gets custom tab information.
        /// </summary>
        /// <remarks>
        /// Retrieves information about the requested custom tab on the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>CustomTabs</returns>
        CustomTabs TabGetCustomTab (string accountId, string customTabId);

        /// <summary>
        /// Gets custom tab information.
        /// </summary>
        /// <remarks>
        /// Retrieves information about the requested custom tab on the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>ApiResponse of CustomTabs</returns>
        ApiResponse<CustomTabs> TabGetCustomTabWithHttpInfo (string accountId, string customTabId);
        /// <summary>
        /// Updates custom tab information.  
        /// </summary>
        /// <remarks>
        /// Updates the information in a custom tab for the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>CustomTabs</returns>
        CustomTabs TabPutCustomTab (string accountId, string customTabId, CustomTabs customTabs = null);

        /// <summary>
        /// Updates custom tab information.  
        /// </summary>
        /// <remarks>
        /// Updates the information in a custom tab for the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>ApiResponse of CustomTabs</returns>
        ApiResponse<CustomTabs> TabPutCustomTabWithHttpInfo (string accountId, string customTabId, CustomTabs customTabs = null);
        /// <summary>
        /// Gets a list of all account tabs.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all tabs associated with the account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabOnly">When set to **true**, only custom tabs are returned in the response.  (optional)</param>
        /// <returns>TabMetadataList</returns>
        TabMetadataList TabsGetTabDefinitions (string accountId, string customTabOnly = null);

        /// <summary>
        /// Gets a list of all account tabs.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all tabs associated with the account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabOnly">When set to **true**, only custom tabs are returned in the response.  (optional)</param>
        /// <returns>ApiResponse of TabMetadataList</returns>
        ApiResponse<TabMetadataList> TabsGetTabDefinitionsWithHttpInfo (string accountId, string customTabOnly = null);
        /// <summary>
        /// Creates a custom tab.
        /// </summary>
        /// <remarks>
        /// Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>CustomTabs</returns>
        CustomTabs TabsPostTabDefinitions (string accountId, CustomTabs customTabs = null);

        /// <summary>
        /// Creates a custom tab.
        /// </summary>
        /// <remarks>
        /// Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>ApiResponse of CustomTabs</returns>
        ApiResponse<CustomTabs> TabsPostTabDefinitionsWithHttpInfo (string accountId, CustomTabs customTabs = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes custom tab information.
        /// </summary>
        /// <remarks>
        /// Deletes the custom from the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TabDeleteCustomTabAsync (string accountId, string customTabId);

        /// <summary>
        /// Deletes custom tab information.
        /// </summary>
        /// <remarks>
        /// Deletes the custom from the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TabDeleteCustomTabAsyncWithHttpInfo (string accountId, string customTabId);
        /// <summary>
        /// Gets custom tab information.
        /// </summary>
        /// <remarks>
        /// Retrieves information about the requested custom tab on the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>Task of CustomTabs</returns>
        System.Threading.Tasks.Task<CustomTabs> TabGetCustomTabAsync (string accountId, string customTabId);

        /// <summary>
        /// Gets custom tab information.
        /// </summary>
        /// <remarks>
        /// Retrieves information about the requested custom tab on the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>Task of ApiResponse (CustomTabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomTabs>> TabGetCustomTabAsyncWithHttpInfo (string accountId, string customTabId);
        /// <summary>
        /// Updates custom tab information.  
        /// </summary>
        /// <remarks>
        /// Updates the information in a custom tab for the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>Task of CustomTabs</returns>
        System.Threading.Tasks.Task<CustomTabs> TabPutCustomTabAsync (string accountId, string customTabId, CustomTabs customTabs = null);

        /// <summary>
        /// Updates custom tab information.  
        /// </summary>
        /// <remarks>
        /// Updates the information in a custom tab for the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomTabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomTabs>> TabPutCustomTabAsyncWithHttpInfo (string accountId, string customTabId, CustomTabs customTabs = null);
        /// <summary>
        /// Gets a list of all account tabs.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all tabs associated with the account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabOnly">When set to **true**, only custom tabs are returned in the response.  (optional)</param>
        /// <returns>Task of TabMetadataList</returns>
        System.Threading.Tasks.Task<TabMetadataList> TabsGetTabDefinitionsAsync (string accountId, string customTabOnly = null);

        /// <summary>
        /// Gets a list of all account tabs.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all tabs associated with the account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabOnly">When set to **true**, only custom tabs are returned in the response.  (optional)</param>
        /// <returns>Task of ApiResponse (TabMetadataList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TabMetadataList>> TabsGetTabDefinitionsAsyncWithHttpInfo (string accountId, string customTabOnly = null);
        /// <summary>
        /// Creates a custom tab.
        /// </summary>
        /// <remarks>
        /// Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>Task of CustomTabs</returns>
        System.Threading.Tasks.Task<CustomTabs> TabsPostTabDefinitionsAsync (string accountId, CustomTabs customTabs = null);

        /// <summary>
        /// Creates a custom tab.
        /// </summary>
        /// <remarks>
        /// Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomTabs)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomTabs>> TabsPostTabDefinitionsAsyncWithHttpInfo (string accountId, CustomTabs customTabs = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomTabsApi : ICustomTabsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomTabsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomTabsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomTabsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomTabsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes custom tab information. Deletes the custom from the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns></returns>
        public void TabDeleteCustomTab (string accountId, string customTabId)
        {
             TabDeleteCustomTabWithHttpInfo(accountId, customTabId);
        }

        /// <summary>
        /// Deletes custom tab information. Deletes the custom from the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TabDeleteCustomTabWithHttpInfo (string accountId, string customTabId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->TabDeleteCustomTab");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->TabDeleteCustomTab");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TabDeleteCustomTab", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes custom tab information. Deletes the custom from the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TabDeleteCustomTabAsync (string accountId, string customTabId)
        {
             await TabDeleteCustomTabAsyncWithHttpInfo(accountId, customTabId);

        }

        /// <summary>
        /// Deletes custom tab information. Deletes the custom from the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TabDeleteCustomTabAsyncWithHttpInfo (string accountId, string customTabId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->TabDeleteCustomTab");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->TabDeleteCustomTab");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TabDeleteCustomTab", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets custom tab information. Retrieves information about the requested custom tab on the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>CustomTabs</returns>
        public CustomTabs TabGetCustomTab (string accountId, string customTabId)
        {
             ApiResponse<CustomTabs> localVarResponse = TabGetCustomTabWithHttpInfo(accountId, customTabId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets custom tab information. Retrieves information about the requested custom tab on the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>ApiResponse of CustomTabs</returns>
        public ApiResponse< CustomTabs > TabGetCustomTabWithHttpInfo (string accountId, string customTabId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->TabGetCustomTab");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->TabGetCustomTab");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TabGetCustomTab", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomTabs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomTabs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomTabs)));
            
        }

        /// <summary>
        /// Gets custom tab information. Retrieves information about the requested custom tab on the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>Task of CustomTabs</returns>
        public async System.Threading.Tasks.Task<CustomTabs> TabGetCustomTabAsync (string accountId, string customTabId)
        {
             ApiResponse<CustomTabs> localVarResponse = await TabGetCustomTabAsyncWithHttpInfo(accountId, customTabId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets custom tab information. Retrieves information about the requested custom tab on the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <returns>Task of ApiResponse (CustomTabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomTabs>> TabGetCustomTabAsyncWithHttpInfo (string accountId, string customTabId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->TabGetCustomTab");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->TabGetCustomTab");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TabGetCustomTab", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomTabs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomTabs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomTabs)));
            
        }

        /// <summary>
        /// Updates custom tab information.   Updates the information in a custom tab for the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>CustomTabs</returns>
        public CustomTabs TabPutCustomTab (string accountId, string customTabId, CustomTabs customTabs = null)
        {
             ApiResponse<CustomTabs> localVarResponse = TabPutCustomTabWithHttpInfo(accountId, customTabId, customTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates custom tab information.   Updates the information in a custom tab for the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>ApiResponse of CustomTabs</returns>
        public ApiResponse< CustomTabs > TabPutCustomTabWithHttpInfo (string accountId, string customTabId, CustomTabs customTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->TabPutCustomTab");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->TabPutCustomTab");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter
            if (customTabs != null && customTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customTabs; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TabPutCustomTab", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomTabs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomTabs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomTabs)));
            
        }

        /// <summary>
        /// Updates custom tab information.   Updates the information in a custom tab for the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>Task of CustomTabs</returns>
        public async System.Threading.Tasks.Task<CustomTabs> TabPutCustomTabAsync (string accountId, string customTabId, CustomTabs customTabs = null)
        {
             ApiResponse<CustomTabs> localVarResponse = await TabPutCustomTabAsyncWithHttpInfo(accountId, customTabId, customTabs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates custom tab information.   Updates the information in a custom tab for the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabId"></param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomTabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomTabs>> TabPutCustomTabAsyncWithHttpInfo (string accountId, string customTabId, CustomTabs customTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->TabPutCustomTab");
            // verify the required parameter 'customTabId' is set
            if (customTabId == null)
                throw new ApiException(400, "Missing required parameter 'customTabId' when calling CustomTabsApi->TabPutCustomTab");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions/{customTabId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabId != null) localVarPathParams.Add("customTabId", Configuration.ApiClient.ParameterToString(customTabId)); // path parameter
            if (customTabs != null && customTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customTabs; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TabPutCustomTab", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomTabs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomTabs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomTabs)));
            
        }

        /// <summary>
        /// Gets a list of all account tabs. Retrieves a list of all tabs associated with the account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabOnly">When set to **true**, only custom tabs are returned in the response.  (optional)</param>
        /// <returns>TabMetadataList</returns>
        public TabMetadataList TabsGetTabDefinitions (string accountId, string customTabOnly = null)
        {
             ApiResponse<TabMetadataList> localVarResponse = TabsGetTabDefinitionsWithHttpInfo(accountId, customTabOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of all account tabs. Retrieves a list of all tabs associated with the account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabOnly">When set to **true**, only custom tabs are returned in the response.  (optional)</param>
        /// <returns>ApiResponse of TabMetadataList</returns>
        public ApiResponse< TabMetadataList > TabsGetTabDefinitionsWithHttpInfo (string accountId, string customTabOnly = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->TabsGetTabDefinitions");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabOnly != null) localVarQueryParams.Add("custom_tab_only", Configuration.ApiClient.ParameterToString(customTabOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TabsGetTabDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TabMetadataList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TabMetadataList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TabMetadataList)));
            
        }

        /// <summary>
        /// Gets a list of all account tabs. Retrieves a list of all tabs associated with the account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabOnly">When set to **true**, only custom tabs are returned in the response.  (optional)</param>
        /// <returns>Task of TabMetadataList</returns>
        public async System.Threading.Tasks.Task<TabMetadataList> TabsGetTabDefinitionsAsync (string accountId, string customTabOnly = null)
        {
             ApiResponse<TabMetadataList> localVarResponse = await TabsGetTabDefinitionsAsyncWithHttpInfo(accountId, customTabOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of all account tabs. Retrieves a list of all tabs associated with the account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabOnly">When set to **true**, only custom tabs are returned in the response.  (optional)</param>
        /// <returns>Task of ApiResponse (TabMetadataList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TabMetadataList>> TabsGetTabDefinitionsAsyncWithHttpInfo (string accountId, string customTabOnly = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->TabsGetTabDefinitions");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabOnly != null) localVarQueryParams.Add("custom_tab_only", Configuration.ApiClient.ParameterToString(customTabOnly)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TabsGetTabDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TabMetadataList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TabMetadataList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TabMetadataList)));
            
        }

        /// <summary>
        /// Creates a custom tab. Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>CustomTabs</returns>
        public CustomTabs TabsPostTabDefinitions (string accountId, CustomTabs customTabs = null)
        {
             ApiResponse<CustomTabs> localVarResponse = TabsPostTabDefinitionsWithHttpInfo(accountId, customTabs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a custom tab. Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>ApiResponse of CustomTabs</returns>
        public ApiResponse< CustomTabs > TabsPostTabDefinitionsWithHttpInfo (string accountId, CustomTabs customTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->TabsPostTabDefinitions");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabs != null && customTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customTabs; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TabsPostTabDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomTabs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomTabs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomTabs)));
            
        }

        /// <summary>
        /// Creates a custom tab. Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>Task of CustomTabs</returns>
        public async System.Threading.Tasks.Task<CustomTabs> TabsPostTabDefinitionsAsync (string accountId, CustomTabs customTabs = null)
        {
             ApiResponse<CustomTabs> localVarResponse = await TabsPostTabDefinitionsAsyncWithHttpInfo(accountId, customTabs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a custom tab. Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="customTabs"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomTabs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomTabs>> TabsPostTabDefinitionsAsyncWithHttpInfo (string accountId, CustomTabs customTabs = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CustomTabsApi->TabsPostTabDefinitions");

            var localVarPath = "/v2/accounts/{accountId}/tab_definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (customTabs != null && customTabs.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(customTabs); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customTabs; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TabsPostTabDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomTabs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomTabs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomTabs)));
            
        }

    }
}
