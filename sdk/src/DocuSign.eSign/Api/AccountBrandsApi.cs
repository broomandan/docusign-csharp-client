/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountBrandsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Removes a brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns></returns>
        void BrandDeleteBrand (string accountId, string brandId);

        /// <summary>
        /// Removes a brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BrandDeleteBrandWithHttpInfo (string accountId, string brandId);
        /// <summary>
        /// Export a specific brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns></returns>
        void BrandExportGetBrandExportFile (string accountId, string brandId);

        /// <summary>
        /// Export a specific brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BrandExportGetBrandExportFileWithHttpInfo (string accountId, string brandId);
        /// <summary>
        /// Get information for a specific brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="includeExternalReferences"> (optional)</param>
        /// <param name="includeLogos"> (optional)</param>
        /// <returns>Brand</returns>
        Brand BrandGetBrand (string accountId, string brandId, string includeExternalReferences = null, string includeLogos = null);

        /// <summary>
        /// Get information for a specific brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="includeExternalReferences"> (optional)</param>
        /// <param name="includeLogos"> (optional)</param>
        /// <returns>ApiResponse of Brand</returns>
        ApiResponse<Brand> BrandGetBrandWithHttpInfo (string accountId, string brandId, string includeExternalReferences = null, string includeLogos = null);
        /// <summary>
        /// Delete one branding logo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns></returns>
        void BrandLogoDeleteBrandLogo (string accountId, string brandId, string logoType);

        /// <summary>
        /// Delete one branding logo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BrandLogoDeleteBrandLogoWithHttpInfo (string accountId, string brandId, string logoType);
        /// <summary>
        /// Obtains the specified image for a brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns></returns>
        void BrandLogoGetBrandLogo (string accountId, string brandId, string logoType);

        /// <summary>
        /// Obtains the specified image for a brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BrandLogoGetBrandLogoWithHttpInfo (string accountId, string brandId, string logoType);
        /// <summary>
        /// Put one branding logo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns></returns>
        void BrandLogoPutBrandLogo (string accountId, string brandId, string logoType);

        /// <summary>
        /// Put one branding logo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BrandLogoPutBrandLogoWithHttpInfo (string accountId, string brandId, string logoType);
        /// <summary>
        /// Updates an existing brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>Brand</returns>
        Brand BrandPutBrand (string accountId, string brandId, Brand brand = null);

        /// <summary>
        /// Updates an existing brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>ApiResponse of Brand</returns>
        ApiResponse<Brand> BrandPutBrandWithHttpInfo (string accountId, string brandId, Brand brand = null);
        /// <summary>
        /// Returns the specified branding resource file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <param name="langcode"> (optional)</param>
        /// <param name="returnMaster"> (optional)</param>
        /// <returns></returns>
        void BrandResourcesGetBrandResources (string accountId, string brandId, string resourceContentType, string langcode = null, string returnMaster = null);

        /// <summary>
        /// Returns the specified branding resource file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <param name="langcode"> (optional)</param>
        /// <param name="returnMaster"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BrandResourcesGetBrandResourcesWithHttpInfo (string accountId, string brandId, string resourceContentType, string langcode = null, string returnMaster = null);
        /// <summary>
        /// Returns the specified account&#39;s list of branding resources (metadata).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>BrandResourcesList</returns>
        BrandResourcesList BrandResourcesGetBrandResourcesList (string accountId, string brandId);

        /// <summary>
        /// Returns the specified account&#39;s list of branding resources (metadata).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>ApiResponse of BrandResourcesList</returns>
        ApiResponse<BrandResourcesList> BrandResourcesGetBrandResourcesListWithHttpInfo (string accountId, string brandId);
        /// <summary>
        /// Uploads a branding resource file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <returns>BrandResources</returns>
        BrandResources BrandResourcesPutBrandResources (string accountId, string brandId, string resourceContentType);

        /// <summary>
        /// Uploads a branding resource file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <returns>ApiResponse of BrandResources</returns>
        ApiResponse<BrandResources> BrandResourcesPutBrandResourcesWithHttpInfo (string accountId, string brandId, string resourceContentType);
        /// <summary>
        /// Deletes one or more brand profiles.
        /// </summary>
        /// <remarks>
        /// Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;) must be set to **true** to use this call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>AccountBrands</returns>
        AccountBrands BrandsDeleteBrands (string accountId, BrandsRequest brandsRequest = null);

        /// <summary>
        /// Deletes one or more brand profiles.
        /// </summary>
        /// <remarks>
        /// Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;) must be set to **true** to use this call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>ApiResponse of AccountBrands</returns>
        ApiResponse<AccountBrands> BrandsDeleteBrandsWithHttpInfo (string accountId, BrandsRequest brandsRequest = null);
        /// <summary>
        /// Gets a list of brand profiles.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;)  must be set to **true** for the account to use this call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="excludeDistributorBrand">When set to **true**, excludes distributor brand information from the response set. (optional)</param>
        /// <param name="includeLogos">When set to **true**, returns the logos associated with the brand. (optional)</param>
        /// <returns>AccountBrands</returns>
        AccountBrands BrandsGetBrands (string accountId, string excludeDistributorBrand = null, string includeLogos = null);

        /// <summary>
        /// Gets a list of brand profiles.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;)  must be set to **true** for the account to use this call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="excludeDistributorBrand">When set to **true**, excludes distributor brand information from the response set. (optional)</param>
        /// <param name="includeLogos">When set to **true**, returns the logos associated with the brand. (optional)</param>
        /// <returns>ApiResponse of AccountBrands</returns>
        ApiResponse<AccountBrands> BrandsGetBrandsWithHttpInfo (string accountId, string excludeDistributorBrand = null, string includeLogos = null);
        /// <summary>
        /// Creates one or more brand profile files for the account.
        /// </summary>
        /// <remarks>
        /// Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSig&#x60;) must be set to **true** for the account to use this call.  An error is returned if &#x60;brandId&#x60; property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the &#x60;Content-Type&#x60; must be &#x60;application/zip&#x60;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>AccountBrands</returns>
        AccountBrands BrandsPostBrands (string accountId, Brand brand = null);

        /// <summary>
        /// Creates one or more brand profile files for the account.
        /// </summary>
        /// <remarks>
        /// Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSig&#x60;) must be set to **true** for the account to use this call.  An error is returned if &#x60;brandId&#x60; property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the &#x60;Content-Type&#x60; must be &#x60;application/zip&#x60;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>ApiResponse of AccountBrands</returns>
        ApiResponse<AccountBrands> BrandsPostBrandsWithHttpInfo (string accountId, Brand brand = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Removes a brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BrandDeleteBrandAsync (string accountId, string brandId);

        /// <summary>
        /// Removes a brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BrandDeleteBrandAsyncWithHttpInfo (string accountId, string brandId);
        /// <summary>
        /// Export a specific brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BrandExportGetBrandExportFileAsync (string accountId, string brandId);

        /// <summary>
        /// Export a specific brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BrandExportGetBrandExportFileAsyncWithHttpInfo (string accountId, string brandId);
        /// <summary>
        /// Get information for a specific brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="includeExternalReferences"> (optional)</param>
        /// <param name="includeLogos"> (optional)</param>
        /// <returns>Task of Brand</returns>
        System.Threading.Tasks.Task<Brand> BrandGetBrandAsync (string accountId, string brandId, string includeExternalReferences = null, string includeLogos = null);

        /// <summary>
        /// Get information for a specific brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="includeExternalReferences"> (optional)</param>
        /// <param name="includeLogos"> (optional)</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        System.Threading.Tasks.Task<ApiResponse<Brand>> BrandGetBrandAsyncWithHttpInfo (string accountId, string brandId, string includeExternalReferences = null, string includeLogos = null);
        /// <summary>
        /// Delete one branding logo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BrandLogoDeleteBrandLogoAsync (string accountId, string brandId, string logoType);

        /// <summary>
        /// Delete one branding logo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BrandLogoDeleteBrandLogoAsyncWithHttpInfo (string accountId, string brandId, string logoType);
        /// <summary>
        /// Obtains the specified image for a brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BrandLogoGetBrandLogoAsync (string accountId, string brandId, string logoType);

        /// <summary>
        /// Obtains the specified image for a brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BrandLogoGetBrandLogoAsyncWithHttpInfo (string accountId, string brandId, string logoType);
        /// <summary>
        /// Put one branding logo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BrandLogoPutBrandLogoAsync (string accountId, string brandId, string logoType);

        /// <summary>
        /// Put one branding logo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BrandLogoPutBrandLogoAsyncWithHttpInfo (string accountId, string brandId, string logoType);
        /// <summary>
        /// Updates an existing brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>Task of Brand</returns>
        System.Threading.Tasks.Task<Brand> BrandPutBrandAsync (string accountId, string brandId, Brand brand = null);

        /// <summary>
        /// Updates an existing brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        System.Threading.Tasks.Task<ApiResponse<Brand>> BrandPutBrandAsyncWithHttpInfo (string accountId, string brandId, Brand brand = null);
        /// <summary>
        /// Returns the specified branding resource file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <param name="langcode"> (optional)</param>
        /// <param name="returnMaster"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BrandResourcesGetBrandResourcesAsync (string accountId, string brandId, string resourceContentType, string langcode = null, string returnMaster = null);

        /// <summary>
        /// Returns the specified branding resource file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <param name="langcode"> (optional)</param>
        /// <param name="returnMaster"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BrandResourcesGetBrandResourcesAsyncWithHttpInfo (string accountId, string brandId, string resourceContentType, string langcode = null, string returnMaster = null);
        /// <summary>
        /// Returns the specified account&#39;s list of branding resources (metadata).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of BrandResourcesList</returns>
        System.Threading.Tasks.Task<BrandResourcesList> BrandResourcesGetBrandResourcesListAsync (string accountId, string brandId);

        /// <summary>
        /// Returns the specified account&#39;s list of branding resources (metadata).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of ApiResponse (BrandResourcesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrandResourcesList>> BrandResourcesGetBrandResourcesListAsyncWithHttpInfo (string accountId, string brandId);
        /// <summary>
        /// Uploads a branding resource file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <returns>Task of BrandResources</returns>
        System.Threading.Tasks.Task<BrandResources> BrandResourcesPutBrandResourcesAsync (string accountId, string brandId, string resourceContentType);

        /// <summary>
        /// Uploads a branding resource file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <returns>Task of ApiResponse (BrandResources)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrandResources>> BrandResourcesPutBrandResourcesAsyncWithHttpInfo (string accountId, string brandId, string resourceContentType);
        /// <summary>
        /// Deletes one or more brand profiles.
        /// </summary>
        /// <remarks>
        /// Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;) must be set to **true** to use this call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of AccountBrands</returns>
        System.Threading.Tasks.Task<AccountBrands> BrandsDeleteBrandsAsync (string accountId, BrandsRequest brandsRequest = null);

        /// <summary>
        /// Deletes one or more brand profiles.
        /// </summary>
        /// <remarks>
        /// Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;) must be set to **true** to use this call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountBrands)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountBrands>> BrandsDeleteBrandsAsyncWithHttpInfo (string accountId, BrandsRequest brandsRequest = null);
        /// <summary>
        /// Gets a list of brand profiles.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;)  must be set to **true** for the account to use this call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="excludeDistributorBrand">When set to **true**, excludes distributor brand information from the response set. (optional)</param>
        /// <param name="includeLogos">When set to **true**, returns the logos associated with the brand. (optional)</param>
        /// <returns>Task of AccountBrands</returns>
        System.Threading.Tasks.Task<AccountBrands> BrandsGetBrandsAsync (string accountId, string excludeDistributorBrand = null, string includeLogos = null);

        /// <summary>
        /// Gets a list of brand profiles.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;)  must be set to **true** for the account to use this call.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="excludeDistributorBrand">When set to **true**, excludes distributor brand information from the response set. (optional)</param>
        /// <param name="includeLogos">When set to **true**, returns the logos associated with the brand. (optional)</param>
        /// <returns>Task of ApiResponse (AccountBrands)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountBrands>> BrandsGetBrandsAsyncWithHttpInfo (string accountId, string excludeDistributorBrand = null, string includeLogos = null);
        /// <summary>
        /// Creates one or more brand profile files for the account.
        /// </summary>
        /// <remarks>
        /// Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSig&#x60;) must be set to **true** for the account to use this call.  An error is returned if &#x60;brandId&#x60; property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the &#x60;Content-Type&#x60; must be &#x60;application/zip&#x60;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>Task of AccountBrands</returns>
        System.Threading.Tasks.Task<AccountBrands> BrandsPostBrandsAsync (string accountId, Brand brand = null);

        /// <summary>
        /// Creates one or more brand profile files for the account.
        /// </summary>
        /// <remarks>
        /// Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSig&#x60;) must be set to **true** for the account to use this call.  An error is returned if &#x60;brandId&#x60; property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the &#x60;Content-Type&#x60; must be &#x60;application/zip&#x60;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountBrands)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountBrands>> BrandsPostBrandsAsyncWithHttpInfo (string accountId, Brand brand = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountBrandsApi : IAccountBrandsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBrandsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountBrandsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBrandsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountBrandsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Removes a brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns></returns>
        public void BrandDeleteBrand (string accountId, string brandId)
        {
             BrandDeleteBrandWithHttpInfo(accountId, brandId);
        }

        /// <summary>
        /// Removes a brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BrandDeleteBrandWithHttpInfo (string accountId, string brandId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandDeleteBrand");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandDeleteBrand");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandDeleteBrand", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BrandDeleteBrandAsync (string accountId, string brandId)
        {
             await BrandDeleteBrandAsyncWithHttpInfo(accountId, brandId);

        }

        /// <summary>
        /// Removes a brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BrandDeleteBrandAsyncWithHttpInfo (string accountId, string brandId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandDeleteBrand");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandDeleteBrand");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandDeleteBrand", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Export a specific brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns></returns>
        public void BrandExportGetBrandExportFile (string accountId, string brandId)
        {
             BrandExportGetBrandExportFileWithHttpInfo(accountId, brandId);
        }

        /// <summary>
        /// Export a specific brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BrandExportGetBrandExportFileWithHttpInfo (string accountId, string brandId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandExportGetBrandExportFile");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandExportGetBrandExportFile");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandExportGetBrandExportFile", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Export a specific brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BrandExportGetBrandExportFileAsync (string accountId, string brandId)
        {
             await BrandExportGetBrandExportFileAsyncWithHttpInfo(accountId, brandId);

        }

        /// <summary>
        /// Export a specific brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BrandExportGetBrandExportFileAsyncWithHttpInfo (string accountId, string brandId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandExportGetBrandExportFile");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandExportGetBrandExportFile");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandExportGetBrandExportFile", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get information for a specific brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="includeExternalReferences"> (optional)</param>
        /// <param name="includeLogos"> (optional)</param>
        /// <returns>Brand</returns>
        public Brand BrandGetBrand (string accountId, string brandId, string includeExternalReferences = null, string includeLogos = null)
        {
             ApiResponse<Brand> localVarResponse = BrandGetBrandWithHttpInfo(accountId, brandId, includeExternalReferences, includeLogos);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information for a specific brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="includeExternalReferences"> (optional)</param>
        /// <param name="includeLogos"> (optional)</param>
        /// <returns>ApiResponse of Brand</returns>
        public ApiResponse< Brand > BrandGetBrandWithHttpInfo (string accountId, string brandId, string includeExternalReferences = null, string includeLogos = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandGetBrand");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandGetBrand");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (includeExternalReferences != null) localVarQueryParams.Add("include_external_references", Configuration.ApiClient.ParameterToString(includeExternalReferences)); // query parameter
            if (includeLogos != null) localVarQueryParams.Add("include_logos", Configuration.ApiClient.ParameterToString(includeLogos)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandGetBrand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Brand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Brand) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Brand)));
            
        }

        /// <summary>
        /// Get information for a specific brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="includeExternalReferences"> (optional)</param>
        /// <param name="includeLogos"> (optional)</param>
        /// <returns>Task of Brand</returns>
        public async System.Threading.Tasks.Task<Brand> BrandGetBrandAsync (string accountId, string brandId, string includeExternalReferences = null, string includeLogos = null)
        {
             ApiResponse<Brand> localVarResponse = await BrandGetBrandAsyncWithHttpInfo(accountId, brandId, includeExternalReferences, includeLogos);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information for a specific brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="includeExternalReferences"> (optional)</param>
        /// <param name="includeLogos"> (optional)</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Brand>> BrandGetBrandAsyncWithHttpInfo (string accountId, string brandId, string includeExternalReferences = null, string includeLogos = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandGetBrand");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandGetBrand");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (includeExternalReferences != null) localVarQueryParams.Add("include_external_references", Configuration.ApiClient.ParameterToString(includeExternalReferences)); // query parameter
            if (includeLogos != null) localVarQueryParams.Add("include_logos", Configuration.ApiClient.ParameterToString(includeLogos)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandGetBrand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Brand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Brand) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Brand)));
            
        }

        /// <summary>
        /// Delete one branding logo. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns></returns>
        public void BrandLogoDeleteBrandLogo (string accountId, string brandId, string logoType)
        {
             BrandLogoDeleteBrandLogoWithHttpInfo(accountId, brandId, logoType);
        }

        /// <summary>
        /// Delete one branding logo. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BrandLogoDeleteBrandLogoWithHttpInfo (string accountId, string brandId, string logoType)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandLogoDeleteBrandLogo");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandLogoDeleteBrandLogo");
            // verify the required parameter 'logoType' is set
            if (logoType == null)
                throw new ApiException(400, "Missing required parameter 'logoType' when calling AccountBrandsApi->BrandLogoDeleteBrandLogo");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/logos/{logoType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (logoType != null) localVarPathParams.Add("logoType", Configuration.ApiClient.ParameterToString(logoType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandLogoDeleteBrandLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete one branding logo. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BrandLogoDeleteBrandLogoAsync (string accountId, string brandId, string logoType)
        {
             await BrandLogoDeleteBrandLogoAsyncWithHttpInfo(accountId, brandId, logoType);

        }

        /// <summary>
        /// Delete one branding logo. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BrandLogoDeleteBrandLogoAsyncWithHttpInfo (string accountId, string brandId, string logoType)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandLogoDeleteBrandLogo");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandLogoDeleteBrandLogo");
            // verify the required parameter 'logoType' is set
            if (logoType == null)
                throw new ApiException(400, "Missing required parameter 'logoType' when calling AccountBrandsApi->BrandLogoDeleteBrandLogo");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/logos/{logoType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (logoType != null) localVarPathParams.Add("logoType", Configuration.ApiClient.ParameterToString(logoType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandLogoDeleteBrandLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Obtains the specified image for a brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns></returns>
        public void BrandLogoGetBrandLogo (string accountId, string brandId, string logoType)
        {
             BrandLogoGetBrandLogoWithHttpInfo(accountId, brandId, logoType);
        }

        /// <summary>
        /// Obtains the specified image for a brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BrandLogoGetBrandLogoWithHttpInfo (string accountId, string brandId, string logoType)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandLogoGetBrandLogo");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandLogoGetBrandLogo");
            // verify the required parameter 'logoType' is set
            if (logoType == null)
                throw new ApiException(400, "Missing required parameter 'logoType' when calling AccountBrandsApi->BrandLogoGetBrandLogo");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/logos/{logoType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (logoType != null) localVarPathParams.Add("logoType", Configuration.ApiClient.ParameterToString(logoType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandLogoGetBrandLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Obtains the specified image for a brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BrandLogoGetBrandLogoAsync (string accountId, string brandId, string logoType)
        {
             await BrandLogoGetBrandLogoAsyncWithHttpInfo(accountId, brandId, logoType);

        }

        /// <summary>
        /// Obtains the specified image for a brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BrandLogoGetBrandLogoAsyncWithHttpInfo (string accountId, string brandId, string logoType)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandLogoGetBrandLogo");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandLogoGetBrandLogo");
            // verify the required parameter 'logoType' is set
            if (logoType == null)
                throw new ApiException(400, "Missing required parameter 'logoType' when calling AccountBrandsApi->BrandLogoGetBrandLogo");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/logos/{logoType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (logoType != null) localVarPathParams.Add("logoType", Configuration.ApiClient.ParameterToString(logoType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandLogoGetBrandLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Put one branding logo. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns></returns>
        public void BrandLogoPutBrandLogo (string accountId, string brandId, string logoType)
        {
             BrandLogoPutBrandLogoWithHttpInfo(accountId, brandId, logoType);
        }

        /// <summary>
        /// Put one branding logo. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BrandLogoPutBrandLogoWithHttpInfo (string accountId, string brandId, string logoType)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandLogoPutBrandLogo");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandLogoPutBrandLogo");
            // verify the required parameter 'logoType' is set
            if (logoType == null)
                throw new ApiException(400, "Missing required parameter 'logoType' when calling AccountBrandsApi->BrandLogoPutBrandLogo");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/logos/{logoType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (logoType != null) localVarPathParams.Add("logoType", Configuration.ApiClient.ParameterToString(logoType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandLogoPutBrandLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Put one branding logo. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BrandLogoPutBrandLogoAsync (string accountId, string brandId, string logoType)
        {
             await BrandLogoPutBrandLogoAsyncWithHttpInfo(accountId, brandId, logoType);

        }

        /// <summary>
        /// Put one branding logo. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="logoType">One of **Primary**, **Secondary** or **Email**.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BrandLogoPutBrandLogoAsyncWithHttpInfo (string accountId, string brandId, string logoType)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandLogoPutBrandLogo");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandLogoPutBrandLogo");
            // verify the required parameter 'logoType' is set
            if (logoType == null)
                throw new ApiException(400, "Missing required parameter 'logoType' when calling AccountBrandsApi->BrandLogoPutBrandLogo");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/logos/{logoType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (logoType != null) localVarPathParams.Add("logoType", Configuration.ApiClient.ParameterToString(logoType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandLogoPutBrandLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates an existing brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>Brand</returns>
        public Brand BrandPutBrand (string accountId, string brandId, Brand brand = null)
        {
             ApiResponse<Brand> localVarResponse = BrandPutBrandWithHttpInfo(accountId, brandId, brand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>ApiResponse of Brand</returns>
        public ApiResponse< Brand > BrandPutBrandWithHttpInfo (string accountId, string brandId, Brand brand = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandPutBrand");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandPutBrand");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (brand != null && brand.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(brand); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brand; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandPutBrand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Brand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Brand) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Brand)));
            
        }

        /// <summary>
        /// Updates an existing brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>Task of Brand</returns>
        public async System.Threading.Tasks.Task<Brand> BrandPutBrandAsync (string accountId, string brandId, Brand brand = null)
        {
             ApiResponse<Brand> localVarResponse = await BrandPutBrandAsyncWithHttpInfo(accountId, brandId, brand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing brand. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Brand>> BrandPutBrandAsyncWithHttpInfo (string accountId, string brandId, Brand brand = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandPutBrand");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandPutBrand");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (brand != null && brand.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(brand); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brand; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandPutBrand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Brand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Brand) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Brand)));
            
        }

        /// <summary>
        /// Returns the specified branding resource file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <param name="langcode"> (optional)</param>
        /// <param name="returnMaster"> (optional)</param>
        /// <returns></returns>
        public void BrandResourcesGetBrandResources (string accountId, string brandId, string resourceContentType, string langcode = null, string returnMaster = null)
        {
             BrandResourcesGetBrandResourcesWithHttpInfo(accountId, brandId, resourceContentType, langcode, returnMaster);
        }

        /// <summary>
        /// Returns the specified branding resource file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <param name="langcode"> (optional)</param>
        /// <param name="returnMaster"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BrandResourcesGetBrandResourcesWithHttpInfo (string accountId, string brandId, string resourceContentType, string langcode = null, string returnMaster = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandResourcesGetBrandResources");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandResourcesGetBrandResources");
            // verify the required parameter 'resourceContentType' is set
            if (resourceContentType == null)
                throw new ApiException(400, "Missing required parameter 'resourceContentType' when calling AccountBrandsApi->BrandResourcesGetBrandResources");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (resourceContentType != null) localVarPathParams.Add("resourceContentType", Configuration.ApiClient.ParameterToString(resourceContentType)); // path parameter
            if (langcode != null) localVarQueryParams.Add("langcode", Configuration.ApiClient.ParameterToString(langcode)); // query parameter
            if (returnMaster != null) localVarQueryParams.Add("return_master", Configuration.ApiClient.ParameterToString(returnMaster)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandResourcesGetBrandResources", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the specified branding resource file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <param name="langcode"> (optional)</param>
        /// <param name="returnMaster"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BrandResourcesGetBrandResourcesAsync (string accountId, string brandId, string resourceContentType, string langcode = null, string returnMaster = null)
        {
             await BrandResourcesGetBrandResourcesAsyncWithHttpInfo(accountId, brandId, resourceContentType, langcode, returnMaster);

        }

        /// <summary>
        /// Returns the specified branding resource file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <param name="langcode"> (optional)</param>
        /// <param name="returnMaster"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BrandResourcesGetBrandResourcesAsyncWithHttpInfo (string accountId, string brandId, string resourceContentType, string langcode = null, string returnMaster = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandResourcesGetBrandResources");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandResourcesGetBrandResources");
            // verify the required parameter 'resourceContentType' is set
            if (resourceContentType == null)
                throw new ApiException(400, "Missing required parameter 'resourceContentType' when calling AccountBrandsApi->BrandResourcesGetBrandResources");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (resourceContentType != null) localVarPathParams.Add("resourceContentType", Configuration.ApiClient.ParameterToString(resourceContentType)); // path parameter
            if (langcode != null) localVarQueryParams.Add("langcode", Configuration.ApiClient.ParameterToString(langcode)); // query parameter
            if (returnMaster != null) localVarQueryParams.Add("return_master", Configuration.ApiClient.ParameterToString(returnMaster)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandResourcesGetBrandResources", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the specified account&#39;s list of branding resources (metadata). 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>BrandResourcesList</returns>
        public BrandResourcesList BrandResourcesGetBrandResourcesList (string accountId, string brandId)
        {
             ApiResponse<BrandResourcesList> localVarResponse = BrandResourcesGetBrandResourcesListWithHttpInfo(accountId, brandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the specified account&#39;s list of branding resources (metadata). 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>ApiResponse of BrandResourcesList</returns>
        public ApiResponse< BrandResourcesList > BrandResourcesGetBrandResourcesListWithHttpInfo (string accountId, string brandId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandResourcesGetBrandResourcesList");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandResourcesGetBrandResourcesList");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandResourcesGetBrandResourcesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrandResourcesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrandResourcesList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandResourcesList)));
            
        }

        /// <summary>
        /// Returns the specified account&#39;s list of branding resources (metadata). 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of BrandResourcesList</returns>
        public async System.Threading.Tasks.Task<BrandResourcesList> BrandResourcesGetBrandResourcesListAsync (string accountId, string brandId)
        {
             ApiResponse<BrandResourcesList> localVarResponse = await BrandResourcesGetBrandResourcesListAsyncWithHttpInfo(accountId, brandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the specified account&#39;s list of branding resources (metadata). 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <returns>Task of ApiResponse (BrandResourcesList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrandResourcesList>> BrandResourcesGetBrandResourcesListAsyncWithHttpInfo (string accountId, string brandId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandResourcesGetBrandResourcesList");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandResourcesGetBrandResourcesList");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandResourcesGetBrandResourcesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrandResourcesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrandResourcesList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandResourcesList)));
            
        }

        /// <summary>
        /// Uploads a branding resource file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <returns>BrandResources</returns>
        public BrandResources BrandResourcesPutBrandResources (string accountId, string brandId, string resourceContentType)
        {
             ApiResponse<BrandResources> localVarResponse = BrandResourcesPutBrandResourcesWithHttpInfo(accountId, brandId, resourceContentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads a branding resource file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <returns>ApiResponse of BrandResources</returns>
        public ApiResponse< BrandResources > BrandResourcesPutBrandResourcesWithHttpInfo (string accountId, string brandId, string resourceContentType)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandResourcesPutBrandResources");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandResourcesPutBrandResources");
            // verify the required parameter 'resourceContentType' is set
            if (resourceContentType == null)
                throw new ApiException(400, "Missing required parameter 'resourceContentType' when calling AccountBrandsApi->BrandResourcesPutBrandResources");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (resourceContentType != null) localVarPathParams.Add("resourceContentType", Configuration.ApiClient.ParameterToString(resourceContentType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandResourcesPutBrandResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrandResources>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrandResources) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandResources)));
            
        }

        /// <summary>
        /// Uploads a branding resource file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <returns>Task of BrandResources</returns>
        public async System.Threading.Tasks.Task<BrandResources> BrandResourcesPutBrandResourcesAsync (string accountId, string brandId, string resourceContentType)
        {
             ApiResponse<BrandResources> localVarResponse = await BrandResourcesPutBrandResourcesAsyncWithHttpInfo(accountId, brandId, resourceContentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads a branding resource file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandId">The unique identifier of a brand.</param>
        /// <param name="resourceContentType"></param>
        /// <returns>Task of ApiResponse (BrandResources)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BrandResources>> BrandResourcesPutBrandResourcesAsyncWithHttpInfo (string accountId, string brandId, string resourceContentType)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandResourcesPutBrandResources");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling AccountBrandsApi->BrandResourcesPutBrandResources");
            // verify the required parameter 'resourceContentType' is set
            if (resourceContentType == null)
                throw new ApiException(400, "Missing required parameter 'resourceContentType' when calling AccountBrandsApi->BrandResourcesPutBrandResources");

            var localVarPath = "/v2/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (resourceContentType != null) localVarPathParams.Add("resourceContentType", Configuration.ApiClient.ParameterToString(resourceContentType)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandResourcesPutBrandResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BrandResources>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BrandResources) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandResources)));
            
        }

        /// <summary>
        /// Deletes one or more brand profiles. Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;) must be set to **true** to use this call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>AccountBrands</returns>
        public AccountBrands BrandsDeleteBrands (string accountId, BrandsRequest brandsRequest = null)
        {
             ApiResponse<AccountBrands> localVarResponse = BrandsDeleteBrandsWithHttpInfo(accountId, brandsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more brand profiles. Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;) must be set to **true** to use this call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>ApiResponse of AccountBrands</returns>
        public ApiResponse< AccountBrands > BrandsDeleteBrandsWithHttpInfo (string accountId, BrandsRequest brandsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandsDeleteBrands");

            var localVarPath = "/v2/accounts/{accountId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandsRequest != null && brandsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(brandsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brandsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandsDeleteBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountBrands>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountBrands) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountBrands)));
            
        }

        /// <summary>
        /// Deletes one or more brand profiles. Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;) must be set to **true** to use this call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of AccountBrands</returns>
        public async System.Threading.Tasks.Task<AccountBrands> BrandsDeleteBrandsAsync (string accountId, BrandsRequest brandsRequest = null)
        {
             ApiResponse<AccountBrands> localVarResponse = await BrandsDeleteBrandsAsyncWithHttpInfo(accountId, brandsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes one or more brand profiles. Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;) must be set to **true** to use this call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brandsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountBrands)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountBrands>> BrandsDeleteBrandsAsyncWithHttpInfo (string accountId, BrandsRequest brandsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandsDeleteBrands");

            var localVarPath = "/v2/accounts/{accountId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brandsRequest != null && brandsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(brandsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brandsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandsDeleteBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountBrands>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountBrands) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountBrands)));
            
        }

        /// <summary>
        /// Gets a list of brand profiles. Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;)  must be set to **true** for the account to use this call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="excludeDistributorBrand">When set to **true**, excludes distributor brand information from the response set. (optional)</param>
        /// <param name="includeLogos">When set to **true**, returns the logos associated with the brand. (optional)</param>
        /// <returns>AccountBrands</returns>
        public AccountBrands BrandsGetBrands (string accountId, string excludeDistributorBrand = null, string includeLogos = null)
        {
             ApiResponse<AccountBrands> localVarResponse = BrandsGetBrandsWithHttpInfo(accountId, excludeDistributorBrand, includeLogos);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of brand profiles. Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;)  must be set to **true** for the account to use this call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="excludeDistributorBrand">When set to **true**, excludes distributor brand information from the response set. (optional)</param>
        /// <param name="includeLogos">When set to **true**, returns the logos associated with the brand. (optional)</param>
        /// <returns>ApiResponse of AccountBrands</returns>
        public ApiResponse< AccountBrands > BrandsGetBrandsWithHttpInfo (string accountId, string excludeDistributorBrand = null, string includeLogos = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandsGetBrands");

            var localVarPath = "/v2/accounts/{accountId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (excludeDistributorBrand != null) localVarQueryParams.Add("exclude_distributor_brand", Configuration.ApiClient.ParameterToString(excludeDistributorBrand)); // query parameter
            if (includeLogos != null) localVarQueryParams.Add("include_logos", Configuration.ApiClient.ParameterToString(includeLogos)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandsGetBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountBrands>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountBrands) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountBrands)));
            
        }

        /// <summary>
        /// Gets a list of brand profiles. Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;)  must be set to **true** for the account to use this call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="excludeDistributorBrand">When set to **true**, excludes distributor brand information from the response set. (optional)</param>
        /// <param name="includeLogos">When set to **true**, returns the logos associated with the brand. (optional)</param>
        /// <returns>Task of AccountBrands</returns>
        public async System.Threading.Tasks.Task<AccountBrands> BrandsGetBrandsAsync (string accountId, string excludeDistributorBrand = null, string includeLogos = null)
        {
             ApiResponse<AccountBrands> localVarResponse = await BrandsGetBrandsAsyncWithHttpInfo(accountId, excludeDistributorBrand, includeLogos);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of brand profiles. Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;)  must be set to **true** for the account to use this call.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="excludeDistributorBrand">When set to **true**, excludes distributor brand information from the response set. (optional)</param>
        /// <param name="includeLogos">When set to **true**, returns the logos associated with the brand. (optional)</param>
        /// <returns>Task of ApiResponse (AccountBrands)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountBrands>> BrandsGetBrandsAsyncWithHttpInfo (string accountId, string excludeDistributorBrand = null, string includeLogos = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandsGetBrands");

            var localVarPath = "/v2/accounts/{accountId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (excludeDistributorBrand != null) localVarQueryParams.Add("exclude_distributor_brand", Configuration.ApiClient.ParameterToString(excludeDistributorBrand)); // query parameter
            if (includeLogos != null) localVarQueryParams.Add("include_logos", Configuration.ApiClient.ParameterToString(includeLogos)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandsGetBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountBrands>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountBrands) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountBrands)));
            
        }

        /// <summary>
        /// Creates one or more brand profile files for the account. Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSig&#x60;) must be set to **true** for the account to use this call.  An error is returned if &#x60;brandId&#x60; property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the &#x60;Content-Type&#x60; must be &#x60;application/zip&#x60;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>AccountBrands</returns>
        public AccountBrands BrandsPostBrands (string accountId, Brand brand = null)
        {
             ApiResponse<AccountBrands> localVarResponse = BrandsPostBrandsWithHttpInfo(accountId, brand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more brand profile files for the account. Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSig&#x60;) must be set to **true** for the account to use this call.  An error is returned if &#x60;brandId&#x60; property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the &#x60;Content-Type&#x60; must be &#x60;application/zip&#x60;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>ApiResponse of AccountBrands</returns>
        public ApiResponse< AccountBrands > BrandsPostBrandsWithHttpInfo (string accountId, Brand brand = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandsPostBrands");

            var localVarPath = "/v2/accounts/{accountId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brand != null && brand.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(brand); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brand; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandsPostBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountBrands>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountBrands) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountBrands)));
            
        }

        /// <summary>
        /// Creates one or more brand profile files for the account. Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSig&#x60;) must be set to **true** for the account to use this call.  An error is returned if &#x60;brandId&#x60; property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the &#x60;Content-Type&#x60; must be &#x60;application/zip&#x60;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>Task of AccountBrands</returns>
        public async System.Threading.Tasks.Task<AccountBrands> BrandsPostBrandsAsync (string accountId, Brand brand = null)
        {
             ApiResponse<AccountBrands> localVarResponse = await BrandsPostBrandsAsyncWithHttpInfo(accountId, brand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates one or more brand profile files for the account. Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSig&#x60;) must be set to **true** for the account to use this call.  An error is returned if &#x60;brandId&#x60; property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the &#x60;Content-Type&#x60; must be &#x60;application/zip&#x60;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="brand"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountBrands)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountBrands>> BrandsPostBrandsAsyncWithHttpInfo (string accountId, Brand brand = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountBrandsApi->BrandsPostBrands");

            var localVarPath = "/v2/accounts/{accountId}/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (brand != null && brand.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(brand); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brand; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BrandsPostBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountBrands>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountBrands) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountBrands)));
            
        }

    }
}
