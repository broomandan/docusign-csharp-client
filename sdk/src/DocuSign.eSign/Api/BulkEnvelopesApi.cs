/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBulkEnvelopesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the status of a specified bulk send operation.
        /// </summary>
        /// <remarks>
        /// Retrieves the status information of a single bulk recipient batch. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="batchId"></param>
        /// <param name="count">Specifies the number of entries to return. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">Specifies the location in the list of envelopes from which to start. (optional)</param>
        /// <returns>BulkEnvelopeStatus</returns>
        BulkEnvelopeStatus BulkEnvelopesGetBulkEnvelopesBatchId (string accountId, string batchId, string count = null, string include = null, string startPosition = null);

        /// <summary>
        /// Gets the status of a specified bulk send operation.
        /// </summary>
        /// <remarks>
        /// Retrieves the status information of a single bulk recipient batch. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="batchId"></param>
        /// <param name="count">Specifies the number of entries to return. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">Specifies the location in the list of envelopes from which to start. (optional)</param>
        /// <returns>ApiResponse of BulkEnvelopeStatus</returns>
        ApiResponse<BulkEnvelopeStatus> BulkEnvelopesGetBulkEnvelopesBatchIdWithHttpInfo (string accountId, string batchId, string count = null, string include = null, string startPosition = null);
        /// <summary>
        /// Gets status information about bulk recipient batches.
        /// </summary>
        /// <remarks>
        /// Retrieves status information about all the bulk recipient batches. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. The response includes general information about each bulk recipient batch.   The response returns information about the envelopes sent with bulk recipient batches, including the &#x60;batchId&#x60; property, which can be used to retrieve a more detailed status of individual bulk recipient batches.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">The number of results to return. This can be 1 to 20. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">The position of the bulk envelope items in the response. This is used for repeated calls, when the number of bulk envelopes returned is too large for one return. The default value is 0. (optional)</param>
        /// <returns>BulkEnvelopes</returns>
        BulkEnvelopes BulkEnvelopesGetEnvelopesBulk (string accountId, string count = null, string include = null, string startPosition = null);

        /// <summary>
        /// Gets status information about bulk recipient batches.
        /// </summary>
        /// <remarks>
        /// Retrieves status information about all the bulk recipient batches. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. The response includes general information about each bulk recipient batch.   The response returns information about the envelopes sent with bulk recipient batches, including the &#x60;batchId&#x60; property, which can be used to retrieve a more detailed status of individual bulk recipient batches.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">The number of results to return. This can be 1 to 20. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">The position of the bulk envelope items in the response. This is used for repeated calls, when the number of bulk envelopes returned is too large for one return. The default value is 0. (optional)</param>
        /// <returns>ApiResponse of BulkEnvelopes</returns>
        ApiResponse<BulkEnvelopes> BulkEnvelopesGetEnvelopesBulkWithHttpInfo (string accountId, string count = null, string include = null, string startPosition = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the status of a specified bulk send operation.
        /// </summary>
        /// <remarks>
        /// Retrieves the status information of a single bulk recipient batch. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="batchId"></param>
        /// <param name="count">Specifies the number of entries to return. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">Specifies the location in the list of envelopes from which to start. (optional)</param>
        /// <returns>Task of BulkEnvelopeStatus</returns>
        System.Threading.Tasks.Task<BulkEnvelopeStatus> BulkEnvelopesGetBulkEnvelopesBatchIdAsync (string accountId, string batchId, string count = null, string include = null, string startPosition = null);

        /// <summary>
        /// Gets the status of a specified bulk send operation.
        /// </summary>
        /// <remarks>
        /// Retrieves the status information of a single bulk recipient batch. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="batchId"></param>
        /// <param name="count">Specifies the number of entries to return. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">Specifies the location in the list of envelopes from which to start. (optional)</param>
        /// <returns>Task of ApiResponse (BulkEnvelopeStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkEnvelopeStatus>> BulkEnvelopesGetBulkEnvelopesBatchIdAsyncWithHttpInfo (string accountId, string batchId, string count = null, string include = null, string startPosition = null);
        /// <summary>
        /// Gets status information about bulk recipient batches.
        /// </summary>
        /// <remarks>
        /// Retrieves status information about all the bulk recipient batches. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. The response includes general information about each bulk recipient batch.   The response returns information about the envelopes sent with bulk recipient batches, including the &#x60;batchId&#x60; property, which can be used to retrieve a more detailed status of individual bulk recipient batches.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">The number of results to return. This can be 1 to 20. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">The position of the bulk envelope items in the response. This is used for repeated calls, when the number of bulk envelopes returned is too large for one return. The default value is 0. (optional)</param>
        /// <returns>Task of BulkEnvelopes</returns>
        System.Threading.Tasks.Task<BulkEnvelopes> BulkEnvelopesGetEnvelopesBulkAsync (string accountId, string count = null, string include = null, string startPosition = null);

        /// <summary>
        /// Gets status information about bulk recipient batches.
        /// </summary>
        /// <remarks>
        /// Retrieves status information about all the bulk recipient batches. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. The response includes general information about each bulk recipient batch.   The response returns information about the envelopes sent with bulk recipient batches, including the &#x60;batchId&#x60; property, which can be used to retrieve a more detailed status of individual bulk recipient batches.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">The number of results to return. This can be 1 to 20. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">The position of the bulk envelope items in the response. This is used for repeated calls, when the number of bulk envelopes returned is too large for one return. The default value is 0. (optional)</param>
        /// <returns>Task of ApiResponse (BulkEnvelopes)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkEnvelopes>> BulkEnvelopesGetEnvelopesBulkAsyncWithHttpInfo (string accountId, string count = null, string include = null, string startPosition = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BulkEnvelopesApi : IBulkEnvelopesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkEnvelopesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BulkEnvelopesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkEnvelopesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BulkEnvelopesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the status of a specified bulk send operation. Retrieves the status information of a single bulk recipient batch. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="batchId"></param>
        /// <param name="count">Specifies the number of entries to return. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">Specifies the location in the list of envelopes from which to start. (optional)</param>
        /// <returns>BulkEnvelopeStatus</returns>
        public BulkEnvelopeStatus BulkEnvelopesGetBulkEnvelopesBatchId (string accountId, string batchId, string count = null, string include = null, string startPosition = null)
        {
             ApiResponse<BulkEnvelopeStatus> localVarResponse = BulkEnvelopesGetBulkEnvelopesBatchIdWithHttpInfo(accountId, batchId, count, include, startPosition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of a specified bulk send operation. Retrieves the status information of a single bulk recipient batch. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="batchId"></param>
        /// <param name="count">Specifies the number of entries to return. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">Specifies the location in the list of envelopes from which to start. (optional)</param>
        /// <returns>ApiResponse of BulkEnvelopeStatus</returns>
        public ApiResponse< BulkEnvelopeStatus > BulkEnvelopesGetBulkEnvelopesBatchIdWithHttpInfo (string accountId, string batchId, string count = null, string include = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkEnvelopesApi->BulkEnvelopesGetBulkEnvelopesBatchId");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling BulkEnvelopesApi->BulkEnvelopesGetBulkEnvelopesBatchId");

            var localVarPath = "/v2/accounts/{accountId}/bulk_envelopes/{batchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", Configuration.ApiClient.ParameterToString(batchId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkEnvelopesGetBulkEnvelopesBatchId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkEnvelopeStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkEnvelopeStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkEnvelopeStatus)));
            
        }

        /// <summary>
        /// Gets the status of a specified bulk send operation. Retrieves the status information of a single bulk recipient batch. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="batchId"></param>
        /// <param name="count">Specifies the number of entries to return. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">Specifies the location in the list of envelopes from which to start. (optional)</param>
        /// <returns>Task of BulkEnvelopeStatus</returns>
        public async System.Threading.Tasks.Task<BulkEnvelopeStatus> BulkEnvelopesGetBulkEnvelopesBatchIdAsync (string accountId, string batchId, string count = null, string include = null, string startPosition = null)
        {
             ApiResponse<BulkEnvelopeStatus> localVarResponse = await BulkEnvelopesGetBulkEnvelopesBatchIdAsyncWithHttpInfo(accountId, batchId, count, include, startPosition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the status of a specified bulk send operation. Retrieves the status information of a single bulk recipient batch. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="batchId"></param>
        /// <param name="count">Specifies the number of entries to return. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">Specifies the location in the list of envelopes from which to start. (optional)</param>
        /// <returns>Task of ApiResponse (BulkEnvelopeStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkEnvelopeStatus>> BulkEnvelopesGetBulkEnvelopesBatchIdAsyncWithHttpInfo (string accountId, string batchId, string count = null, string include = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkEnvelopesApi->BulkEnvelopesGetBulkEnvelopesBatchId");
            // verify the required parameter 'batchId' is set
            if (batchId == null)
                throw new ApiException(400, "Missing required parameter 'batchId' when calling BulkEnvelopesApi->BulkEnvelopesGetBulkEnvelopesBatchId");

            var localVarPath = "/v2/accounts/{accountId}/bulk_envelopes/{batchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (batchId != null) localVarPathParams.Add("batchId", Configuration.ApiClient.ParameterToString(batchId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkEnvelopesGetBulkEnvelopesBatchId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkEnvelopeStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkEnvelopeStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkEnvelopeStatus)));
            
        }

        /// <summary>
        /// Gets status information about bulk recipient batches. Retrieves status information about all the bulk recipient batches. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. The response includes general information about each bulk recipient batch.   The response returns information about the envelopes sent with bulk recipient batches, including the &#x60;batchId&#x60; property, which can be used to retrieve a more detailed status of individual bulk recipient batches.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">The number of results to return. This can be 1 to 20. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">The position of the bulk envelope items in the response. This is used for repeated calls, when the number of bulk envelopes returned is too large for one return. The default value is 0. (optional)</param>
        /// <returns>BulkEnvelopes</returns>
        public BulkEnvelopes BulkEnvelopesGetEnvelopesBulk (string accountId, string count = null, string include = null, string startPosition = null)
        {
             ApiResponse<BulkEnvelopes> localVarResponse = BulkEnvelopesGetEnvelopesBulkWithHttpInfo(accountId, count, include, startPosition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets status information about bulk recipient batches. Retrieves status information about all the bulk recipient batches. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. The response includes general information about each bulk recipient batch.   The response returns information about the envelopes sent with bulk recipient batches, including the &#x60;batchId&#x60; property, which can be used to retrieve a more detailed status of individual bulk recipient batches.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">The number of results to return. This can be 1 to 20. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">The position of the bulk envelope items in the response. This is used for repeated calls, when the number of bulk envelopes returned is too large for one return. The default value is 0. (optional)</param>
        /// <returns>ApiResponse of BulkEnvelopes</returns>
        public ApiResponse< BulkEnvelopes > BulkEnvelopesGetEnvelopesBulkWithHttpInfo (string accountId, string count = null, string include = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkEnvelopesApi->BulkEnvelopesGetEnvelopesBulk");

            var localVarPath = "/v2/accounts/{accountId}/bulk_envelopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkEnvelopesGetEnvelopesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkEnvelopes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkEnvelopes) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkEnvelopes)));
            
        }

        /// <summary>
        /// Gets status information about bulk recipient batches. Retrieves status information about all the bulk recipient batches. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. The response includes general information about each bulk recipient batch.   The response returns information about the envelopes sent with bulk recipient batches, including the &#x60;batchId&#x60; property, which can be used to retrieve a more detailed status of individual bulk recipient batches.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">The number of results to return. This can be 1 to 20. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">The position of the bulk envelope items in the response. This is used for repeated calls, when the number of bulk envelopes returned is too large for one return. The default value is 0. (optional)</param>
        /// <returns>Task of BulkEnvelopes</returns>
        public async System.Threading.Tasks.Task<BulkEnvelopes> BulkEnvelopesGetEnvelopesBulkAsync (string accountId, string count = null, string include = null, string startPosition = null)
        {
             ApiResponse<BulkEnvelopes> localVarResponse = await BulkEnvelopesGetEnvelopesBulkAsyncWithHttpInfo(accountId, count, include, startPosition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets status information about bulk recipient batches. Retrieves status information about all the bulk recipient batches. A bulk recipient batch is the set of envelopes sent from a single bulk recipient file. The response includes general information about each bulk recipient batch.   The response returns information about the envelopes sent with bulk recipient batches, including the &#x60;batchId&#x60; property, which can be used to retrieve a more detailed status of individual bulk recipient batches.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">The number of results to return. This can be 1 to 20. (optional)</param>
        /// <param name="include">Specifies which entries are included in the response. Multiple entries can be included by using commas in the query string (example: ?include&#x3D;\&quot;failed,queued\&quot;)   Valid values:  * all - Returns all entries. If present, overrides all other query settings. This is the default if no query string is provided. * failed - Entries with a failed status. * processing - Entries with a processing status. * queued - Entries with a queued status. * sent - Entries with a sent status.   (optional)</param>
        /// <param name="startPosition">The position of the bulk envelope items in the response. This is used for repeated calls, when the number of bulk envelopes returned is too large for one return. The default value is 0. (optional)</param>
        /// <returns>Task of ApiResponse (BulkEnvelopes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkEnvelopes>> BulkEnvelopesGetEnvelopesBulkAsyncWithHttpInfo (string accountId, string count = null, string include = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling BulkEnvelopesApi->BulkEnvelopesGetEnvelopesBulk");

            var localVarPath = "/v2/accounts/{accountId}/bulk_envelopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkEnvelopesGetEnvelopesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkEnvelopes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkEnvelopes) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkEnvelopes)));
            
        }

    }
}
