/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPowerFormsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns></returns>
        void PowerFormsDeletePowerForm (string accountId, string powerFormId);

        /// <summary>
        /// Delete a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PowerFormsDeletePowerFormWithHttpInfo (string accountId, string powerFormId);
        /// <summary>
        /// Deletes one or more PowerForms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>PowerFormsResponse</returns>
        PowerFormsResponse PowerFormsDeletePowerFormsList (string accountId, PowerFormsRequest powerFormsRequest = null);

        /// <summary>
        /// Deletes one or more PowerForms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>ApiResponse of PowerFormsResponse</returns>
        ApiResponse<PowerFormsResponse> PowerFormsDeletePowerFormsListWithHttpInfo (string accountId, PowerFormsRequest powerFormsRequest = null);
        /// <summary>
        /// Returns a single PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>PowerForms</returns>
        PowerForms PowerFormsGetPowerForm (string accountId, string powerFormId);

        /// <summary>
        /// Returns a single PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>ApiResponse of PowerForms</returns>
        ApiResponse<PowerForms> PowerFormsGetPowerFormWithHttpInfo (string accountId, string powerFormId);
        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>PowerFormsResponse</returns>
        PowerFormsResponse PowerFormsGetPowerFormsList (string accountId, string fromDate = null, string order = null, string orderBy = null, string toDate = null);

        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>ApiResponse of PowerFormsResponse</returns>
        ApiResponse<PowerFormsResponse> PowerFormsGetPowerFormsListWithHttpInfo (string accountId, string fromDate = null, string order = null, string orderBy = null, string toDate = null);
        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>PowerFormSendersResponse</returns>
        PowerFormSendersResponse PowerFormsGetPowerFormsSenders (string accountId, string startPosition = null);

        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>ApiResponse of PowerFormSendersResponse</returns>
        ApiResponse<PowerFormSendersResponse> PowerFormsGetPowerFormsSendersWithHttpInfo (string accountId, string startPosition = null);
        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>PowerForms</returns>
        PowerForms PowerFormsPostPowerForm (string accountId, PowerForms powerForms = null);

        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>ApiResponse of PowerForms</returns>
        ApiResponse<PowerForms> PowerFormsPostPowerFormWithHttpInfo (string accountId, PowerForms powerForms = null);
        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>PowerForms</returns>
        PowerForms PowerFormsPutPowerForm (string accountId, string powerFormId, PowerForms powerForms = null);

        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>ApiResponse of PowerForms</returns>
        ApiResponse<PowerForms> PowerFormsPutPowerFormWithHttpInfo (string accountId, string powerFormId, PowerForms powerForms = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PowerFormsDeletePowerFormAsync (string accountId, string powerFormId);

        /// <summary>
        /// Delete a PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PowerFormsDeletePowerFormAsyncWithHttpInfo (string accountId, string powerFormId);
        /// <summary>
        /// Deletes one or more PowerForms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>Task of PowerFormsResponse</returns>
        System.Threading.Tasks.Task<PowerFormsResponse> PowerFormsDeletePowerFormsListAsync (string accountId, PowerFormsRequest powerFormsRequest = null);

        /// <summary>
        /// Deletes one or more PowerForms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerFormsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerFormsResponse>> PowerFormsDeletePowerFormsListAsyncWithHttpInfo (string accountId, PowerFormsRequest powerFormsRequest = null);
        /// <summary>
        /// Returns a single PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of PowerForms</returns>
        System.Threading.Tasks.Task<PowerForms> PowerFormsGetPowerFormAsync (string accountId, string powerFormId);

        /// <summary>
        /// Returns a single PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of ApiResponse (PowerForms)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerForms>> PowerFormsGetPowerFormAsyncWithHttpInfo (string accountId, string powerFormId);
        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of PowerFormsResponse</returns>
        System.Threading.Tasks.Task<PowerFormsResponse> PowerFormsGetPowerFormsListAsync (string accountId, string fromDate = null, string order = null, string orderBy = null, string toDate = null);

        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of ApiResponse (PowerFormsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerFormsResponse>> PowerFormsGetPowerFormsListAsyncWithHttpInfo (string accountId, string fromDate = null, string order = null, string orderBy = null, string toDate = null);
        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of PowerFormSendersResponse</returns>
        System.Threading.Tasks.Task<PowerFormSendersResponse> PowerFormsGetPowerFormsSendersAsync (string accountId, string startPosition = null);

        /// <summary>
        /// Returns the list of PowerForms available to the user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of ApiResponse (PowerFormSendersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerFormSendersResponse>> PowerFormsGetPowerFormsSendersAsyncWithHttpInfo (string accountId, string startPosition = null);
        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>Task of PowerForms</returns>
        System.Threading.Tasks.Task<PowerForms> PowerFormsPostPowerFormAsync (string accountId, PowerForms powerForms = null);

        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerForms)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerForms>> PowerFormsPostPowerFormAsyncWithHttpInfo (string accountId, PowerForms powerForms = null);
        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>Task of PowerForms</returns>
        System.Threading.Tasks.Task<PowerForms> PowerFormsPutPowerFormAsync (string accountId, string powerFormId, PowerForms powerForms = null);

        /// <summary>
        /// Creates a new PowerForm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerForms)</returns>
        System.Threading.Tasks.Task<ApiResponse<PowerForms>> PowerFormsPutPowerFormAsyncWithHttpInfo (string accountId, string powerFormId, PowerForms powerForms = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PowerFormsApi : IPowerFormsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PowerFormsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PowerFormsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PowerFormsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PowerFormsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns></returns>
        public void PowerFormsDeletePowerForm (string accountId, string powerFormId)
        {
             PowerFormsDeletePowerFormWithHttpInfo(accountId, powerFormId);
        }

        /// <summary>
        /// Delete a PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PowerFormsDeletePowerFormWithHttpInfo (string accountId, string powerFormId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsDeletePowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->PowerFormsDeletePowerForm");

            var localVarPath = "/v2/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", Configuration.ApiClient.ParameterToString(powerFormId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsDeletePowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PowerFormsDeletePowerFormAsync (string accountId, string powerFormId)
        {
             await PowerFormsDeletePowerFormAsyncWithHttpInfo(accountId, powerFormId);

        }

        /// <summary>
        /// Delete a PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PowerFormsDeletePowerFormAsyncWithHttpInfo (string accountId, string powerFormId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsDeletePowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->PowerFormsDeletePowerForm");

            var localVarPath = "/v2/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", Configuration.ApiClient.ParameterToString(powerFormId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsDeletePowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes one or more PowerForms 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>PowerFormsResponse</returns>
        public PowerFormsResponse PowerFormsDeletePowerFormsList (string accountId, PowerFormsRequest powerFormsRequest = null)
        {
             ApiResponse<PowerFormsResponse> localVarResponse = PowerFormsDeletePowerFormsListWithHttpInfo(accountId, powerFormsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more PowerForms 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>ApiResponse of PowerFormsResponse</returns>
        public ApiResponse< PowerFormsResponse > PowerFormsDeletePowerFormsListWithHttpInfo (string accountId, PowerFormsRequest powerFormsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsDeletePowerFormsList");

            var localVarPath = "/v2/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormsRequest != null && powerFormsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(powerFormsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerFormsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsDeletePowerFormsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerFormsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerFormsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerFormsResponse)));
            
        }

        /// <summary>
        /// Deletes one or more PowerForms 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>Task of PowerFormsResponse</returns>
        public async System.Threading.Tasks.Task<PowerFormsResponse> PowerFormsDeletePowerFormsListAsync (string accountId, PowerFormsRequest powerFormsRequest = null)
        {
             ApiResponse<PowerFormsResponse> localVarResponse = await PowerFormsDeletePowerFormsListAsyncWithHttpInfo(accountId, powerFormsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes one or more PowerForms 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormsRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerFormsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerFormsResponse>> PowerFormsDeletePowerFormsListAsyncWithHttpInfo (string accountId, PowerFormsRequest powerFormsRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsDeletePowerFormsList");

            var localVarPath = "/v2/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormsRequest != null && powerFormsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(powerFormsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerFormsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsDeletePowerFormsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerFormsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerFormsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerFormsResponse)));
            
        }

        /// <summary>
        /// Returns a single PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>PowerForms</returns>
        public PowerForms PowerFormsGetPowerForm (string accountId, string powerFormId)
        {
             ApiResponse<PowerForms> localVarResponse = PowerFormsGetPowerFormWithHttpInfo(accountId, powerFormId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a single PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>ApiResponse of PowerForms</returns>
        public ApiResponse< PowerForms > PowerFormsGetPowerFormWithHttpInfo (string accountId, string powerFormId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsGetPowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->PowerFormsGetPowerForm");

            var localVarPath = "/v2/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", Configuration.ApiClient.ParameterToString(powerFormId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsGetPowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerForms) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerForms)));
            
        }

        /// <summary>
        /// Returns a single PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of PowerForms</returns>
        public async System.Threading.Tasks.Task<PowerForms> PowerFormsGetPowerFormAsync (string accountId, string powerFormId)
        {
             ApiResponse<PowerForms> localVarResponse = await PowerFormsGetPowerFormAsyncWithHttpInfo(accountId, powerFormId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a single PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <returns>Task of ApiResponse (PowerForms)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerForms>> PowerFormsGetPowerFormAsyncWithHttpInfo (string accountId, string powerFormId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsGetPowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->PowerFormsGetPowerForm");

            var localVarPath = "/v2/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", Configuration.ApiClient.ParameterToString(powerFormId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsGetPowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerForms) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerForms)));
            
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>PowerFormsResponse</returns>
        public PowerFormsResponse PowerFormsGetPowerFormsList (string accountId, string fromDate = null, string order = null, string orderBy = null, string toDate = null)
        {
             ApiResponse<PowerFormsResponse> localVarResponse = PowerFormsGetPowerFormsListWithHttpInfo(accountId, fromDate, order, orderBy, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>ApiResponse of PowerFormsResponse</returns>
        public ApiResponse< PowerFormsResponse > PowerFormsGetPowerFormsListWithHttpInfo (string accountId, string fromDate = null, string order = null, string orderBy = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsGetPowerFormsList");

            var localVarPath = "/v2/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsGetPowerFormsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerFormsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerFormsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerFormsResponse)));
            
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of PowerFormsResponse</returns>
        public async System.Threading.Tasks.Task<PowerFormsResponse> PowerFormsGetPowerFormsListAsync (string accountId, string fromDate = null, string order = null, string orderBy = null, string toDate = null)
        {
             ApiResponse<PowerFormsResponse> localVarResponse = await PowerFormsGetPowerFormsListAsyncWithHttpInfo(accountId, fromDate, order, orderBy, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="order">An optional value that sets the direction order used to sort the item list.   Valid values are:   * asc &#x3D; ascending sort order * desc &#x3D; descending sort order  (optional)</param>
        /// <param name="orderBy">An optional value that sets the file attribute used to sort the item list.   Valid values are:   * modified * name   (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <returns>Task of ApiResponse (PowerFormsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerFormsResponse>> PowerFormsGetPowerFormsListAsyncWithHttpInfo (string accountId, string fromDate = null, string order = null, string orderBy = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsGetPowerFormsList");

            var localVarPath = "/v2/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsGetPowerFormsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerFormsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerFormsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerFormsResponse)));
            
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>PowerFormSendersResponse</returns>
        public PowerFormSendersResponse PowerFormsGetPowerFormsSenders (string accountId, string startPosition = null)
        {
             ApiResponse<PowerFormSendersResponse> localVarResponse = PowerFormsGetPowerFormsSendersWithHttpInfo(accountId, startPosition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>ApiResponse of PowerFormSendersResponse</returns>
        public ApiResponse< PowerFormSendersResponse > PowerFormsGetPowerFormsSendersWithHttpInfo (string accountId, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsGetPowerFormsSenders");

            var localVarPath = "/v2/accounts/{accountId}/powerforms/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsGetPowerFormsSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerFormSendersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerFormSendersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerFormSendersResponse)));
            
        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of PowerFormSendersResponse</returns>
        public async System.Threading.Tasks.Task<PowerFormSendersResponse> PowerFormsGetPowerFormsSendersAsync (string accountId, string startPosition = null)
        {
             ApiResponse<PowerFormSendersResponse> localVarResponse = await PowerFormsGetPowerFormsSendersAsyncWithHttpInfo(accountId, startPosition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of PowerForms available to the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of ApiResponse (PowerFormSendersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerFormSendersResponse>> PowerFormsGetPowerFormsSendersAsyncWithHttpInfo (string accountId, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsGetPowerFormsSenders");

            var localVarPath = "/v2/accounts/{accountId}/powerforms/senders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsGetPowerFormsSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerFormSendersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerFormSendersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerFormSendersResponse)));
            
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>PowerForms</returns>
        public PowerForms PowerFormsPostPowerForm (string accountId, PowerForms powerForms = null)
        {
             ApiResponse<PowerForms> localVarResponse = PowerFormsPostPowerFormWithHttpInfo(accountId, powerForms);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>ApiResponse of PowerForms</returns>
        public ApiResponse< PowerForms > PowerFormsPostPowerFormWithHttpInfo (string accountId, PowerForms powerForms = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsPostPowerForm");

            var localVarPath = "/v2/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerForms != null && powerForms.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(powerForms); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerForms; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsPostPowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerForms) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerForms)));
            
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>Task of PowerForms</returns>
        public async System.Threading.Tasks.Task<PowerForms> PowerFormsPostPowerFormAsync (string accountId, PowerForms powerForms = null)
        {
             ApiResponse<PowerForms> localVarResponse = await PowerFormsPostPowerFormAsyncWithHttpInfo(accountId, powerForms);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerForms)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerForms>> PowerFormsPostPowerFormAsyncWithHttpInfo (string accountId, PowerForms powerForms = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsPostPowerForm");

            var localVarPath = "/v2/accounts/{accountId}/powerforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerForms != null && powerForms.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(powerForms); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerForms; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsPostPowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerForms) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerForms)));
            
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>PowerForms</returns>
        public PowerForms PowerFormsPutPowerForm (string accountId, string powerFormId, PowerForms powerForms = null)
        {
             ApiResponse<PowerForms> localVarResponse = PowerFormsPutPowerFormWithHttpInfo(accountId, powerFormId, powerForms);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>ApiResponse of PowerForms</returns>
        public ApiResponse< PowerForms > PowerFormsPutPowerFormWithHttpInfo (string accountId, string powerFormId, PowerForms powerForms = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsPutPowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->PowerFormsPutPowerForm");

            var localVarPath = "/v2/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", Configuration.ApiClient.ParameterToString(powerFormId)); // path parameter
            if (powerForms != null && powerForms.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(powerForms); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerForms; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsPutPowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerForms) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerForms)));
            
        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>Task of PowerForms</returns>
        public async System.Threading.Tasks.Task<PowerForms> PowerFormsPutPowerFormAsync (string accountId, string powerFormId, PowerForms powerForms = null)
        {
             ApiResponse<PowerForms> localVarResponse = await PowerFormsPutPowerFormAsyncWithHttpInfo(accountId, powerFormId, powerForms);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new PowerForm. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="powerFormId"></param>
        /// <param name="powerForms"> (optional)</param>
        /// <returns>Task of ApiResponse (PowerForms)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PowerForms>> PowerFormsPutPowerFormAsyncWithHttpInfo (string accountId, string powerFormId, PowerForms powerForms = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PowerFormsApi->PowerFormsPutPowerForm");
            // verify the required parameter 'powerFormId' is set
            if (powerFormId == null)
                throw new ApiException(400, "Missing required parameter 'powerFormId' when calling PowerFormsApi->PowerFormsPutPowerForm");

            var localVarPath = "/v2/accounts/{accountId}/powerforms/{powerFormId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (powerFormId != null) localVarPathParams.Add("powerFormId", Configuration.ApiClient.ParameterToString(powerFormId)); // path parameter
            if (powerForms != null && powerForms.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(powerForms); // http body (model) parameter
            }
            else
            {
                localVarPostBody = powerForms; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PowerFormsPutPowerForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PowerForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PowerForms) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PowerForms)));
            
        }

    }
}
