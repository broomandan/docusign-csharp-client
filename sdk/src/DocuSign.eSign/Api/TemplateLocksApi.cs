/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateLocksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a template lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>TemplateLocks</returns>
        TemplateLocks LockDeleteTemplateLock (string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Deletes a template lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of TemplateLocks</returns>
        ApiResponse<TemplateLocks> LockDeleteTemplateLockWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null);
        /// <summary>
        /// Gets template lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>TemplateLocks</returns>
        TemplateLocks LockGetTemplateLock (string accountId, string templateId);

        /// <summary>
        /// Gets template lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of TemplateLocks</returns>
        ApiResponse<TemplateLocks> LockGetTemplateLockWithHttpInfo (string accountId, string templateId);
        /// <summary>
        /// Lock a template.
        /// </summary>
        /// <remarks>
        /// Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>TemplateLocks</returns>
        TemplateLocks LockPostTemplateLock (string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Lock a template.
        /// </summary>
        /// <remarks>
        /// Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of TemplateLocks</returns>
        ApiResponse<TemplateLocks> LockPostTemplateLockWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null);
        /// <summary>
        /// Updates a template lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>TemplateLocks</returns>
        TemplateLocks LockPutTemplateLock (string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Updates a template lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of TemplateLocks</returns>
        ApiResponse<TemplateLocks> LockPutTemplateLockWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a template lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of TemplateLocks</returns>
        System.Threading.Tasks.Task<TemplateLocks> LockDeleteTemplateLockAsync (string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Deletes a template lock.
        /// </summary>
        /// <remarks>
        /// Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateLocks)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateLocks>> LockDeleteTemplateLockAsyncWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null);
        /// <summary>
        /// Gets template lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of TemplateLocks</returns>
        System.Threading.Tasks.Task<TemplateLocks> LockGetTemplateLockAsync (string accountId, string templateId);

        /// <summary>
        /// Gets template lock information.
        /// </summary>
        /// <remarks>
        /// Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (TemplateLocks)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateLocks>> LockGetTemplateLockAsyncWithHttpInfo (string accountId, string templateId);
        /// <summary>
        /// Lock a template.
        /// </summary>
        /// <remarks>
        /// Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of TemplateLocks</returns>
        System.Threading.Tasks.Task<TemplateLocks> LockPostTemplateLockAsync (string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Lock a template.
        /// </summary>
        /// <remarks>
        /// Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateLocks)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateLocks>> LockPostTemplateLockAsyncWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null);
        /// <summary>
        /// Updates a template lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of TemplateLocks</returns>
        System.Threading.Tasks.Task<TemplateLocks> LockPutTemplateLockAsync (string accountId, string templateId, LockRequest lockRequest = null);

        /// <summary>
        /// Updates a template lock.
        /// </summary>
        /// <remarks>
        /// Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateLocks)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateLocks>> LockPutTemplateLockAsyncWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateLocksApi : ITemplateLocksApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateLocksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateLocksApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateLocksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateLocksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a template lock. Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>TemplateLocks</returns>
        public TemplateLocks LockDeleteTemplateLock (string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<TemplateLocks> localVarResponse = LockDeleteTemplateLockWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a template lock. Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of TemplateLocks</returns>
        public ApiResponse< TemplateLocks > LockDeleteTemplateLockWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateLocksApi->LockDeleteTemplateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateLocksApi->LockDeleteTemplateLock");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockDeleteTemplateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateLocks)));
            
        }

        /// <summary>
        /// Deletes a template lock. Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of TemplateLocks</returns>
        public async System.Threading.Tasks.Task<TemplateLocks> LockDeleteTemplateLockAsync (string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<TemplateLocks> localVarResponse = await LockDeleteTemplateLockAsyncWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a template lock. Deletes the lock from the specified template. The &#x60;X-DocuSign-Edit&#x60; header must be included in the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateLocks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateLocks>> LockDeleteTemplateLockAsyncWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateLocksApi->LockDeleteTemplateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateLocksApi->LockDeleteTemplateLock");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockDeleteTemplateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateLocks)));
            
        }

        /// <summary>
        /// Gets template lock information. Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>TemplateLocks</returns>
        public TemplateLocks LockGetTemplateLock (string accountId, string templateId)
        {
             ApiResponse<TemplateLocks> localVarResponse = LockGetTemplateLockWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets template lock information. Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of TemplateLocks</returns>
        public ApiResponse< TemplateLocks > LockGetTemplateLockWithHttpInfo (string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateLocksApi->LockGetTemplateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateLocksApi->LockGetTemplateLock");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockGetTemplateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateLocks)));
            
        }

        /// <summary>
        /// Gets template lock information. Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of TemplateLocks</returns>
        public async System.Threading.Tasks.Task<TemplateLocks> LockGetTemplateLockAsync (string accountId, string templateId)
        {
             ApiResponse<TemplateLocks> localVarResponse = await LockGetTemplateLockAsyncWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets template lock information. Retrieves general information about the template lock.  If the call is made by the user who has the lock and the request has the same integrator key as original, then the &#x60;X-DocuSign-Edit&#x60; header  field and additional lock information is included in the response. This allows users to recover a lost editing session token and the &#x60;X-DocuSign-Edit&#x60; header.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (TemplateLocks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateLocks>> LockGetTemplateLockAsyncWithHttpInfo (string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateLocksApi->LockGetTemplateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateLocksApi->LockGetTemplateLock");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockGetTemplateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateLocks)));
            
        }

        /// <summary>
        /// Lock a template. Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>TemplateLocks</returns>
        public TemplateLocks LockPostTemplateLock (string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<TemplateLocks> localVarResponse = LockPostTemplateLockWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lock a template. Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of TemplateLocks</returns>
        public ApiResponse< TemplateLocks > LockPostTemplateLockWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateLocksApi->LockPostTemplateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateLocksApi->LockPostTemplateLock");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockPostTemplateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateLocks)));
            
        }

        /// <summary>
        /// Lock a template. Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of TemplateLocks</returns>
        public async System.Threading.Tasks.Task<TemplateLocks> LockPostTemplateLockAsync (string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<TemplateLocks> localVarResponse = await LockPostTemplateLockAsyncWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lock a template. Locks the specified template, and sets the time until the lock expires, to prevent other users or recipients from accessing and changing the template.  ###### Note: Users must have envelope locking capability enabled to use this function (the userSetting property &#x60;canLockEnvelopes&#x60; must be set to **true** for the user).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateLocks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateLocks>> LockPostTemplateLockAsyncWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateLocksApi->LockPostTemplateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateLocksApi->LockPostTemplateLock");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockPostTemplateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateLocks)));
            
        }

        /// <summary>
        /// Updates a template lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>TemplateLocks</returns>
        public TemplateLocks LockPutTemplateLock (string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<TemplateLocks> localVarResponse = LockPutTemplateLockWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a template lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>ApiResponse of TemplateLocks</returns>
        public ApiResponse< TemplateLocks > LockPutTemplateLockWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateLocksApi->LockPutTemplateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateLocksApi->LockPutTemplateLock");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockPutTemplateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateLocks)));
            
        }

        /// <summary>
        /// Updates a template lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of TemplateLocks</returns>
        public async System.Threading.Tasks.Task<TemplateLocks> LockPutTemplateLockAsync (string accountId, string templateId, LockRequest lockRequest = null)
        {
             ApiResponse<TemplateLocks> localVarResponse = await LockPutTemplateLockAsyncWithHttpInfo(accountId, templateId, lockRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a template lock. Updates the lock duration time or update the &#x60;lockedByApp&#x60; property information for the specified template. The user and integrator key must match the user specified by the &#x60;lockByUser&#x60; property and integrator key information and the &#x60;X-DocuSign-Edit&#x60; header must be included or an error will be generated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="lockRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateLocks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateLocks>> LockPutTemplateLockAsyncWithHttpInfo (string accountId, string templateId, LockRequest lockRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplateLocksApi->LockPutTemplateLock");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateLocksApi->LockPutTemplateLock");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/lock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (lockRequest != null && lockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LockPutTemplateLock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateLocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateLocks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateLocks)));
            
        }

    }
}
