/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountPermissionProfilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a permissions profile within the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <returns></returns>
        void PermissionProfilesDeletePermissionProfiles (string accountId, string permissionProfileId);

        /// <summary>
        /// Deletes a permissions profile within the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PermissionProfilesDeletePermissionProfilesWithHttpInfo (string accountId, string permissionProfileId);
        /// <summary>
        /// Returns a permissions profile in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>AccountPermissionProfiles</returns>
        AccountPermissionProfiles PermissionProfilesGetPermissionProfile (string accountId, string permissionProfileId, string include = null);

        /// <summary>
        /// Returns a permissions profile in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>ApiResponse of AccountPermissionProfiles</returns>
        ApiResponse<AccountPermissionProfiles> PermissionProfilesGetPermissionProfileWithHttpInfo (string accountId, string permissionProfileId, string include = null);
        /// <summary>
        /// Gets a list of permission profiles.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>PermissionProfileInformation</returns>
        PermissionProfileInformation PermissionProfilesGetPermissionProfiles (string accountId, string include = null);

        /// <summary>
        /// Gets a list of permission profiles.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>ApiResponse of PermissionProfileInformation</returns>
        ApiResponse<PermissionProfileInformation> PermissionProfilesGetPermissionProfilesWithHttpInfo (string accountId, string include = null);
        /// <summary>
        /// Creates a new permission profile in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>AccountPermissionProfiles</returns>
        AccountPermissionProfiles PermissionProfilesPostPermissionProfiles (string accountId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null);

        /// <summary>
        /// Creates a new permission profile in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>ApiResponse of AccountPermissionProfiles</returns>
        ApiResponse<AccountPermissionProfiles> PermissionProfilesPostPermissionProfilesWithHttpInfo (string accountId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null);
        /// <summary>
        /// Updates a permission profile within the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>AccountPermissionProfiles</returns>
        AccountPermissionProfiles PermissionProfilesPutPermissionProfiles (string accountId, string permissionProfileId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null);

        /// <summary>
        /// Updates a permission profile within the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>ApiResponse of AccountPermissionProfiles</returns>
        ApiResponse<AccountPermissionProfiles> PermissionProfilesPutPermissionProfilesWithHttpInfo (string accountId, string permissionProfileId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a permissions profile within the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PermissionProfilesDeletePermissionProfilesAsync (string accountId, string permissionProfileId);

        /// <summary>
        /// Deletes a permissions profile within the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PermissionProfilesDeletePermissionProfilesAsyncWithHttpInfo (string accountId, string permissionProfileId);
        /// <summary>
        /// Returns a permissions profile in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>Task of AccountPermissionProfiles</returns>
        System.Threading.Tasks.Task<AccountPermissionProfiles> PermissionProfilesGetPermissionProfileAsync (string accountId, string permissionProfileId, string include = null);

        /// <summary>
        /// Returns a permissions profile in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>Task of ApiResponse (AccountPermissionProfiles)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPermissionProfiles>> PermissionProfilesGetPermissionProfileAsyncWithHttpInfo (string accountId, string permissionProfileId, string include = null);
        /// <summary>
        /// Gets a list of permission profiles.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of PermissionProfileInformation</returns>
        System.Threading.Tasks.Task<PermissionProfileInformation> PermissionProfilesGetPermissionProfilesAsync (string accountId, string include = null);

        /// <summary>
        /// Gets a list of permission profiles.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of ApiResponse (PermissionProfileInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionProfileInformation>> PermissionProfilesGetPermissionProfilesAsyncWithHttpInfo (string accountId, string include = null);
        /// <summary>
        /// Creates a new permission profile in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>Task of AccountPermissionProfiles</returns>
        System.Threading.Tasks.Task<AccountPermissionProfiles> PermissionProfilesPostPermissionProfilesAsync (string accountId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null);

        /// <summary>
        /// Creates a new permission profile in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountPermissionProfiles)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPermissionProfiles>> PermissionProfilesPostPermissionProfilesAsyncWithHttpInfo (string accountId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null);
        /// <summary>
        /// Updates a permission profile within the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>Task of AccountPermissionProfiles</returns>
        System.Threading.Tasks.Task<AccountPermissionProfiles> PermissionProfilesPutPermissionProfilesAsync (string accountId, string permissionProfileId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null);

        /// <summary>
        /// Updates a permission profile within the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountPermissionProfiles)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPermissionProfiles>> PermissionProfilesPutPermissionProfilesAsyncWithHttpInfo (string accountId, string permissionProfileId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountPermissionProfilesApi : IAccountPermissionProfilesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountPermissionProfilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountPermissionProfilesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountPermissionProfilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountPermissionProfilesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a permissions profile within the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <returns></returns>
        public void PermissionProfilesDeletePermissionProfiles (string accountId, string permissionProfileId)
        {
             PermissionProfilesDeletePermissionProfilesWithHttpInfo(accountId, permissionProfileId);
        }

        /// <summary>
        /// Deletes a permissions profile within the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PermissionProfilesDeletePermissionProfilesWithHttpInfo (string accountId, string permissionProfileId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountPermissionProfilesApi->PermissionProfilesDeletePermissionProfiles");
            // verify the required parameter 'permissionProfileId' is set
            if (permissionProfileId == null)
                throw new ApiException(400, "Missing required parameter 'permissionProfileId' when calling AccountPermissionProfilesApi->PermissionProfilesDeletePermissionProfiles");

            var localVarPath = "/v2/accounts/{accountId}/permission_profiles/{permissionProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (permissionProfileId != null) localVarPathParams.Add("permissionProfileId", Configuration.ApiClient.ParameterToString(permissionProfileId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionProfilesDeletePermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a permissions profile within the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PermissionProfilesDeletePermissionProfilesAsync (string accountId, string permissionProfileId)
        {
             await PermissionProfilesDeletePermissionProfilesAsyncWithHttpInfo(accountId, permissionProfileId);

        }

        /// <summary>
        /// Deletes a permissions profile within the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PermissionProfilesDeletePermissionProfilesAsyncWithHttpInfo (string accountId, string permissionProfileId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountPermissionProfilesApi->PermissionProfilesDeletePermissionProfiles");
            // verify the required parameter 'permissionProfileId' is set
            if (permissionProfileId == null)
                throw new ApiException(400, "Missing required parameter 'permissionProfileId' when calling AccountPermissionProfilesApi->PermissionProfilesDeletePermissionProfiles");

            var localVarPath = "/v2/accounts/{accountId}/permission_profiles/{permissionProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (permissionProfileId != null) localVarPathParams.Add("permissionProfileId", Configuration.ApiClient.ParameterToString(permissionProfileId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionProfilesDeletePermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns a permissions profile in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>AccountPermissionProfiles</returns>
        public AccountPermissionProfiles PermissionProfilesGetPermissionProfile (string accountId, string permissionProfileId, string include = null)
        {
             ApiResponse<AccountPermissionProfiles> localVarResponse = PermissionProfilesGetPermissionProfileWithHttpInfo(accountId, permissionProfileId, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a permissions profile in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>ApiResponse of AccountPermissionProfiles</returns>
        public ApiResponse< AccountPermissionProfiles > PermissionProfilesGetPermissionProfileWithHttpInfo (string accountId, string permissionProfileId, string include = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountPermissionProfilesApi->PermissionProfilesGetPermissionProfile");
            // verify the required parameter 'permissionProfileId' is set
            if (permissionProfileId == null)
                throw new ApiException(400, "Missing required parameter 'permissionProfileId' when calling AccountPermissionProfilesApi->PermissionProfilesGetPermissionProfile");

            var localVarPath = "/v2/accounts/{accountId}/permission_profiles/{permissionProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (permissionProfileId != null) localVarPathParams.Add("permissionProfileId", Configuration.ApiClient.ParameterToString(permissionProfileId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionProfilesGetPermissionProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionProfiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionProfiles) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionProfiles)));
            
        }

        /// <summary>
        /// Returns a permissions profile in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>Task of AccountPermissionProfiles</returns>
        public async System.Threading.Tasks.Task<AccountPermissionProfiles> PermissionProfilesGetPermissionProfileAsync (string accountId, string permissionProfileId, string include = null)
        {
             ApiResponse<AccountPermissionProfiles> localVarResponse = await PermissionProfilesGetPermissionProfileAsyncWithHttpInfo(accountId, permissionProfileId, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a permissions profile in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>Task of ApiResponse (AccountPermissionProfiles)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPermissionProfiles>> PermissionProfilesGetPermissionProfileAsyncWithHttpInfo (string accountId, string permissionProfileId, string include = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountPermissionProfilesApi->PermissionProfilesGetPermissionProfile");
            // verify the required parameter 'permissionProfileId' is set
            if (permissionProfileId == null)
                throw new ApiException(400, "Missing required parameter 'permissionProfileId' when calling AccountPermissionProfilesApi->PermissionProfilesGetPermissionProfile");

            var localVarPath = "/v2/accounts/{accountId}/permission_profiles/{permissionProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (permissionProfileId != null) localVarPathParams.Add("permissionProfileId", Configuration.ApiClient.ParameterToString(permissionProfileId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionProfilesGetPermissionProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionProfiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionProfiles) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionProfiles)));
            
        }

        /// <summary>
        /// Gets a list of permission profiles. Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>PermissionProfileInformation</returns>
        public PermissionProfileInformation PermissionProfilesGetPermissionProfiles (string accountId, string include = null)
        {
             ApiResponse<PermissionProfileInformation> localVarResponse = PermissionProfilesGetPermissionProfilesWithHttpInfo(accountId, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of permission profiles. Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>ApiResponse of PermissionProfileInformation</returns>
        public ApiResponse< PermissionProfileInformation > PermissionProfilesGetPermissionProfilesWithHttpInfo (string accountId, string include = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountPermissionProfilesApi->PermissionProfilesGetPermissionProfiles");

            var localVarPath = "/v2/accounts/{accountId}/permission_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionProfilesGetPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionProfileInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PermissionProfileInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionProfileInformation)));
            
        }

        /// <summary>
        /// Gets a list of permission profiles. Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of PermissionProfileInformation</returns>
        public async System.Threading.Tasks.Task<PermissionProfileInformation> PermissionProfilesGetPermissionProfilesAsync (string accountId, string include = null)
        {
             ApiResponse<PermissionProfileInformation> localVarResponse = await PermissionProfilesGetPermissionProfilesAsyncWithHttpInfo(accountId, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of permission profiles. Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">Reserved for DocuSign.  (optional)</param>
        /// <returns>Task of ApiResponse (PermissionProfileInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionProfileInformation>> PermissionProfilesGetPermissionProfilesAsyncWithHttpInfo (string accountId, string include = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountPermissionProfilesApi->PermissionProfilesGetPermissionProfiles");

            var localVarPath = "/v2/accounts/{accountId}/permission_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionProfilesGetPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionProfileInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PermissionProfileInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionProfileInformation)));
            
        }

        /// <summary>
        /// Creates a new permission profile in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>AccountPermissionProfiles</returns>
        public AccountPermissionProfiles PermissionProfilesPostPermissionProfiles (string accountId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null)
        {
             ApiResponse<AccountPermissionProfiles> localVarResponse = PermissionProfilesPostPermissionProfilesWithHttpInfo(accountId, include, accountPermissionProfiles);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new permission profile in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>ApiResponse of AccountPermissionProfiles</returns>
        public ApiResponse< AccountPermissionProfiles > PermissionProfilesPostPermissionProfilesWithHttpInfo (string accountId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountPermissionProfilesApi->PermissionProfilesPostPermissionProfiles");

            var localVarPath = "/v2/accounts/{accountId}/permission_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (accountPermissionProfiles != null && accountPermissionProfiles.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(accountPermissionProfiles); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountPermissionProfiles; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionProfilesPostPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionProfiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionProfiles) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionProfiles)));
            
        }

        /// <summary>
        /// Creates a new permission profile in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>Task of AccountPermissionProfiles</returns>
        public async System.Threading.Tasks.Task<AccountPermissionProfiles> PermissionProfilesPostPermissionProfilesAsync (string accountId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null)
        {
             ApiResponse<AccountPermissionProfiles> localVarResponse = await PermissionProfilesPostPermissionProfilesAsyncWithHttpInfo(accountId, include, accountPermissionProfiles);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new permission profile in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountPermissionProfiles)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPermissionProfiles>> PermissionProfilesPostPermissionProfilesAsyncWithHttpInfo (string accountId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountPermissionProfilesApi->PermissionProfilesPostPermissionProfiles");

            var localVarPath = "/v2/accounts/{accountId}/permission_profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (accountPermissionProfiles != null && accountPermissionProfiles.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(accountPermissionProfiles); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountPermissionProfiles; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionProfilesPostPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionProfiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionProfiles) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionProfiles)));
            
        }

        /// <summary>
        /// Updates a permission profile within the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>AccountPermissionProfiles</returns>
        public AccountPermissionProfiles PermissionProfilesPutPermissionProfiles (string accountId, string permissionProfileId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null)
        {
             ApiResponse<AccountPermissionProfiles> localVarResponse = PermissionProfilesPutPermissionProfilesWithHttpInfo(accountId, permissionProfileId, include, accountPermissionProfiles);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a permission profile within the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>ApiResponse of AccountPermissionProfiles</returns>
        public ApiResponse< AccountPermissionProfiles > PermissionProfilesPutPermissionProfilesWithHttpInfo (string accountId, string permissionProfileId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountPermissionProfilesApi->PermissionProfilesPutPermissionProfiles");
            // verify the required parameter 'permissionProfileId' is set
            if (permissionProfileId == null)
                throw new ApiException(400, "Missing required parameter 'permissionProfileId' when calling AccountPermissionProfilesApi->PermissionProfilesPutPermissionProfiles");

            var localVarPath = "/v2/accounts/{accountId}/permission_profiles/{permissionProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (permissionProfileId != null) localVarPathParams.Add("permissionProfileId", Configuration.ApiClient.ParameterToString(permissionProfileId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (accountPermissionProfiles != null && accountPermissionProfiles.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(accountPermissionProfiles); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountPermissionProfiles; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionProfilesPutPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionProfiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionProfiles) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionProfiles)));
            
        }

        /// <summary>
        /// Updates a permission profile within the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>Task of AccountPermissionProfiles</returns>
        public async System.Threading.Tasks.Task<AccountPermissionProfiles> PermissionProfilesPutPermissionProfilesAsync (string accountId, string permissionProfileId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null)
        {
             ApiResponse<AccountPermissionProfiles> localVarResponse = await PermissionProfilesPutPermissionProfilesAsyncWithHttpInfo(accountId, permissionProfileId, include, accountPermissionProfiles);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a permission profile within the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="permissionProfileId"></param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <param name="accountPermissionProfiles"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountPermissionProfiles)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPermissionProfiles>> PermissionProfilesPutPermissionProfilesAsyncWithHttpInfo (string accountId, string permissionProfileId, string include = null, AccountPermissionProfiles accountPermissionProfiles = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountPermissionProfilesApi->PermissionProfilesPutPermissionProfiles");
            // verify the required parameter 'permissionProfileId' is set
            if (permissionProfileId == null)
                throw new ApiException(400, "Missing required parameter 'permissionProfileId' when calling AccountPermissionProfilesApi->PermissionProfilesPutPermissionProfiles");

            var localVarPath = "/v2/accounts/{accountId}/permission_profiles/{permissionProfileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (permissionProfileId != null) localVarPathParams.Add("permissionProfileId", Configuration.ApiClient.ParameterToString(permissionProfileId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (accountPermissionProfiles != null && accountPermissionProfiles.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(accountPermissionProfiles); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountPermissionProfiles; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionProfilesPutPermissionProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionProfiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionProfiles) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionProfiles)));
            
        }

    }
}
