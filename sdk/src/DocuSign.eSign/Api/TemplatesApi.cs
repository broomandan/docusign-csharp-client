/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets template notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Notification</returns>
        Notification NotificationGetTemplatesTemplateIdNotification (string accountId, string templateId);

        /// <summary>
        /// Gets template notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> NotificationGetTemplatesTemplateIdNotificationWithHttpInfo (string accountId, string templateId);
        /// <summary>
        /// Updates the notification  structure for an existing template.
        /// </summary>
        /// <remarks>
        /// Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Notification</returns>
        Notification NotificationPutTemplatesTemplateIdNotification (string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null);

        /// <summary>
        /// Updates the notification  structure for an existing template.
        /// </summary>
        /// <remarks>
        /// Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> NotificationPutTemplatesTemplateIdNotificationWithHttpInfo (string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null);
        /// <summary>
        /// Deletes a page from a document in an template.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in a template based on the page number.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns></returns>
        void PagesDeleteTemplatePage (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null);

        /// <summary>
        /// Deletes a page from a document in an template.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in a template based on the page number.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PagesDeleteTemplatePageWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null);
        /// <summary>
        /// Gets a page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PagesGetTemplatePageImage (string accountId, string documentId, string pageNumber, string templateId, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null);

        /// <summary>
        /// Gets a page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PagesGetTemplatePageImageWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null);
        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>PageImages</returns>
        PageImages PagesGetTemplatePageImages (string accountId, string documentId, string templateId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null);

        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>ApiResponse of PageImages</returns>
        ApiResponse<PageImages> PagesGetTemplatePageImagesWithHttpInfo (string accountId, string documentId, string templateId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null);
        /// <summary>
        /// Rotates page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns></returns>
        void PagesPutTemplatePageImage (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null);

        /// <summary>
        /// Rotates page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PagesPutTemplatePageImageWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null);
        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template.
        /// </summary>
        /// <remarks>
        /// Removes a member group&#39;s sharing permissions for a specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Groups</returns>
        Groups TemplatesDeleteTemplatePart (string accountId, string templateId, string templatePart, Groups groups = null);

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template.
        /// </summary>
        /// <remarks>
        /// Removes a member group&#39;s sharing permissions for a specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>ApiResponse of Groups</returns>
        ApiResponse<Groups> TemplatesDeleteTemplatePartWithHttpInfo (string accountId, string templateId, string templatePart, Groups groups = null);
        /// <summary>
        /// Gets a list of templates for a specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the definition of the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>Templates</returns>
        Templates TemplatesGetTemplate (string accountId, string templateId, string include = null);

        /// <summary>
        /// Gets a list of templates for a specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the definition of the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>ApiResponse of Templates</returns>
        ApiResponse<Templates> TemplatesGetTemplateWithHttpInfo (string accountId, string templateId, string include = null);
        /// <summary>
        /// Gets the definition of a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">Number of records to return in the cache. (optional)</param>
        /// <param name="folder">The query value can be a folder name or folder ID. The response will only return templates in the specified folder. (optional)</param>
        /// <param name="folderIds">A comma separated list of folder ID GUIDs. (optional)</param>
        /// <param name="folderTypes"> (optional)</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are:  * custom_fields * documents * folders * notifications * recipients  (optional)</param>
        /// <param name="order">Sets the direction order used to sort the list. Valid values are: -asc &#x3D; ascending sort order (a to z)  -desc &#x3D; descending sort order (z to a) (optional)</param>
        /// <param name="orderBy">Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used. (optional)</param>
        /// <param name="searchText">The search text used to search the names of templates. (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="sharedByMe">If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected. (optional)</param>
        /// <param name="startPosition">The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero). (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="usedFromDate">Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used. (optional)</param>
        /// <param name="usedToDate">End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="userFilter">Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user. (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>EnvelopeTemplateResults</returns>
        EnvelopeTemplateResults TemplatesGetTemplates (string accountId, string count = null, string folder = null, string folderIds = null, string folderTypes = null, string fromDate = null, string include = null, string order = null, string orderBy = null, string searchText = null, string shared = null, string sharedByMe = null, string startPosition = null, string toDate = null, string usedFromDate = null, string usedToDate = null, string userFilter = null, string userId = null);

        /// <summary>
        /// Gets the definition of a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">Number of records to return in the cache. (optional)</param>
        /// <param name="folder">The query value can be a folder name or folder ID. The response will only return templates in the specified folder. (optional)</param>
        /// <param name="folderIds">A comma separated list of folder ID GUIDs. (optional)</param>
        /// <param name="folderTypes"> (optional)</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are:  * custom_fields * documents * folders * notifications * recipients  (optional)</param>
        /// <param name="order">Sets the direction order used to sort the list. Valid values are: -asc &#x3D; ascending sort order (a to z)  -desc &#x3D; descending sort order (z to a) (optional)</param>
        /// <param name="orderBy">Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used. (optional)</param>
        /// <param name="searchText">The search text used to search the names of templates. (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="sharedByMe">If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected. (optional)</param>
        /// <param name="startPosition">The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero). (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="usedFromDate">Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used. (optional)</param>
        /// <param name="usedToDate">End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="userFilter">Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user. (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeTemplateResults</returns>
        ApiResponse<EnvelopeTemplateResults> TemplatesGetTemplatesWithHttpInfo (string accountId, string count = null, string folder = null, string folderIds = null, string folderTypes = null, string fromDate = null, string include = null, string order = null, string orderBy = null, string searchText = null, string shared = null, string sharedByMe = null, string startPosition = null, string toDate = null, string usedFromDate = null, string usedToDate = null, string userFilter = null, string userId = null);
        /// <summary>
        /// Creates an envelope from a template.
        /// </summary>
        /// <remarks>
        /// Creates a template definition using a multipart request.  ### Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_UserName]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_Email]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>TemplateSummary</returns>
        TemplateSummary TemplatesPostTemplates (string accountId, Templates templates = null);

        /// <summary>
        /// Creates an envelope from a template.
        /// </summary>
        /// <remarks>
        /// Creates a template definition using a multipart request.  ### Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_UserName]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_Email]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>ApiResponse of TemplateSummary</returns>
        ApiResponse<TemplateSummary> TemplatesPostTemplatesWithHttpInfo (string accountId, Templates templates = null);
        /// <summary>
        /// Updates an existing template.
        /// </summary>
        /// <remarks>
        /// Updates an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>TemplateUpdateSummary</returns>
        TemplateUpdateSummary TemplatesPutTemplate (string accountId, string templateId, Templates templates = null);

        /// <summary>
        /// Updates an existing template.
        /// </summary>
        /// <remarks>
        /// Updates an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>ApiResponse of TemplateUpdateSummary</returns>
        ApiResponse<TemplateUpdateSummary> TemplatesPutTemplateWithHttpInfo (string accountId, string templateId, Templates templates = null);
        /// <summary>
        /// Shares a template with a group
        /// </summary>
        /// <remarks>
        /// Shares a template with the specified members group.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Groups</returns>
        Groups TemplatesPutTemplatePart (string accountId, string templateId, string templatePart, Groups groups = null);

        /// <summary>
        /// Shares a template with a group
        /// </summary>
        /// <remarks>
        /// Shares a template with the specified members group.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>ApiResponse of Groups</returns>
        ApiResponse<Groups> TemplatesPutTemplatePartWithHttpInfo (string accountId, string templateId, string templatePart, Groups groups = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets template notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> NotificationGetTemplatesTemplateIdNotificationAsync (string accountId, string templateId);

        /// <summary>
        /// Gets template notification information.
        /// </summary>
        /// <remarks>
        /// Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> NotificationGetTemplatesTemplateIdNotificationAsyncWithHttpInfo (string accountId, string templateId);
        /// <summary>
        /// Updates the notification  structure for an existing template.
        /// </summary>
        /// <remarks>
        /// Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> NotificationPutTemplatesTemplateIdNotificationAsync (string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null);

        /// <summary>
        /// Updates the notification  structure for an existing template.
        /// </summary>
        /// <remarks>
        /// Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> NotificationPutTemplatesTemplateIdNotificationAsyncWithHttpInfo (string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null);
        /// <summary>
        /// Deletes a page from a document in an template.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in a template based on the page number.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PagesDeleteTemplatePageAsync (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null);

        /// <summary>
        /// Deletes a page from a document in an template.
        /// </summary>
        /// <remarks>
        /// Deletes a page from a document in a template based on the page number.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PagesDeleteTemplatePageAsyncWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null);
        /// <summary>
        /// Gets a page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PagesGetTemplatePageImageAsync (string accountId, string documentId, string pageNumber, string templateId, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null);

        /// <summary>
        /// Gets a page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Retrieves a page image for display from the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PagesGetTemplatePageImageAsyncWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null);
        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of PageImages</returns>
        System.Threading.Tasks.Task<PageImages> PagesGetTemplatePageImagesAsync (string accountId, string documentId, string templateId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null);

        /// <summary>
        /// Returns document page image(s) based on input.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of ApiResponse (PageImages)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageImages>> PagesGetTemplatePageImagesAsyncWithHttpInfo (string accountId, string documentId, string templateId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null);
        /// <summary>
        /// Rotates page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PagesPutTemplatePageImageAsync (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null);

        /// <summary>
        /// Rotates page image from a template for display.
        /// </summary>
        /// <remarks>
        /// Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PagesPutTemplatePageImageAsyncWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null);
        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template.
        /// </summary>
        /// <remarks>
        /// Removes a member group&#39;s sharing permissions for a specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Task of Groups</returns>
        System.Threading.Tasks.Task<Groups> TemplatesDeleteTemplatePartAsync (string accountId, string templateId, string templatePart, Groups groups = null);

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template.
        /// </summary>
        /// <remarks>
        /// Removes a member group&#39;s sharing permissions for a specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Task of ApiResponse (Groups)</returns>
        System.Threading.Tasks.Task<ApiResponse<Groups>> TemplatesDeleteTemplatePartAsyncWithHttpInfo (string accountId, string templateId, string templatePart, Groups groups = null);
        /// <summary>
        /// Gets a list of templates for a specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the definition of the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>Task of Templates</returns>
        System.Threading.Tasks.Task<Templates> TemplatesGetTemplateAsync (string accountId, string templateId, string include = null);

        /// <summary>
        /// Gets a list of templates for a specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the definition of the specified template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>Task of ApiResponse (Templates)</returns>
        System.Threading.Tasks.Task<ApiResponse<Templates>> TemplatesGetTemplateAsyncWithHttpInfo (string accountId, string templateId, string include = null);
        /// <summary>
        /// Gets the definition of a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">Number of records to return in the cache. (optional)</param>
        /// <param name="folder">The query value can be a folder name or folder ID. The response will only return templates in the specified folder. (optional)</param>
        /// <param name="folderIds">A comma separated list of folder ID GUIDs. (optional)</param>
        /// <param name="folderTypes"> (optional)</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are:  * custom_fields * documents * folders * notifications * recipients  (optional)</param>
        /// <param name="order">Sets the direction order used to sort the list. Valid values are: -asc &#x3D; ascending sort order (a to z)  -desc &#x3D; descending sort order (z to a) (optional)</param>
        /// <param name="orderBy">Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used. (optional)</param>
        /// <param name="searchText">The search text used to search the names of templates. (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="sharedByMe">If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected. (optional)</param>
        /// <param name="startPosition">The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero). (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="usedFromDate">Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used. (optional)</param>
        /// <param name="usedToDate">End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="userFilter">Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user. (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of EnvelopeTemplateResults</returns>
        System.Threading.Tasks.Task<EnvelopeTemplateResults> TemplatesGetTemplatesAsync (string accountId, string count = null, string folder = null, string folderIds = null, string folderTypes = null, string fromDate = null, string include = null, string order = null, string orderBy = null, string searchText = null, string shared = null, string sharedByMe = null, string startPosition = null, string toDate = null, string usedFromDate = null, string usedToDate = null, string userFilter = null, string userId = null);

        /// <summary>
        /// Gets the definition of a template.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">Number of records to return in the cache. (optional)</param>
        /// <param name="folder">The query value can be a folder name or folder ID. The response will only return templates in the specified folder. (optional)</param>
        /// <param name="folderIds">A comma separated list of folder ID GUIDs. (optional)</param>
        /// <param name="folderTypes"> (optional)</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are:  * custom_fields * documents * folders * notifications * recipients  (optional)</param>
        /// <param name="order">Sets the direction order used to sort the list. Valid values are: -asc &#x3D; ascending sort order (a to z)  -desc &#x3D; descending sort order (z to a) (optional)</param>
        /// <param name="orderBy">Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used. (optional)</param>
        /// <param name="searchText">The search text used to search the names of templates. (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="sharedByMe">If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected. (optional)</param>
        /// <param name="startPosition">The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero). (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="usedFromDate">Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used. (optional)</param>
        /// <param name="usedToDate">End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="userFilter">Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user. (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeTemplateResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvelopeTemplateResults>> TemplatesGetTemplatesAsyncWithHttpInfo (string accountId, string count = null, string folder = null, string folderIds = null, string folderTypes = null, string fromDate = null, string include = null, string order = null, string orderBy = null, string searchText = null, string shared = null, string sharedByMe = null, string startPosition = null, string toDate = null, string usedFromDate = null, string usedToDate = null, string userFilter = null, string userId = null);
        /// <summary>
        /// Creates an envelope from a template.
        /// </summary>
        /// <remarks>
        /// Creates a template definition using a multipart request.  ### Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_UserName]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_Email]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>Task of TemplateSummary</returns>
        System.Threading.Tasks.Task<TemplateSummary> TemplatesPostTemplatesAsync (string accountId, Templates templates = null);

        /// <summary>
        /// Creates an envelope from a template.
        /// </summary>
        /// <remarks>
        /// Creates a template definition using a multipart request.  ### Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_UserName]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_Email]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateSummary>> TemplatesPostTemplatesAsyncWithHttpInfo (string accountId, Templates templates = null);
        /// <summary>
        /// Updates an existing template.
        /// </summary>
        /// <remarks>
        /// Updates an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>Task of TemplateUpdateSummary</returns>
        System.Threading.Tasks.Task<TemplateUpdateSummary> TemplatesPutTemplateAsync (string accountId, string templateId, Templates templates = null);

        /// <summary>
        /// Updates an existing template.
        /// </summary>
        /// <remarks>
        /// Updates an existing template.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateUpdateSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateUpdateSummary>> TemplatesPutTemplateAsyncWithHttpInfo (string accountId, string templateId, Templates templates = null);
        /// <summary>
        /// Shares a template with a group
        /// </summary>
        /// <remarks>
        /// Shares a template with the specified members group.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Task of Groups</returns>
        System.Threading.Tasks.Task<Groups> TemplatesPutTemplatePartAsync (string accountId, string templateId, string templatePart, Groups groups = null);

        /// <summary>
        /// Shares a template with a group
        /// </summary>
        /// <remarks>
        /// Shares a template with the specified members group.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Task of ApiResponse (Groups)</returns>
        System.Threading.Tasks.Task<ApiResponse<Groups>> TemplatesPutTemplatePartAsyncWithHttpInfo (string accountId, string templateId, string templatePart, Groups groups = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesApi : ITemplatesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets template notification information. Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Notification</returns>
        public Notification NotificationGetTemplatesTemplateIdNotification (string accountId, string templateId)
        {
             ApiResponse<Notification> localVarResponse = NotificationGetTemplatesTemplateIdNotificationWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets template notification information. Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>ApiResponse of Notification</returns>
        public ApiResponse< Notification > NotificationGetTemplatesTemplateIdNotificationWithHttpInfo (string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->NotificationGetTemplatesTemplateIdNotification");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->NotificationGetTemplatesTemplateIdNotification");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationGetTemplatesTemplateIdNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
            
        }

        /// <summary>
        /// Gets template notification information. Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> NotificationGetTemplatesTemplateIdNotificationAsync (string accountId, string templateId)
        {
             ApiResponse<Notification> localVarResponse = await NotificationGetTemplatesTemplateIdNotificationAsyncWithHttpInfo(accountId, templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets template notification information. Retrieves the envelope notification, reminders and expirations, information for an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notification>> NotificationGetTemplatesTemplateIdNotificationAsyncWithHttpInfo (string accountId, string templateId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->NotificationGetTemplatesTemplateIdNotification");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->NotificationGetTemplatesTemplateIdNotification");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationGetTemplatesTemplateIdNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
            
        }

        /// <summary>
        /// Updates the notification  structure for an existing template. Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Notification</returns>
        public Notification NotificationPutTemplatesTemplateIdNotification (string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null)
        {
             ApiResponse<Notification> localVarResponse = NotificationPutTemplatesTemplateIdNotificationWithHttpInfo(accountId, templateId, templateNotificationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the notification  structure for an existing template. Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>ApiResponse of Notification</returns>
        public ApiResponse< Notification > NotificationPutTemplatesTemplateIdNotificationWithHttpInfo (string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->NotificationPutTemplatesTemplateIdNotification");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->NotificationPutTemplatesTemplateIdNotification");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateNotificationRequest != null && templateNotificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templateNotificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateNotificationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationPutTemplatesTemplateIdNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
            
        }

        /// <summary>
        /// Updates the notification  structure for an existing template. Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> NotificationPutTemplatesTemplateIdNotificationAsync (string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null)
        {
             ApiResponse<Notification> localVarResponse = await NotificationPutTemplatesTemplateIdNotificationAsyncWithHttpInfo(accountId, templateId, templateNotificationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the notification  structure for an existing template. Updates the notification structure for an existing template. Use this endpoint to set reminder and expiration notifications.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templateNotificationRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notification>> NotificationPutTemplatesTemplateIdNotificationAsyncWithHttpInfo (string accountId, string templateId, TemplateNotificationRequest templateNotificationRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->NotificationPutTemplatesTemplateIdNotification");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->NotificationPutTemplatesTemplateIdNotification");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (templateNotificationRequest != null && templateNotificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templateNotificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateNotificationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationPutTemplatesTemplateIdNotification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
            
        }

        /// <summary>
        /// Deletes a page from a document in an template. Deletes a page from a document in a template based on the page number.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns></returns>
        public void PagesDeleteTemplatePage (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null)
        {
             PagesDeleteTemplatePageWithHttpInfo(accountId, documentId, pageNumber, templateId, pageRequest);
        }

        /// <summary>
        /// Deletes a page from a document in an template. Deletes a page from a document in a template based on the page number.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PagesDeleteTemplatePageWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->PagesDeleteTemplatePage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->PagesDeleteTemplatePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->PagesDeleteTemplatePage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->PagesDeleteTemplatePage");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (pageRequest != null && pageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesDeleteTemplatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a page from a document in an template. Deletes a page from a document in a template based on the page number.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PagesDeleteTemplatePageAsync (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null)
        {
             await PagesDeleteTemplatePageAsyncWithHttpInfo(accountId, documentId, pageNumber, templateId, pageRequest);

        }

        /// <summary>
        /// Deletes a page from a document in an template. Deletes a page from a document in a template based on the page number.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PagesDeleteTemplatePageAsyncWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->PagesDeleteTemplatePage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->PagesDeleteTemplatePage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->PagesDeleteTemplatePage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->PagesDeleteTemplatePage");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (pageRequest != null && pageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesDeleteTemplatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a page image from a template for display. Retrieves a page image for display from the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PagesGetTemplatePageImage (string accountId, string documentId, string pageNumber, string templateId, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PagesGetTemplatePageImageWithHttpInfo(accountId, documentId, pageNumber, templateId, dpi, maxHeight, maxWidth, showChanges);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a page image from a template for display. Retrieves a page image for display from the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PagesGetTemplatePageImageWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->PagesGetTemplatePageImage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->PagesGetTemplatePageImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->PagesGetTemplatePageImage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->PagesGetTemplatePageImage");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (dpi != null) localVarQueryParams.Add("dpi", Configuration.ApiClient.ParameterToString(dpi)); // query parameter
            if (maxHeight != null) localVarQueryParams.Add("max_height", Configuration.ApiClient.ParameterToString(maxHeight)); // query parameter
            if (maxWidth != null) localVarQueryParams.Add("max_width", Configuration.ApiClient.ParameterToString(maxWidth)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesGetTemplatePageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Gets a page image from a template for display. Retrieves a page image for display from the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PagesGetTemplatePageImageAsync (string accountId, string documentId, string pageNumber, string templateId, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PagesGetTemplatePageImageAsyncWithHttpInfo(accountId, documentId, pageNumber, templateId, dpi, maxHeight, maxWidth, showChanges);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a page image from a template for display. Retrieves a page image for display from the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PagesGetTemplatePageImageAsyncWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, string dpi = null, string maxHeight = null, string maxWidth = null, string showChanges = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->PagesGetTemplatePageImage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->PagesGetTemplatePageImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->PagesGetTemplatePageImage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->PagesGetTemplatePageImage");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (dpi != null) localVarQueryParams.Add("dpi", Configuration.ApiClient.ParameterToString(dpi)); // query parameter
            if (maxHeight != null) localVarQueryParams.Add("max_height", Configuration.ApiClient.ParameterToString(maxHeight)); // query parameter
            if (maxWidth != null) localVarQueryParams.Add("max_width", Configuration.ApiClient.ParameterToString(maxWidth)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesGetTemplatePageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Returns document page image(s) based on input. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>PageImages</returns>
        public PageImages PagesGetTemplatePageImages (string accountId, string documentId, string templateId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null)
        {
             ApiResponse<PageImages> localVarResponse = PagesGetTemplatePageImagesWithHttpInfo(accountId, documentId, templateId, count, dpi, maxHeight, maxWidth, nocache, showChanges, startPosition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns document page image(s) based on input. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>ApiResponse of PageImages</returns>
        public ApiResponse< PageImages > PagesGetTemplatePageImagesWithHttpInfo (string accountId, string documentId, string templateId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->PagesGetTemplatePageImages");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->PagesGetTemplatePageImages");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->PagesGetTemplatePageImages");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (dpi != null) localVarQueryParams.Add("dpi", Configuration.ApiClient.ParameterToString(dpi)); // query parameter
            if (maxHeight != null) localVarQueryParams.Add("max_height", Configuration.ApiClient.ParameterToString(maxHeight)); // query parameter
            if (maxWidth != null) localVarQueryParams.Add("max_width", Configuration.ApiClient.ParameterToString(maxWidth)); // query parameter
            if (nocache != null) localVarQueryParams.Add("nocache", Configuration.ApiClient.ParameterToString(nocache)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesGetTemplatePageImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageImages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageImages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageImages)));
            
        }

        /// <summary>
        /// Returns document page image(s) based on input. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of PageImages</returns>
        public async System.Threading.Tasks.Task<PageImages> PagesGetTemplatePageImagesAsync (string accountId, string documentId, string templateId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null)
        {
             ApiResponse<PageImages> localVarResponse = await PagesGetTemplatePageImagesAsyncWithHttpInfo(accountId, documentId, templateId, count, dpi, maxHeight, maxWidth, nocache, showChanges, startPosition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns document page image(s) based on input. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="nocache"> (optional)</param>
        /// <param name="showChanges"> (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of ApiResponse (PageImages)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageImages>> PagesGetTemplatePageImagesAsyncWithHttpInfo (string accountId, string documentId, string templateId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string nocache = null, string showChanges = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->PagesGetTemplatePageImages");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->PagesGetTemplatePageImages");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->PagesGetTemplatePageImages");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (dpi != null) localVarQueryParams.Add("dpi", Configuration.ApiClient.ParameterToString(dpi)); // query parameter
            if (maxHeight != null) localVarQueryParams.Add("max_height", Configuration.ApiClient.ParameterToString(maxHeight)); // query parameter
            if (maxWidth != null) localVarQueryParams.Add("max_width", Configuration.ApiClient.ParameterToString(maxWidth)); // query parameter
            if (nocache != null) localVarQueryParams.Add("nocache", Configuration.ApiClient.ParameterToString(nocache)); // query parameter
            if (showChanges != null) localVarQueryParams.Add("show_changes", Configuration.ApiClient.ParameterToString(showChanges)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesGetTemplatePageImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageImages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageImages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageImages)));
            
        }

        /// <summary>
        /// Rotates page image from a template for display. Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns></returns>
        public void PagesPutTemplatePageImage (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null)
        {
             PagesPutTemplatePageImageWithHttpInfo(accountId, documentId, pageNumber, templateId, pageRequest);
        }

        /// <summary>
        /// Rotates page image from a template for display. Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PagesPutTemplatePageImageWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->PagesPutTemplatePageImage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->PagesPutTemplatePageImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->PagesPutTemplatePageImage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->PagesPutTemplatePageImage");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (pageRequest != null && pageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesPutTemplatePageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Rotates page image from a template for display. Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PagesPutTemplatePageImageAsync (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null)
        {
             await PagesPutTemplatePageImageAsyncWithHttpInfo(accountId, documentId, pageNumber, templateId, pageRequest);

        }

        /// <summary>
        /// Rotates page image from a template for display. Rotates page image from a template for display. The page image can be rotated to the left or right.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="documentId">The ID of the document being accessed.</param>
        /// <param name="pageNumber">The page number being accessed.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="pageRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PagesPutTemplatePageImageAsyncWithHttpInfo (string accountId, string documentId, string pageNumber, string templateId, PageRequest pageRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->PagesPutTemplatePageImage");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TemplatesApi->PagesPutTemplatePageImage");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling TemplatesApi->PagesPutTemplatePageImage");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->PagesPutTemplatePageImage");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (pageNumber != null) localVarPathParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (pageRequest != null && pageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PagesPutTemplatePageImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template. Removes a member group&#39;s sharing permissions for a specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Groups</returns>
        public Groups TemplatesDeleteTemplatePart (string accountId, string templateId, string templatePart, Groups groups = null)
        {
             ApiResponse<Groups> localVarResponse = TemplatesDeleteTemplatePartWithHttpInfo(accountId, templateId, templatePart, groups);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template. Removes a member group&#39;s sharing permissions for a specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>ApiResponse of Groups</returns>
        public ApiResponse< Groups > TemplatesDeleteTemplatePartWithHttpInfo (string accountId, string templateId, string templatePart, Groups groups = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesDeleteTemplatePart");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->TemplatesDeleteTemplatePart");
            // verify the required parameter 'templatePart' is set
            if (templatePart == null)
                throw new ApiException(400, "Missing required parameter 'templatePart' when calling TemplatesApi->TemplatesDeleteTemplatePart");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/{templatePart}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (templatePart != null) localVarPathParams.Add("templatePart", Configuration.ApiClient.ParameterToString(templatePart)); // path parameter
            if (groups != null && groups.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groups); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groups; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesDeleteTemplatePart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Groups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Groups) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Groups)));
            
        }

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template. Removes a member group&#39;s sharing permissions for a specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Task of Groups</returns>
        public async System.Threading.Tasks.Task<Groups> TemplatesDeleteTemplatePartAsync (string accountId, string templateId, string templatePart, Groups groups = null)
        {
             ApiResponse<Groups> localVarResponse = await TemplatesDeleteTemplatePartAsyncWithHttpInfo(accountId, templateId, templatePart, groups);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a member group&#39;s sharing permissions for a template. Removes a member group&#39;s sharing permissions for a specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Task of ApiResponse (Groups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Groups>> TemplatesDeleteTemplatePartAsyncWithHttpInfo (string accountId, string templateId, string templatePart, Groups groups = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesDeleteTemplatePart");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->TemplatesDeleteTemplatePart");
            // verify the required parameter 'templatePart' is set
            if (templatePart == null)
                throw new ApiException(400, "Missing required parameter 'templatePart' when calling TemplatesApi->TemplatesDeleteTemplatePart");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/{templatePart}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (templatePart != null) localVarPathParams.Add("templatePart", Configuration.ApiClient.ParameterToString(templatePart)); // path parameter
            if (groups != null && groups.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groups); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groups; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesDeleteTemplatePart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Groups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Groups) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Groups)));
            
        }

        /// <summary>
        /// Gets a list of templates for a specified account. Retrieves the definition of the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>Templates</returns>
        public Templates TemplatesGetTemplate (string accountId, string templateId, string include = null)
        {
             ApiResponse<Templates> localVarResponse = TemplatesGetTemplateWithHttpInfo(accountId, templateId, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of templates for a specified account. Retrieves the definition of the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>ApiResponse of Templates</returns>
        public ApiResponse< Templates > TemplatesGetTemplateWithHttpInfo (string accountId, string templateId, string include = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesGetTemplate");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->TemplatesGetTemplate");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesGetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Templates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Templates) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Templates)));
            
        }

        /// <summary>
        /// Gets a list of templates for a specified account. Retrieves the definition of the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>Task of Templates</returns>
        public async System.Threading.Tasks.Task<Templates> TemplatesGetTemplateAsync (string accountId, string templateId, string include = null)
        {
             ApiResponse<Templates> localVarResponse = await TemplatesGetTemplateAsyncWithHttpInfo(accountId, templateId, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of templates for a specified account. Retrieves the definition of the specified template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications. (optional)</param>
        /// <returns>Task of ApiResponse (Templates)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Templates>> TemplatesGetTemplateAsyncWithHttpInfo (string accountId, string templateId, string include = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesGetTemplate");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->TemplatesGetTemplate");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesGetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Templates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Templates) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Templates)));
            
        }

        /// <summary>
        /// Gets the definition of a template. Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">Number of records to return in the cache. (optional)</param>
        /// <param name="folder">The query value can be a folder name or folder ID. The response will only return templates in the specified folder. (optional)</param>
        /// <param name="folderIds">A comma separated list of folder ID GUIDs. (optional)</param>
        /// <param name="folderTypes"> (optional)</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are:  * custom_fields * documents * folders * notifications * recipients  (optional)</param>
        /// <param name="order">Sets the direction order used to sort the list. Valid values are: -asc &#x3D; ascending sort order (a to z)  -desc &#x3D; descending sort order (z to a) (optional)</param>
        /// <param name="orderBy">Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used. (optional)</param>
        /// <param name="searchText">The search text used to search the names of templates. (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="sharedByMe">If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected. (optional)</param>
        /// <param name="startPosition">The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero). (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="usedFromDate">Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used. (optional)</param>
        /// <param name="usedToDate">End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="userFilter">Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user. (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>EnvelopeTemplateResults</returns>
        public EnvelopeTemplateResults TemplatesGetTemplates (string accountId, string count = null, string folder = null, string folderIds = null, string folderTypes = null, string fromDate = null, string include = null, string order = null, string orderBy = null, string searchText = null, string shared = null, string sharedByMe = null, string startPosition = null, string toDate = null, string usedFromDate = null, string usedToDate = null, string userFilter = null, string userId = null)
        {
             ApiResponse<EnvelopeTemplateResults> localVarResponse = TemplatesGetTemplatesWithHttpInfo(accountId, count, folder, folderIds, folderTypes, fromDate, include, order, orderBy, searchText, shared, sharedByMe, startPosition, toDate, usedFromDate, usedToDate, userFilter, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the definition of a template. Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">Number of records to return in the cache. (optional)</param>
        /// <param name="folder">The query value can be a folder name or folder ID. The response will only return templates in the specified folder. (optional)</param>
        /// <param name="folderIds">A comma separated list of folder ID GUIDs. (optional)</param>
        /// <param name="folderTypes"> (optional)</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are:  * custom_fields * documents * folders * notifications * recipients  (optional)</param>
        /// <param name="order">Sets the direction order used to sort the list. Valid values are: -asc &#x3D; ascending sort order (a to z)  -desc &#x3D; descending sort order (z to a) (optional)</param>
        /// <param name="orderBy">Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used. (optional)</param>
        /// <param name="searchText">The search text used to search the names of templates. (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="sharedByMe">If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected. (optional)</param>
        /// <param name="startPosition">The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero). (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="usedFromDate">Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used. (optional)</param>
        /// <param name="usedToDate">End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="userFilter">Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user. (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>ApiResponse of EnvelopeTemplateResults</returns>
        public ApiResponse< EnvelopeTemplateResults > TemplatesGetTemplatesWithHttpInfo (string accountId, string count = null, string folder = null, string folderIds = null, string folderTypes = null, string fromDate = null, string include = null, string order = null, string orderBy = null, string searchText = null, string shared = null, string sharedByMe = null, string startPosition = null, string toDate = null, string usedFromDate = null, string usedToDate = null, string userFilter = null, string userId = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesGetTemplates");

            var localVarPath = "/v2/accounts/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (folderIds != null) localVarQueryParams.Add("folder_ids", Configuration.ApiClient.ParameterToString(folderIds)); // query parameter
            if (folderTypes != null) localVarQueryParams.Add("folder_types", Configuration.ApiClient.ParameterToString(folderTypes)); // query parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (shared != null) localVarQueryParams.Add("shared", Configuration.ApiClient.ParameterToString(shared)); // query parameter
            if (sharedByMe != null) localVarQueryParams.Add("shared_by_me", Configuration.ApiClient.ParameterToString(sharedByMe)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter
            if (usedFromDate != null) localVarQueryParams.Add("used_from_date", Configuration.ApiClient.ParameterToString(usedFromDate)); // query parameter
            if (usedToDate != null) localVarQueryParams.Add("used_to_date", Configuration.ApiClient.ParameterToString(usedToDate)); // query parameter
            if (userFilter != null) localVarQueryParams.Add("user_filter", Configuration.ApiClient.ParameterToString(userFilter)); // query parameter
            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesGetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeTemplateResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeTemplateResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeTemplateResults)));
            
        }

        /// <summary>
        /// Gets the definition of a template. Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">Number of records to return in the cache. (optional)</param>
        /// <param name="folder">The query value can be a folder name or folder ID. The response will only return templates in the specified folder. (optional)</param>
        /// <param name="folderIds">A comma separated list of folder ID GUIDs. (optional)</param>
        /// <param name="folderTypes"> (optional)</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are:  * custom_fields * documents * folders * notifications * recipients  (optional)</param>
        /// <param name="order">Sets the direction order used to sort the list. Valid values are: -asc &#x3D; ascending sort order (a to z)  -desc &#x3D; descending sort order (z to a) (optional)</param>
        /// <param name="orderBy">Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used. (optional)</param>
        /// <param name="searchText">The search text used to search the names of templates. (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="sharedByMe">If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected. (optional)</param>
        /// <param name="startPosition">The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero). (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="usedFromDate">Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used. (optional)</param>
        /// <param name="usedToDate">End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="userFilter">Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user. (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of EnvelopeTemplateResults</returns>
        public async System.Threading.Tasks.Task<EnvelopeTemplateResults> TemplatesGetTemplatesAsync (string accountId, string count = null, string folder = null, string folderIds = null, string folderTypes = null, string fromDate = null, string include = null, string order = null, string orderBy = null, string searchText = null, string shared = null, string sharedByMe = null, string startPosition = null, string toDate = null, string usedFromDate = null, string usedToDate = null, string userFilter = null, string userId = null)
        {
             ApiResponse<EnvelopeTemplateResults> localVarResponse = await TemplatesGetTemplatesAsyncWithHttpInfo(accountId, count, folder, folderIds, folderTypes, fromDate, include, order, orderBy, searchText, shared, sharedByMe, startPosition, toDate, usedFromDate, usedToDate, userFilter, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the definition of a template. Retrieves the list of templates for the specified account. The request can be limited to a specific folder.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="count">Number of records to return in the cache. (optional)</param>
        /// <param name="folder">The query value can be a folder name or folder ID. The response will only return templates in the specified folder. (optional)</param>
        /// <param name="folderIds">A comma separated list of folder ID GUIDs. (optional)</param>
        /// <param name="folderTypes"> (optional)</param>
        /// <param name="fromDate">Start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created. (optional)</param>
        /// <param name="include">A comma-separated list of additional template attributes to include in the response. Valid values are:  * custom_fields * documents * folders * notifications * recipients  (optional)</param>
        /// <param name="order">Sets the direction order used to sort the list. Valid values are: -asc &#x3D; ascending sort order (a to z)  -desc &#x3D; descending sort order (z to a) (optional)</param>
        /// <param name="orderBy">Sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used. (optional)</param>
        /// <param name="searchText">The search text used to search the names of templates. (optional)</param>
        /// <param name="shared"> (optional)</param>
        /// <param name="sharedByMe">If true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected. (optional)</param>
        /// <param name="startPosition">The starting index for the first template shown in the response. This must be greater than or equal to 0 (zero). (optional)</param>
        /// <param name="toDate">End of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="usedFromDate">Start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used. (optional)</param>
        /// <param name="usedToDate">End of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date. (optional)</param>
        /// <param name="userFilter">Sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user. (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <returns>Task of ApiResponse (EnvelopeTemplateResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvelopeTemplateResults>> TemplatesGetTemplatesAsyncWithHttpInfo (string accountId, string count = null, string folder = null, string folderIds = null, string folderTypes = null, string fromDate = null, string include = null, string order = null, string orderBy = null, string searchText = null, string shared = null, string sharedByMe = null, string startPosition = null, string toDate = null, string usedFromDate = null, string usedToDate = null, string userFilter = null, string userId = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesGetTemplates");

            var localVarPath = "/v2/accounts/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (folderIds != null) localVarQueryParams.Add("folder_ids", Configuration.ApiClient.ParameterToString(folderIds)); // query parameter
            if (folderTypes != null) localVarQueryParams.Add("folder_types", Configuration.ApiClient.ParameterToString(folderTypes)); // query parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("order_by", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (searchText != null) localVarQueryParams.Add("search_text", Configuration.ApiClient.ParameterToString(searchText)); // query parameter
            if (shared != null) localVarQueryParams.Add("shared", Configuration.ApiClient.ParameterToString(shared)); // query parameter
            if (sharedByMe != null) localVarQueryParams.Add("shared_by_me", Configuration.ApiClient.ParameterToString(sharedByMe)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter
            if (usedFromDate != null) localVarQueryParams.Add("used_from_date", Configuration.ApiClient.ParameterToString(usedFromDate)); // query parameter
            if (usedToDate != null) localVarQueryParams.Add("used_to_date", Configuration.ApiClient.ParameterToString(usedToDate)); // query parameter
            if (userFilter != null) localVarQueryParams.Add("user_filter", Configuration.ApiClient.ParameterToString(userFilter)); // query parameter
            if (userId != null) localVarQueryParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesGetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvelopeTemplateResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnvelopeTemplateResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvelopeTemplateResults)));
            
        }

        /// <summary>
        /// Creates an envelope from a template. Creates a template definition using a multipart request.  ### Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_UserName]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_Email]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>TemplateSummary</returns>
        public TemplateSummary TemplatesPostTemplates (string accountId, Templates templates = null)
        {
             ApiResponse<TemplateSummary> localVarResponse = TemplatesPostTemplatesWithHttpInfo(accountId, templates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an envelope from a template. Creates a template definition using a multipart request.  ### Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_UserName]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_Email]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>ApiResponse of TemplateSummary</returns>
        public ApiResponse< TemplateSummary > TemplatesPostTemplatesWithHttpInfo (string accountId, Templates templates = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesPostTemplates");

            var localVarPath = "/v2/accounts/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templates != null && templates.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templates; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPostTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateSummary)));
            
        }

        /// <summary>
        /// Creates an envelope from a template. Creates a template definition using a multipart request.  ### Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_UserName]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_Email]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>Task of TemplateSummary</returns>
        public async System.Threading.Tasks.Task<TemplateSummary> TemplatesPostTemplatesAsync (string accountId, Templates templates = null)
        {
             ApiResponse<TemplateSummary> localVarResponse = await TemplatesPostTemplatesAsyncWithHttpInfo(accountId, templates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an envelope from a template. Creates a template definition using a multipart request.  ### Template Email Subject Merge Fields  Call this endpoint to insert a recipient name and email address merge fields into the email subject line when creating or sending from a template.  The merge fields, based on the recipient&#39;s role name, are added to the &#x60;emailSubject&#x60; property when the template is created or when the template is used to create an envelope. After a template sender adds the name and email information for the recipient and sends the envelope, the recipient information is automatically merged into the appropriate fields in the email subject line.  Both the sender and the recipients will see the information in the email subject line for any emails associated with the template. This provides an easy way for senders to organize their envelope emails without having to open an envelope to check the recipient. ###### Note: If merging the recipient information into the subject line causes the subject line to exceed 100 characters, then any characters over the 100 character limit are not included in the subject line. For cases where the recipient name or email is expected to be long, you should consider placing the merge field at the start of the email subject.  To add a recipient&#39;s name in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_UserName]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_UserName]], Please sign this NDA\&quot;,&#x60;  To add a recipient&#39;s email address in the subject line add the following text in the &#x60;emailSubject&#x60; property when creating the template or when sending an envelope from a template:  &#x60;[[&lt;roleName&gt;_Email]]&#x60;  Example:  &#x60;\&quot;emailSubject\&quot;:\&quot;[[Signer 1_Email]], Please sign this NDA\&quot;,&#x60;   In both cases the &lt;roleName&gt; is the recipient&#39;s contents of the &#x60;roleName&#x60; property in the template.  For cases where another recipient (such as an Agent, Editor, or Intermediary recipient) is entering the name and email information for the recipient included in the email subject, then &#x60;[[&lt;roleName&gt;_UserName]]&#x60; or &#x60;[[&lt;roleName&gt;_Email]]&#x60; is shown in the email subject.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateSummary>> TemplatesPostTemplatesAsyncWithHttpInfo (string accountId, Templates templates = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesPostTemplates");

            var localVarPath = "/v2/accounts/{accountId}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templates != null && templates.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templates; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPostTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateSummary)));
            
        }

        /// <summary>
        /// Updates an existing template. Updates an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>TemplateUpdateSummary</returns>
        public TemplateUpdateSummary TemplatesPutTemplate (string accountId, string templateId, Templates templates = null)
        {
             ApiResponse<TemplateUpdateSummary> localVarResponse = TemplatesPutTemplateWithHttpInfo(accountId, templateId, templates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing template. Updates an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>ApiResponse of TemplateUpdateSummary</returns>
        public ApiResponse< TemplateUpdateSummary > TemplatesPutTemplateWithHttpInfo (string accountId, string templateId, Templates templates = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesPutTemplate");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->TemplatesPutTemplate");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (templates != null && templates.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templates; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPutTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateUpdateSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateUpdateSummary)));
            
        }

        /// <summary>
        /// Updates an existing template. Updates an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>Task of TemplateUpdateSummary</returns>
        public async System.Threading.Tasks.Task<TemplateUpdateSummary> TemplatesPutTemplateAsync (string accountId, string templateId, Templates templates = null)
        {
             ApiResponse<TemplateUpdateSummary> localVarResponse = await TemplatesPutTemplateAsyncWithHttpInfo(accountId, templateId, templates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing template. Updates an existing template.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templates"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateUpdateSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateUpdateSummary>> TemplatesPutTemplateAsyncWithHttpInfo (string accountId, string templateId, Templates templates = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesPutTemplate");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->TemplatesPutTemplate");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (templates != null && templates.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(templates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templates; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPutTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateUpdateSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateUpdateSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateUpdateSummary)));
            
        }

        /// <summary>
        /// Shares a template with a group Shares a template with the specified members group.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Groups</returns>
        public Groups TemplatesPutTemplatePart (string accountId, string templateId, string templatePart, Groups groups = null)
        {
             ApiResponse<Groups> localVarResponse = TemplatesPutTemplatePartWithHttpInfo(accountId, templateId, templatePart, groups);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Shares a template with a group Shares a template with the specified members group.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>ApiResponse of Groups</returns>
        public ApiResponse< Groups > TemplatesPutTemplatePartWithHttpInfo (string accountId, string templateId, string templatePart, Groups groups = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesPutTemplatePart");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->TemplatesPutTemplatePart");
            // verify the required parameter 'templatePart' is set
            if (templatePart == null)
                throw new ApiException(400, "Missing required parameter 'templatePart' when calling TemplatesApi->TemplatesPutTemplatePart");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/{templatePart}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (templatePart != null) localVarPathParams.Add("templatePart", Configuration.ApiClient.ParameterToString(templatePart)); // path parameter
            if (groups != null && groups.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groups); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groups; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPutTemplatePart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Groups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Groups) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Groups)));
            
        }

        /// <summary>
        /// Shares a template with a group Shares a template with the specified members group.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Task of Groups</returns>
        public async System.Threading.Tasks.Task<Groups> TemplatesPutTemplatePartAsync (string accountId, string templateId, string templatePart, Groups groups = null)
        {
             ApiResponse<Groups> localVarResponse = await TemplatesPutTemplatePartAsyncWithHttpInfo(accountId, templateId, templatePart, groups);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Shares a template with a group Shares a template with the specified members group.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="templateId">The ID of the template being accessed.</param>
        /// <param name="templatePart">Currently, the only defined part is **groups**.</param>
        /// <param name="groups"> (optional)</param>
        /// <returns>Task of ApiResponse (Groups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Groups>> TemplatesPutTemplatePartAsyncWithHttpInfo (string accountId, string templateId, string templatePart, Groups groups = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TemplatesApi->TemplatesPutTemplatePart");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplatesApi->TemplatesPutTemplatePart");
            // verify the required parameter 'templatePart' is set
            if (templatePart == null)
                throw new ApiException(400, "Missing required parameter 'templatePart' when calling TemplatesApi->TemplatesPutTemplatePart");

            var localVarPath = "/v2/accounts/{accountId}/templates/{templateId}/{templatePart}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (templateId != null) localVarPathParams.Add("templateId", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (templatePart != null) localVarPathParams.Add("templatePart", Configuration.ApiClient.ParameterToString(templatePart)); // path parameter
            if (groups != null && groups.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groups); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groups; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPutTemplatePart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Groups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Groups) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Groups)));
            
        }

    }
}
