/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkspaceItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Workspace File
        /// </summary>
        /// <remarks>
        /// Retrieves a workspace file (the binary).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="isDownload">When set to **true**, the Content-Disposition header is set in the response. The value of the header provides the filename of the file. Default is **false**. (optional)</param>
        /// <param name="pdfVersion">When set to **true** the file returned as a PDF. (optional)</param>
        /// <returns></returns>
        void WorkspaceFileGetWorkspaceFile (string accountId, string fileId, string folderId, string workspaceId, string isDownload = null, string pdfVersion = null);

        /// <summary>
        /// Get Workspace File
        /// </summary>
        /// <remarks>
        /// Retrieves a workspace file (the binary).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="isDownload">When set to **true**, the Content-Disposition header is set in the response. The value of the header provides the filename of the file. Default is **false**. (optional)</param>
        /// <param name="pdfVersion">When set to **true** the file returned as a PDF. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceFileGetWorkspaceFileWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId, string isDownload = null, string pdfVersion = null);
        /// <summary>
        /// List File Pages
        /// </summary>
        /// <remarks>
        /// Retrieves a workspace file as rasterized pages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>PageImages</returns>
        PageImages WorkspaceFilePagesGetWorkspaceFilePages (string accountId, string fileId, string folderId, string workspaceId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string startPosition = null);

        /// <summary>
        /// List File Pages
        /// </summary>
        /// <remarks>
        /// Retrieves a workspace file as rasterized pages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>ApiResponse of PageImages</returns>
        ApiResponse<PageImages> WorkspaceFilePagesGetWorkspaceFilePagesWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string startPosition = null);
        /// <summary>
        /// Creates a workspace file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>WorkspaceItems</returns>
        WorkspaceItems WorkspaceFilePostWorkspaceFiles (string accountId, string folderId, string workspaceId);

        /// <summary>
        /// Creates a workspace file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>ApiResponse of WorkspaceItems</returns>
        ApiResponse<WorkspaceItems> WorkspaceFilePostWorkspaceFilesWithHttpInfo (string accountId, string folderId, string workspaceId);
        /// <summary>
        /// Update Workspace File Metadata
        /// </summary>
        /// <remarks>
        /// Updates workspace item metadata for one or more specific files/folders.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>WorkspaceItems</returns>
        WorkspaceItems WorkspaceFilePutWorkspaceFile (string accountId, string fileId, string folderId, string workspaceId);

        /// <summary>
        /// Update Workspace File Metadata
        /// </summary>
        /// <remarks>
        /// Updates workspace item metadata for one or more specific files/folders.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>ApiResponse of WorkspaceItems</returns>
        ApiResponse<WorkspaceItems> WorkspaceFilePutWorkspaceFileWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId);
        /// <summary>
        /// Deletes workspace one or more specific files/folders from the given folder or root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="workspaceItemList"> (optional)</param>
        /// <returns></returns>
        void WorkspaceFolderDeleteWorkspaceItems (string accountId, string folderId, string workspaceId, WorkspaceItemList workspaceItemList = null);

        /// <summary>
        /// Deletes workspace one or more specific files/folders from the given folder or root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="workspaceItemList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceFolderDeleteWorkspaceItemsWithHttpInfo (string accountId, string folderId, string workspaceId, WorkspaceItemList workspaceItemList = null);
        /// <summary>
        /// List Workspace Folder Contents
        /// </summary>
        /// <remarks>
        /// Retrieves workspace folder contents, which can include sub folders and files.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="includeFiles">When set to **true**, file information is returned in the response along with folder information. The default is **false**. (optional)</param>
        /// <param name="includeSubFolders">When set to **true**, information about the sub-folders of the current folder is returned. The default is **false**. (optional)</param>
        /// <param name="includeThumbnails">When set to **true**, thumbnails are returned as part of the response.  The default is **false**. (optional)</param>
        /// <param name="includeUserDetail">Set to **true** to return extended details about the user. The default is **false**. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. (optional)</param>
        /// <param name="workspaceUserId">If set, then the results are filtered to those associated with the specified userId. (optional)</param>
        /// <returns>WorkspaceFolderContents</returns>
        WorkspaceFolderContents WorkspaceFolderGetWorkspaceFolder (string accountId, string folderId, string workspaceId, string count = null, string includeFiles = null, string includeSubFolders = null, string includeThumbnails = null, string includeUserDetail = null, string startPosition = null, string workspaceUserId = null);

        /// <summary>
        /// List Workspace Folder Contents
        /// </summary>
        /// <remarks>
        /// Retrieves workspace folder contents, which can include sub folders and files.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="includeFiles">When set to **true**, file information is returned in the response along with folder information. The default is **false**. (optional)</param>
        /// <param name="includeSubFolders">When set to **true**, information about the sub-folders of the current folder is returned. The default is **false**. (optional)</param>
        /// <param name="includeThumbnails">When set to **true**, thumbnails are returned as part of the response.  The default is **false**. (optional)</param>
        /// <param name="includeUserDetail">Set to **true** to return extended details about the user. The default is **false**. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. (optional)</param>
        /// <param name="workspaceUserId">If set, then the results are filtered to those associated with the specified userId. (optional)</param>
        /// <returns>ApiResponse of WorkspaceFolderContents</returns>
        ApiResponse<WorkspaceFolderContents> WorkspaceFolderGetWorkspaceFolderWithHttpInfo (string accountId, string folderId, string workspaceId, string count = null, string includeFiles = null, string includeSubFolders = null, string includeThumbnails = null, string includeUserDetail = null, string startPosition = null, string workspaceUserId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Workspace File
        /// </summary>
        /// <remarks>
        /// Retrieves a workspace file (the binary).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="isDownload">When set to **true**, the Content-Disposition header is set in the response. The value of the header provides the filename of the file. Default is **false**. (optional)</param>
        /// <param name="pdfVersion">When set to **true** the file returned as a PDF. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceFileGetWorkspaceFileAsync (string accountId, string fileId, string folderId, string workspaceId, string isDownload = null, string pdfVersion = null);

        /// <summary>
        /// Get Workspace File
        /// </summary>
        /// <remarks>
        /// Retrieves a workspace file (the binary).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="isDownload">When set to **true**, the Content-Disposition header is set in the response. The value of the header provides the filename of the file. Default is **false**. (optional)</param>
        /// <param name="pdfVersion">When set to **true** the file returned as a PDF. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceFileGetWorkspaceFileAsyncWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId, string isDownload = null, string pdfVersion = null);
        /// <summary>
        /// List File Pages
        /// </summary>
        /// <remarks>
        /// Retrieves a workspace file as rasterized pages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of PageImages</returns>
        System.Threading.Tasks.Task<PageImages> WorkspaceFilePagesGetWorkspaceFilePagesAsync (string accountId, string fileId, string folderId, string workspaceId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string startPosition = null);

        /// <summary>
        /// List File Pages
        /// </summary>
        /// <remarks>
        /// Retrieves a workspace file as rasterized pages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of ApiResponse (PageImages)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageImages>> WorkspaceFilePagesGetWorkspaceFilePagesAsyncWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string startPosition = null);
        /// <summary>
        /// Creates a workspace file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>Task of WorkspaceItems</returns>
        System.Threading.Tasks.Task<WorkspaceItems> WorkspaceFilePostWorkspaceFilesAsync (string accountId, string folderId, string workspaceId);

        /// <summary>
        /// Creates a workspace file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>Task of ApiResponse (WorkspaceItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceItems>> WorkspaceFilePostWorkspaceFilesAsyncWithHttpInfo (string accountId, string folderId, string workspaceId);
        /// <summary>
        /// Update Workspace File Metadata
        /// </summary>
        /// <remarks>
        /// Updates workspace item metadata for one or more specific files/folders.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>Task of WorkspaceItems</returns>
        System.Threading.Tasks.Task<WorkspaceItems> WorkspaceFilePutWorkspaceFileAsync (string accountId, string fileId, string folderId, string workspaceId);

        /// <summary>
        /// Update Workspace File Metadata
        /// </summary>
        /// <remarks>
        /// Updates workspace item metadata for one or more specific files/folders.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>Task of ApiResponse (WorkspaceItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceItems>> WorkspaceFilePutWorkspaceFileAsyncWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId);
        /// <summary>
        /// Deletes workspace one or more specific files/folders from the given folder or root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="workspaceItemList"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceFolderDeleteWorkspaceItemsAsync (string accountId, string folderId, string workspaceId, WorkspaceItemList workspaceItemList = null);

        /// <summary>
        /// Deletes workspace one or more specific files/folders from the given folder or root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="workspaceItemList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceFolderDeleteWorkspaceItemsAsyncWithHttpInfo (string accountId, string folderId, string workspaceId, WorkspaceItemList workspaceItemList = null);
        /// <summary>
        /// List Workspace Folder Contents
        /// </summary>
        /// <remarks>
        /// Retrieves workspace folder contents, which can include sub folders and files.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="includeFiles">When set to **true**, file information is returned in the response along with folder information. The default is **false**. (optional)</param>
        /// <param name="includeSubFolders">When set to **true**, information about the sub-folders of the current folder is returned. The default is **false**. (optional)</param>
        /// <param name="includeThumbnails">When set to **true**, thumbnails are returned as part of the response.  The default is **false**. (optional)</param>
        /// <param name="includeUserDetail">Set to **true** to return extended details about the user. The default is **false**. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. (optional)</param>
        /// <param name="workspaceUserId">If set, then the results are filtered to those associated with the specified userId. (optional)</param>
        /// <returns>Task of WorkspaceFolderContents</returns>
        System.Threading.Tasks.Task<WorkspaceFolderContents> WorkspaceFolderGetWorkspaceFolderAsync (string accountId, string folderId, string workspaceId, string count = null, string includeFiles = null, string includeSubFolders = null, string includeThumbnails = null, string includeUserDetail = null, string startPosition = null, string workspaceUserId = null);

        /// <summary>
        /// List Workspace Folder Contents
        /// </summary>
        /// <remarks>
        /// Retrieves workspace folder contents, which can include sub folders and files.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="includeFiles">When set to **true**, file information is returned in the response along with folder information. The default is **false**. (optional)</param>
        /// <param name="includeSubFolders">When set to **true**, information about the sub-folders of the current folder is returned. The default is **false**. (optional)</param>
        /// <param name="includeThumbnails">When set to **true**, thumbnails are returned as part of the response.  The default is **false**. (optional)</param>
        /// <param name="includeUserDetail">Set to **true** to return extended details about the user. The default is **false**. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. (optional)</param>
        /// <param name="workspaceUserId">If set, then the results are filtered to those associated with the specified userId. (optional)</param>
        /// <returns>Task of ApiResponse (WorkspaceFolderContents)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkspaceFolderContents>> WorkspaceFolderGetWorkspaceFolderAsyncWithHttpInfo (string accountId, string folderId, string workspaceId, string count = null, string includeFiles = null, string includeSubFolders = null, string includeThumbnails = null, string includeUserDetail = null, string startPosition = null, string workspaceUserId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkspaceItemsApi : IWorkspaceItemsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspaceItemsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkspaceItemsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Workspace File Retrieves a workspace file (the binary).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="isDownload">When set to **true**, the Content-Disposition header is set in the response. The value of the header provides the filename of the file. Default is **false**. (optional)</param>
        /// <param name="pdfVersion">When set to **true** the file returned as a PDF. (optional)</param>
        /// <returns></returns>
        public void WorkspaceFileGetWorkspaceFile (string accountId, string fileId, string folderId, string workspaceId, string isDownload = null, string pdfVersion = null)
        {
             WorkspaceFileGetWorkspaceFileWithHttpInfo(accountId, fileId, folderId, workspaceId, isDownload, pdfVersion);
        }

        /// <summary>
        /// Get Workspace File Retrieves a workspace file (the binary).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="isDownload">When set to **true**, the Content-Disposition header is set in the response. The value of the header provides the filename of the file. Default is **false**. (optional)</param>
        /// <param name="pdfVersion">When set to **true** the file returned as a PDF. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceFileGetWorkspaceFileWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId, string isDownload = null, string pdfVersion = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFileGetWorkspaceFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WorkspaceItemsApi->WorkspaceFileGetWorkspaceFile");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFileGetWorkspaceFile");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFileGetWorkspaceFile");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (isDownload != null) localVarQueryParams.Add("is_download", Configuration.ApiClient.ParameterToString(isDownload)); // query parameter
            if (pdfVersion != null) localVarQueryParams.Add("pdf_version", Configuration.ApiClient.ParameterToString(pdfVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFileGetWorkspaceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get Workspace File Retrieves a workspace file (the binary).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="isDownload">When set to **true**, the Content-Disposition header is set in the response. The value of the header provides the filename of the file. Default is **false**. (optional)</param>
        /// <param name="pdfVersion">When set to **true** the file returned as a PDF. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceFileGetWorkspaceFileAsync (string accountId, string fileId, string folderId, string workspaceId, string isDownload = null, string pdfVersion = null)
        {
             await WorkspaceFileGetWorkspaceFileAsyncWithHttpInfo(accountId, fileId, folderId, workspaceId, isDownload, pdfVersion);

        }

        /// <summary>
        /// Get Workspace File Retrieves a workspace file (the binary).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="isDownload">When set to **true**, the Content-Disposition header is set in the response. The value of the header provides the filename of the file. Default is **false**. (optional)</param>
        /// <param name="pdfVersion">When set to **true** the file returned as a PDF. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceFileGetWorkspaceFileAsyncWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId, string isDownload = null, string pdfVersion = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFileGetWorkspaceFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WorkspaceItemsApi->WorkspaceFileGetWorkspaceFile");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFileGetWorkspaceFile");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFileGetWorkspaceFile");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (isDownload != null) localVarQueryParams.Add("is_download", Configuration.ApiClient.ParameterToString(isDownload)); // query parameter
            if (pdfVersion != null) localVarQueryParams.Add("pdf_version", Configuration.ApiClient.ParameterToString(pdfVersion)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFileGetWorkspaceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List File Pages Retrieves a workspace file as rasterized pages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>PageImages</returns>
        public PageImages WorkspaceFilePagesGetWorkspaceFilePages (string accountId, string fileId, string folderId, string workspaceId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string startPosition = null)
        {
             ApiResponse<PageImages> localVarResponse = WorkspaceFilePagesGetWorkspaceFilePagesWithHttpInfo(accountId, fileId, folderId, workspaceId, count, dpi, maxHeight, maxWidth, startPosition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List File Pages Retrieves a workspace file as rasterized pages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>ApiResponse of PageImages</returns>
        public ApiResponse< PageImages > WorkspaceFilePagesGetWorkspaceFilePagesWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFilePagesGetWorkspaceFilePages");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WorkspaceItemsApi->WorkspaceFilePagesGetWorkspaceFilePages");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFilePagesGetWorkspaceFilePages");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFilePagesGetWorkspaceFilePages");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (dpi != null) localVarQueryParams.Add("dpi", Configuration.ApiClient.ParameterToString(dpi)); // query parameter
            if (maxHeight != null) localVarQueryParams.Add("max_height", Configuration.ApiClient.ParameterToString(maxHeight)); // query parameter
            if (maxWidth != null) localVarQueryParams.Add("max_width", Configuration.ApiClient.ParameterToString(maxWidth)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFilePagesGetWorkspaceFilePages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageImages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageImages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageImages)));
            
        }

        /// <summary>
        /// List File Pages Retrieves a workspace file as rasterized pages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of PageImages</returns>
        public async System.Threading.Tasks.Task<PageImages> WorkspaceFilePagesGetWorkspaceFilePagesAsync (string accountId, string fileId, string folderId, string workspaceId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string startPosition = null)
        {
             ApiResponse<PageImages> localVarResponse = await WorkspaceFilePagesGetWorkspaceFilePagesAsyncWithHttpInfo(accountId, fileId, folderId, workspaceId, count, dpi, maxHeight, maxWidth, startPosition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List File Pages Retrieves a workspace file as rasterized pages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="dpi">Number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310. (optional)</param>
        /// <param name="maxHeight">Sets the maximum height (in pixels) of the returned image. (optional)</param>
        /// <param name="maxWidth">Sets the maximum width (in pixels) of the returned image. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)</param>
        /// <returns>Task of ApiResponse (PageImages)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageImages>> WorkspaceFilePagesGetWorkspaceFilePagesAsyncWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId, string count = null, string dpi = null, string maxHeight = null, string maxWidth = null, string startPosition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFilePagesGetWorkspaceFilePages");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WorkspaceItemsApi->WorkspaceFilePagesGetWorkspaceFilePages");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFilePagesGetWorkspaceFilePages");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFilePagesGetWorkspaceFilePages");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (dpi != null) localVarQueryParams.Add("dpi", Configuration.ApiClient.ParameterToString(dpi)); // query parameter
            if (maxHeight != null) localVarQueryParams.Add("max_height", Configuration.ApiClient.ParameterToString(maxHeight)); // query parameter
            if (maxWidth != null) localVarQueryParams.Add("max_width", Configuration.ApiClient.ParameterToString(maxWidth)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFilePagesGetWorkspaceFilePages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageImages>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageImages) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageImages)));
            
        }

        /// <summary>
        /// Creates a workspace file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>WorkspaceItems</returns>
        public WorkspaceItems WorkspaceFilePostWorkspaceFiles (string accountId, string folderId, string workspaceId)
        {
             ApiResponse<WorkspaceItems> localVarResponse = WorkspaceFilePostWorkspaceFilesWithHttpInfo(accountId, folderId, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a workspace file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>ApiResponse of WorkspaceItems</returns>
        public ApiResponse< WorkspaceItems > WorkspaceFilePostWorkspaceFilesWithHttpInfo (string accountId, string folderId, string workspaceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFilePostWorkspaceFiles");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFilePostWorkspaceFiles");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFilePostWorkspaceFiles");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFilePostWorkspaceFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceItems>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceItems) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceItems)));
            
        }

        /// <summary>
        /// Creates a workspace file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>Task of WorkspaceItems</returns>
        public async System.Threading.Tasks.Task<WorkspaceItems> WorkspaceFilePostWorkspaceFilesAsync (string accountId, string folderId, string workspaceId)
        {
             ApiResponse<WorkspaceItems> localVarResponse = await WorkspaceFilePostWorkspaceFilesAsyncWithHttpInfo(accountId, folderId, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a workspace file. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>Task of ApiResponse (WorkspaceItems)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceItems>> WorkspaceFilePostWorkspaceFilesAsyncWithHttpInfo (string accountId, string folderId, string workspaceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFilePostWorkspaceFiles");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFilePostWorkspaceFiles");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFilePostWorkspaceFiles");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFilePostWorkspaceFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceItems>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceItems) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceItems)));
            
        }

        /// <summary>
        /// Update Workspace File Metadata Updates workspace item metadata for one or more specific files/folders.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>WorkspaceItems</returns>
        public WorkspaceItems WorkspaceFilePutWorkspaceFile (string accountId, string fileId, string folderId, string workspaceId)
        {
             ApiResponse<WorkspaceItems> localVarResponse = WorkspaceFilePutWorkspaceFileWithHttpInfo(accountId, fileId, folderId, workspaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Workspace File Metadata Updates workspace item metadata for one or more specific files/folders.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>ApiResponse of WorkspaceItems</returns>
        public ApiResponse< WorkspaceItems > WorkspaceFilePutWorkspaceFileWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFilePutWorkspaceFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WorkspaceItemsApi->WorkspaceFilePutWorkspaceFile");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFilePutWorkspaceFile");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFilePutWorkspaceFile");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFilePutWorkspaceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceItems>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceItems) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceItems)));
            
        }

        /// <summary>
        /// Update Workspace File Metadata Updates workspace item metadata for one or more specific files/folders.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>Task of WorkspaceItems</returns>
        public async System.Threading.Tasks.Task<WorkspaceItems> WorkspaceFilePutWorkspaceFileAsync (string accountId, string fileId, string folderId, string workspaceId)
        {
             ApiResponse<WorkspaceItems> localVarResponse = await WorkspaceFilePutWorkspaceFileAsyncWithHttpInfo(accountId, fileId, folderId, workspaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Workspace File Metadata Updates workspace item metadata for one or more specific files/folders.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fileId">Specifies the room file ID GUID.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <returns>Task of ApiResponse (WorkspaceItems)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceItems>> WorkspaceFilePutWorkspaceFileAsyncWithHttpInfo (string accountId, string fileId, string folderId, string workspaceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFilePutWorkspaceFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WorkspaceItemsApi->WorkspaceFilePutWorkspaceFile");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFilePutWorkspaceFile");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFilePutWorkspaceFile");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}/files/{fileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFilePutWorkspaceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceItems>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceItems) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceItems)));
            
        }

        /// <summary>
        /// Deletes workspace one or more specific files/folders from the given folder or root. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="workspaceItemList"> (optional)</param>
        /// <returns></returns>
        public void WorkspaceFolderDeleteWorkspaceItems (string accountId, string folderId, string workspaceId, WorkspaceItemList workspaceItemList = null)
        {
             WorkspaceFolderDeleteWorkspaceItemsWithHttpInfo(accountId, folderId, workspaceId, workspaceItemList);
        }

        /// <summary>
        /// Deletes workspace one or more specific files/folders from the given folder or root. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="workspaceItemList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceFolderDeleteWorkspaceItemsWithHttpInfo (string accountId, string folderId, string workspaceId, WorkspaceItemList workspaceItemList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFolderDeleteWorkspaceItems");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFolderDeleteWorkspaceItems");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFolderDeleteWorkspaceItems");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceItemList != null && workspaceItemList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(workspaceItemList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceItemList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFolderDeleteWorkspaceItems", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes workspace one or more specific files/folders from the given folder or root. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="workspaceItemList"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceFolderDeleteWorkspaceItemsAsync (string accountId, string folderId, string workspaceId, WorkspaceItemList workspaceItemList = null)
        {
             await WorkspaceFolderDeleteWorkspaceItemsAsyncWithHttpInfo(accountId, folderId, workspaceId, workspaceItemList);

        }

        /// <summary>
        /// Deletes workspace one or more specific files/folders from the given folder or root. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="workspaceItemList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceFolderDeleteWorkspaceItemsAsyncWithHttpInfo (string accountId, string folderId, string workspaceId, WorkspaceItemList workspaceItemList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFolderDeleteWorkspaceItems");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFolderDeleteWorkspaceItems");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFolderDeleteWorkspaceItems");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (workspaceItemList != null && workspaceItemList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(workspaceItemList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workspaceItemList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFolderDeleteWorkspaceItems", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List Workspace Folder Contents Retrieves workspace folder contents, which can include sub folders and files.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="includeFiles">When set to **true**, file information is returned in the response along with folder information. The default is **false**. (optional)</param>
        /// <param name="includeSubFolders">When set to **true**, information about the sub-folders of the current folder is returned. The default is **false**. (optional)</param>
        /// <param name="includeThumbnails">When set to **true**, thumbnails are returned as part of the response.  The default is **false**. (optional)</param>
        /// <param name="includeUserDetail">Set to **true** to return extended details about the user. The default is **false**. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. (optional)</param>
        /// <param name="workspaceUserId">If set, then the results are filtered to those associated with the specified userId. (optional)</param>
        /// <returns>WorkspaceFolderContents</returns>
        public WorkspaceFolderContents WorkspaceFolderGetWorkspaceFolder (string accountId, string folderId, string workspaceId, string count = null, string includeFiles = null, string includeSubFolders = null, string includeThumbnails = null, string includeUserDetail = null, string startPosition = null, string workspaceUserId = null)
        {
             ApiResponse<WorkspaceFolderContents> localVarResponse = WorkspaceFolderGetWorkspaceFolderWithHttpInfo(accountId, folderId, workspaceId, count, includeFiles, includeSubFolders, includeThumbnails, includeUserDetail, startPosition, workspaceUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Workspace Folder Contents Retrieves workspace folder contents, which can include sub folders and files.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="includeFiles">When set to **true**, file information is returned in the response along with folder information. The default is **false**. (optional)</param>
        /// <param name="includeSubFolders">When set to **true**, information about the sub-folders of the current folder is returned. The default is **false**. (optional)</param>
        /// <param name="includeThumbnails">When set to **true**, thumbnails are returned as part of the response.  The default is **false**. (optional)</param>
        /// <param name="includeUserDetail">Set to **true** to return extended details about the user. The default is **false**. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. (optional)</param>
        /// <param name="workspaceUserId">If set, then the results are filtered to those associated with the specified userId. (optional)</param>
        /// <returns>ApiResponse of WorkspaceFolderContents</returns>
        public ApiResponse< WorkspaceFolderContents > WorkspaceFolderGetWorkspaceFolderWithHttpInfo (string accountId, string folderId, string workspaceId, string count = null, string includeFiles = null, string includeSubFolders = null, string includeThumbnails = null, string includeUserDetail = null, string startPosition = null, string workspaceUserId = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFolderGetWorkspaceFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFolderGetWorkspaceFolder");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFolderGetWorkspaceFolder");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (includeFiles != null) localVarQueryParams.Add("include_files", Configuration.ApiClient.ParameterToString(includeFiles)); // query parameter
            if (includeSubFolders != null) localVarQueryParams.Add("include_sub_folders", Configuration.ApiClient.ParameterToString(includeSubFolders)); // query parameter
            if (includeThumbnails != null) localVarQueryParams.Add("include_thumbnails", Configuration.ApiClient.ParameterToString(includeThumbnails)); // query parameter
            if (includeUserDetail != null) localVarQueryParams.Add("include_user_detail", Configuration.ApiClient.ParameterToString(includeUserDetail)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (workspaceUserId != null) localVarQueryParams.Add("workspace_user_id", Configuration.ApiClient.ParameterToString(workspaceUserId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFolderGetWorkspaceFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceFolderContents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceFolderContents) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceFolderContents)));
            
        }

        /// <summary>
        /// List Workspace Folder Contents Retrieves workspace folder contents, which can include sub folders and files.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="includeFiles">When set to **true**, file information is returned in the response along with folder information. The default is **false**. (optional)</param>
        /// <param name="includeSubFolders">When set to **true**, information about the sub-folders of the current folder is returned. The default is **false**. (optional)</param>
        /// <param name="includeThumbnails">When set to **true**, thumbnails are returned as part of the response.  The default is **false**. (optional)</param>
        /// <param name="includeUserDetail">Set to **true** to return extended details about the user. The default is **false**. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. (optional)</param>
        /// <param name="workspaceUserId">If set, then the results are filtered to those associated with the specified userId. (optional)</param>
        /// <returns>Task of WorkspaceFolderContents</returns>
        public async System.Threading.Tasks.Task<WorkspaceFolderContents> WorkspaceFolderGetWorkspaceFolderAsync (string accountId, string folderId, string workspaceId, string count = null, string includeFiles = null, string includeSubFolders = null, string includeThumbnails = null, string includeUserDetail = null, string startPosition = null, string workspaceUserId = null)
        {
             ApiResponse<WorkspaceFolderContents> localVarResponse = await WorkspaceFolderGetWorkspaceFolderAsyncWithHttpInfo(accountId, folderId, workspaceId, count, includeFiles, includeSubFolders, includeThumbnails, includeUserDetail, startPosition, workspaceUserId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Workspace Folder Contents Retrieves workspace folder contents, which can include sub folders and files.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="folderId">The ID of the folder being accessed.</param>
        /// <param name="workspaceId">Specifies the workspace ID GUID.</param>
        /// <param name="count">The maximum number of results to be returned by this request. (optional)</param>
        /// <param name="includeFiles">When set to **true**, file information is returned in the response along with folder information. The default is **false**. (optional)</param>
        /// <param name="includeSubFolders">When set to **true**, information about the sub-folders of the current folder is returned. The default is **false**. (optional)</param>
        /// <param name="includeThumbnails">When set to **true**, thumbnails are returned as part of the response.  The default is **false**. (optional)</param>
        /// <param name="includeUserDetail">Set to **true** to return extended details about the user. The default is **false**. (optional)</param>
        /// <param name="startPosition">The position within the total result set from which to start returning values. (optional)</param>
        /// <param name="workspaceUserId">If set, then the results are filtered to those associated with the specified userId. (optional)</param>
        /// <returns>Task of ApiResponse (WorkspaceFolderContents)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkspaceFolderContents>> WorkspaceFolderGetWorkspaceFolderAsyncWithHttpInfo (string accountId, string folderId, string workspaceId, string count = null, string includeFiles = null, string includeSubFolders = null, string includeThumbnails = null, string includeUserDetail = null, string startPosition = null, string workspaceUserId = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling WorkspaceItemsApi->WorkspaceFolderGetWorkspaceFolder");
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling WorkspaceItemsApi->WorkspaceFolderGetWorkspaceFolder");
            // verify the required parameter 'workspaceId' is set
            if (workspaceId == null)
                throw new ApiException(400, "Missing required parameter 'workspaceId' when calling WorkspaceItemsApi->WorkspaceFolderGetWorkspaceFolder");

            var localVarPath = "/v2/accounts/{accountId}/workspaces/{workspaceId}/folders/{folderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (folderId != null) localVarPathParams.Add("folderId", Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (workspaceId != null) localVarPathParams.Add("workspaceId", Configuration.ApiClient.ParameterToString(workspaceId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (includeFiles != null) localVarQueryParams.Add("include_files", Configuration.ApiClient.ParameterToString(includeFiles)); // query parameter
            if (includeSubFolders != null) localVarQueryParams.Add("include_sub_folders", Configuration.ApiClient.ParameterToString(includeSubFolders)); // query parameter
            if (includeThumbnails != null) localVarQueryParams.Add("include_thumbnails", Configuration.ApiClient.ParameterToString(includeThumbnails)); // query parameter
            if (includeUserDetail != null) localVarQueryParams.Add("include_user_detail", Configuration.ApiClient.ParameterToString(includeUserDetail)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (workspaceUserId != null) localVarQueryParams.Add("workspace_user_id", Configuration.ApiClient.ParameterToString(workspaceUserId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceFolderGetWorkspaceFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkspaceFolderContents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorkspaceFolderContents) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkspaceFolderContents)));
            
        }

    }
}
