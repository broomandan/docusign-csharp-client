/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICloudStorageProvidersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>CloudStorageProviders</returns>
        CloudStorageProviders CloudStorageDeleteCloudStorage (string accountId, string serviceId, string userId);

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        ApiResponse<CloudStorageProviders> CloudStorageDeleteCloudStorageWithHttpInfo (string accountId, string serviceId, string userId);
        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>CloudStorageProviders</returns>
        CloudStorageProviders CloudStorageDeleteCloudStorageProviders (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        ApiResponse<CloudStorageProviders> CloudStorageDeleteCloudStorageProvidersWithHttpInfo (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);
        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>CloudStorageProviders</returns>
        CloudStorageProviders CloudStorageGetCloudStorage (string accountId, string serviceId, string userId, string redirectUrl = null);

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        ApiResponse<CloudStorageProviders> CloudStorageGetCloudStorageWithHttpInfo (string accountId, string serviceId, string userId, string redirectUrl = null);
        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>CloudStorageProviders</returns>
        CloudStorageProviders CloudStorageGetCloudStorageProviders (string accountId, string userId, string redirectUrl = null);

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        ApiResponse<CloudStorageProviders> CloudStorageGetCloudStorageProvidersWithHttpInfo (string accountId, string userId, string redirectUrl = null);
        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user.
        /// </summary>
        /// <remarks>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>CloudStorageProviders</returns>
        CloudStorageProviders CloudStoragePostCloudStorage (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user.
        /// </summary>
        /// <remarks>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        ApiResponse<CloudStorageProviders> CloudStoragePostCloudStorageWithHttpInfo (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of CloudStorageProviders</returns>
        System.Threading.Tasks.Task<CloudStorageProviders> CloudStorageDeleteCloudStorageAsync (string accountId, string serviceId, string userId);

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CloudStorageDeleteCloudStorageAsyncWithHttpInfo (string accountId, string serviceId, string userId);
        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        System.Threading.Tasks.Task<CloudStorageProviders> CloudStorageDeleteCloudStorageProvidersAsync (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers.
        /// </summary>
        /// <remarks>
        /// Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CloudStorageDeleteCloudStorageProvidersAsyncWithHttpInfo (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);
        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        System.Threading.Tasks.Task<CloudStorageProviders> CloudStorageGetCloudStorageAsync (string accountId, string serviceId, string userId, string redirectUrl = null);

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CloudStorageGetCloudStorageAsyncWithHttpInfo (string accountId, string serviceId, string userId, string redirectUrl = null);
        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        System.Threading.Tasks.Task<CloudStorageProviders> CloudStorageGetCloudStorageProvidersAsync (string accountId, string userId, string redirectUrl = null);

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CloudStorageGetCloudStorageProvidersAsyncWithHttpInfo (string accountId, string userId, string redirectUrl = null);
        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user.
        /// </summary>
        /// <remarks>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        System.Threading.Tasks.Task<CloudStorageProviders> CloudStoragePostCloudStorageAsync (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user.
        /// </summary>
        /// <remarks>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CloudStoragePostCloudStorageAsyncWithHttpInfo (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CloudStorageProvidersApi : ICloudStorageProvidersApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudStorageProvidersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CloudStorageProvidersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudStorageProvidersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CloudStorageProvidersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider. Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>CloudStorageProviders</returns>
        public CloudStorageProviders CloudStorageDeleteCloudStorage (string accountId, string serviceId, string userId)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = CloudStorageDeleteCloudStorageWithHttpInfo(accountId, serviceId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider. Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        public ApiResponse< CloudStorageProviders > CloudStorageDeleteCloudStorageWithHttpInfo (string accountId, string serviceId, string userId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageProvidersApi->CloudStorageDeleteCloudStorage");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageProvidersApi->CloudStorageDeleteCloudStorage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageProvidersApi->CloudStorageDeleteCloudStorage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageDeleteCloudStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageProviders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
            
        }

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider. Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of CloudStorageProviders</returns>
        public async System.Threading.Tasks.Task<CloudStorageProviders> CloudStorageDeleteCloudStorageAsync (string accountId, string serviceId, string userId)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = await CloudStorageDeleteCloudStorageAsyncWithHttpInfo(accountId, serviceId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the user authentication information for the specified cloud storage provider. Deletes the user authentication information for the specified cloud storage provider. The next time the user tries to access the cloud storage provider, they must pass normal authentication for this cloud storage provider.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CloudStorageDeleteCloudStorageAsyncWithHttpInfo (string accountId, string serviceId, string userId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageProvidersApi->CloudStorageDeleteCloudStorage");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageProvidersApi->CloudStorageDeleteCloudStorage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageProvidersApi->CloudStorageDeleteCloudStorage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageDeleteCloudStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageProviders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
            
        }

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers. Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>CloudStorageProviders</returns>
        public CloudStorageProviders CloudStorageDeleteCloudStorageProviders (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = CloudStorageDeleteCloudStorageProvidersWithHttpInfo(accountId, userId, cloudStorageProviders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers. Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        public ApiResponse< CloudStorageProviders > CloudStorageDeleteCloudStorageProvidersWithHttpInfo (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageProvidersApi->CloudStorageDeleteCloudStorageProviders");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageProvidersApi->CloudStorageDeleteCloudStorageProviders");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageProviders != null && cloudStorageProviders.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cloudStorageProviders); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloudStorageProviders; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageDeleteCloudStorageProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageProviders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
            
        }

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers. Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        public async System.Threading.Tasks.Task<CloudStorageProviders> CloudStorageDeleteCloudStorageProvidersAsync (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = await CloudStorageDeleteCloudStorageProvidersAsyncWithHttpInfo(accountId, userId, cloudStorageProviders);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the user authentication information for one or more cloud storage providers. Deletes the user authentication information for one or more cloud storage providers. The next time the user tries to access the cloud storage provider, they must pass normal authentication.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CloudStorageDeleteCloudStorageProvidersAsyncWithHttpInfo (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageProvidersApi->CloudStorageDeleteCloudStorageProviders");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageProvidersApi->CloudStorageDeleteCloudStorageProviders");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageProviders != null && cloudStorageProviders.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cloudStorageProviders); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloudStorageProviders; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageDeleteCloudStorageProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageProviders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
            
        }

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>CloudStorageProviders</returns>
        public CloudStorageProviders CloudStorageGetCloudStorage (string accountId, string serviceId, string userId, string redirectUrl = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = CloudStorageGetCloudStorageWithHttpInfo(accountId, serviceId, userId, redirectUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        public ApiResponse< CloudStorageProviders > CloudStorageGetCloudStorageWithHttpInfo (string accountId, string serviceId, string userId, string redirectUrl = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageProvidersApi->CloudStorageGetCloudStorage");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageProvidersApi->CloudStorageGetCloudStorage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageProvidersApi->CloudStorageGetCloudStorage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (redirectUrl != null) localVarQueryParams.Add("redirectUrl", Configuration.ApiClient.ParameterToString(redirectUrl)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageGetCloudStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageProviders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
            
        }

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        public async System.Threading.Tasks.Task<CloudStorageProviders> CloudStorageGetCloudStorageAsync (string accountId, string serviceId, string userId, string redirectUrl = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = await CloudStorageGetCloudStorageAsyncWithHttpInfo(accountId, serviceId, userId, redirectUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the specified Cloud Storage Provider configuration for the User. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="serviceId">The ID of the service to access.   Valid values are the service name (\&quot;Box\&quot;) or the numerical serviceId (\&quot;4136\&quot;).</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CloudStorageGetCloudStorageAsyncWithHttpInfo (string accountId, string serviceId, string userId, string redirectUrl = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageProvidersApi->CloudStorageGetCloudStorage");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling CloudStorageProvidersApi->CloudStorageGetCloudStorage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageProvidersApi->CloudStorageGetCloudStorage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (serviceId != null) localVarPathParams.Add("serviceId", Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (redirectUrl != null) localVarQueryParams.Add("redirectUrl", Configuration.ApiClient.ParameterToString(redirectUrl)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageGetCloudStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageProviders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
            
        }

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>CloudStorageProviders</returns>
        public CloudStorageProviders CloudStorageGetCloudStorageProviders (string accountId, string userId, string redirectUrl = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = CloudStorageGetCloudStorageProvidersWithHttpInfo(accountId, userId, redirectUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        public ApiResponse< CloudStorageProviders > CloudStorageGetCloudStorageProvidersWithHttpInfo (string accountId, string userId, string redirectUrl = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageProvidersApi->CloudStorageGetCloudStorageProviders");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageProvidersApi->CloudStorageGetCloudStorageProviders");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (redirectUrl != null) localVarQueryParams.Add("redirectUrl", Configuration.ApiClient.ParameterToString(redirectUrl)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageGetCloudStorageProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageProviders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
            
        }

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        public async System.Threading.Tasks.Task<CloudStorageProviders> CloudStorageGetCloudStorageProvidersAsync (string accountId, string userId, string redirectUrl = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = await CloudStorageGetCloudStorageProvidersAsyncWithHttpInfo(accountId, userId, redirectUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the Cloud Storage Provider configuration for the specified user. Retrieves the list of cloud storage providers enabled for the account and the configuration information for the user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="redirectUrl"> The URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.  The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.   (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CloudStorageGetCloudStorageProvidersAsyncWithHttpInfo (string accountId, string userId, string redirectUrl = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageProvidersApi->CloudStorageGetCloudStorageProviders");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageProvidersApi->CloudStorageGetCloudStorageProviders");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (redirectUrl != null) localVarQueryParams.Add("redirectUrl", Configuration.ApiClient.ParameterToString(redirectUrl)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStorageGetCloudStorageProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageProviders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
            
        }

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>CloudStorageProviders</returns>
        public CloudStorageProviders CloudStoragePostCloudStorage (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = CloudStoragePostCloudStorageWithHttpInfo(accountId, userId, cloudStorageProviders);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>ApiResponse of CloudStorageProviders</returns>
        public ApiResponse< CloudStorageProviders > CloudStoragePostCloudStorageWithHttpInfo (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageProvidersApi->CloudStoragePostCloudStorage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageProvidersApi->CloudStoragePostCloudStorage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageProviders != null && cloudStorageProviders.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cloudStorageProviders); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloudStorageProviders; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStoragePostCloudStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageProviders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
            
        }

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of CloudStorageProviders</returns>
        public async System.Threading.Tasks.Task<CloudStorageProviders> CloudStoragePostCloudStorageAsync (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
             ApiResponse<CloudStorageProviders> localVarResponse = await CloudStoragePostCloudStorageAsyncWithHttpInfo(accountId, userId, cloudStorageProviders);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Configures the redirect URL information  for one or more cloud storage providers for the specified user. Configures the redirect URL information  for one or more cloud storage providers for the specified user. The redirect URL is added to the authentication URL to complete the return route.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="cloudStorageProviders"> (optional)</param>
        /// <returns>Task of ApiResponse (CloudStorageProviders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageProviders>> CloudStoragePostCloudStorageAsyncWithHttpInfo (string accountId, string userId, CloudStorageProviders cloudStorageProviders = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CloudStorageProvidersApi->CloudStoragePostCloudStorage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CloudStorageProvidersApi->CloudStoragePostCloudStorage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/cloud_storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (cloudStorageProviders != null && cloudStorageProviders.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cloudStorageProviders); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cloudStorageProviders; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudStoragePostCloudStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageProviders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageProviders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageProviders)));
            
        }

    }
}
