/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the user information for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the user information for the specified user.   To return additional user information that details the last login date, login status, and the user&#39;s password expiration date, set the optional &#x60;additional_info&#x60; query string parameter to **true**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <returns>Users</returns>
        Users UserGetUser (string accountId, string userId, string additionalInfo = null, string email = null);

        /// <summary>
        /// Gets the user information for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the user information for the specified user.   To return additional user information that details the last login date, login status, and the user&#39;s password expiration date, set the optional &#x60;additional_info&#x60; query string parameter to **true**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> UserGetUserWithHttpInfo (string accountId, string userId, string additionalInfo = null, string email = null);
        /// <summary>
        /// Deletes the user profile image for the specified user.
        /// </summary>
        /// <remarks>
        /// Deletes the user profile image from the  specified user&#39;s profile.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns></returns>
        void UserProfileImageDeleteUserProfileImage (string accountId, string userId);

        /// <summary>
        /// Deletes the user profile image for the specified user.
        /// </summary>
        /// <remarks>
        /// Deletes the user profile image from the  specified user&#39;s profile.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserProfileImageDeleteUserProfileImageWithHttpInfo (string accountId, string userId);
        /// <summary>
        /// Retrieves the user profile image for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.  If successful, the response returns a 200 - OK and the user profile image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="encoding"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream UserProfileImageGetUserProfileImage (string accountId, string userId, string encoding = null);

        /// <summary>
        /// Retrieves the user profile image for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.  If successful, the response returns a 200 - OK and the user profile image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="encoding"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> UserProfileImageGetUserProfileImageWithHttpInfo (string accountId, string userId, string encoding = null);
        /// <summary>
        /// Updates the user profile image for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the user profile image by uploading an image to the user profile.  The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns></returns>
        void UserProfileImagePutUserProfileImage (string accountId, string userId);

        /// <summary>
        /// Updates the user profile image for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the user profile image by uploading an image to the user profile.  The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserProfileImagePutUserProfileImageWithHttpInfo (string accountId, string userId);
        /// <summary>
        /// Updates the specified user information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="users"> (optional)</param>
        /// <returns>Users</returns>
        Users UserPutUser (string accountId, string userId, Users users = null);

        /// <summary>
        /// Updates the specified user information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="users"> (optional)</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> UserPutUserWithHttpInfo (string accountId, string userId, Users users = null);
        /// <summary>
        /// Gets the user account settings for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the account settings and email notification information for the specified user.  The response returns the account setting name/value information and the email notification settings for the specified user. For more information about the different user settings, see the [ML:userSettings list].
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>UserSettingsInformation</returns>
        UserSettingsInformation UserSettingsGetUserSettings (string accountId, string userId);

        /// <summary>
        /// Gets the user account settings for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the account settings and email notification information for the specified user.  The response returns the account setting name/value information and the email notification settings for the specified user. For more information about the different user settings, see the [ML:userSettings list].
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>ApiResponse of UserSettingsInformation</returns>
        ApiResponse<UserSettingsInformation> UserSettingsGetUserSettingsWithHttpInfo (string accountId, string userId);
        /// <summary>
        /// Updates the user account settings for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the account settings list and email notification types for the specified user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="userSettingsInformation"> (optional)</param>
        /// <returns></returns>
        void UserSettingsPutUserSettings (string accountId, string userId, UserSettingsInformation userSettingsInformation = null);

        /// <summary>
        /// Updates the user account settings for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the account settings list and email notification types for the specified user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="userSettingsInformation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserSettingsPutUserSettingsWithHttpInfo (string accountId, string userId, UserSettingsInformation userSettingsInformation = null);
        /// <summary>
        /// Removes users account privileges.
        /// </summary>
        /// <remarks>
        /// This closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.  The response returns whether the API execution was successful (200 - OK) or  if it failed. The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an &#x60;errorDetails&#x60; node with &#x60;errorCode&#x60; and &#x60;message&#x60; properties.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>GroupUsers</returns>
        GroupUsers UsersDeleteUsers (string accountId, UserInfoList userInfoList = null);

        /// <summary>
        /// Removes users account privileges.
        /// </summary>
        /// <remarks>
        /// This closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.  The response returns whether the API execution was successful (200 - OK) or  if it failed. The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an &#x60;errorDetails&#x60; node with &#x60;errorCode&#x60; and &#x60;message&#x60; properties.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>ApiResponse of GroupUsers</returns>
        ApiResponse<GroupUsers> UsersDeleteUsersWithHttpInfo (string accountId, UserInfoList userInfoList = null);
        /// <summary>
        /// Retrieves the list of users for the specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of users for the specified account.  The response returns the list of users for the account along with the information about the result set. If the &#x60;additional_info&#x60; query was added to the endpoint and set to **true**, the full user information is returned for each user
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="count">Number of records to return. The number must be greater than 0 and less than or equal to 100.  (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="groupId">Filters user records returned by one or more group Id&#39;s. (optional)</param>
        /// <param name="includeUsersettingsForCsv"> (optional)</param>
        /// <param name="loginStatus"> (optional)</param>
        /// <param name="notGroupId"> (optional)</param>
        /// <param name="startPosition">Starting value for the list.  (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>UserInformationList</returns>
        UserInformationList UsersGetUsers (string accountId, string additionalInfo = null, string count = null, string email = null, string emailSubstring = null, string groupId = null, string includeUsersettingsForCsv = null, string loginStatus = null, string notGroupId = null, string startPosition = null, string status = null, string userNameSubstring = null);

        /// <summary>
        /// Retrieves the list of users for the specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of users for the specified account.  The response returns the list of users for the account along with the information about the result set. If the &#x60;additional_info&#x60; query was added to the endpoint and set to **true**, the full user information is returned for each user
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="count">Number of records to return. The number must be greater than 0 and less than or equal to 100.  (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="groupId">Filters user records returned by one or more group Id&#39;s. (optional)</param>
        /// <param name="includeUsersettingsForCsv"> (optional)</param>
        /// <param name="loginStatus"> (optional)</param>
        /// <param name="notGroupId"> (optional)</param>
        /// <param name="startPosition">Starting value for the list.  (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>ApiResponse of UserInformationList</returns>
        ApiResponse<UserInformationList> UsersGetUsersWithHttpInfo (string accountId, string additionalInfo = null, string count = null, string email = null, string emailSubstring = null, string groupId = null, string includeUsersettingsForCsv = null, string loginStatus = null, string notGroupId = null, string startPosition = null, string status = null, string userNameSubstring = null);
        /// <summary>
        /// Adds news user to the specified account.
        /// </summary>
        /// <remarks>
        /// Adds new users to your account. Set the &#x60;userSettings&#x60; property in the request to specify the actions the users can perform on the account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="newUsersDefinition"> (optional)</param>
        /// <returns>NewUsersSummary</returns>
        NewUsersSummary UsersPostUsers (string accountId, NewUsersDefinition newUsersDefinition = null);

        /// <summary>
        /// Adds news user to the specified account.
        /// </summary>
        /// <remarks>
        /// Adds new users to your account. Set the &#x60;userSettings&#x60; property in the request to specify the actions the users can perform on the account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="newUsersDefinition"> (optional)</param>
        /// <returns>ApiResponse of NewUsersSummary</returns>
        ApiResponse<NewUsersSummary> UsersPostUsersWithHttpInfo (string accountId, NewUsersDefinition newUsersDefinition = null);
        /// <summary>
        /// Change one or more user in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInformationList"> (optional)</param>
        /// <returns>UserInformationList</returns>
        UserInformationList UsersPutUsers (string accountId, UserInformationList userInformationList = null);

        /// <summary>
        /// Change one or more user in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInformationList"> (optional)</param>
        /// <returns>ApiResponse of UserInformationList</returns>
        ApiResponse<UserInformationList> UsersPutUsersWithHttpInfo (string accountId, UserInformationList userInformationList = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the user information for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the user information for the specified user.   To return additional user information that details the last login date, login status, and the user&#39;s password expiration date, set the optional &#x60;additional_info&#x60; query string parameter to **true**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> UserGetUserAsync (string accountId, string userId, string additionalInfo = null, string email = null);

        /// <summary>
        /// Gets the user information for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the user information for the specified user.   To return additional user information that details the last login date, login status, and the user&#39;s password expiration date, set the optional &#x60;additional_info&#x60; query string parameter to **true**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> UserGetUserAsyncWithHttpInfo (string accountId, string userId, string additionalInfo = null, string email = null);
        /// <summary>
        /// Deletes the user profile image for the specified user.
        /// </summary>
        /// <remarks>
        /// Deletes the user profile image from the  specified user&#39;s profile.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserProfileImageDeleteUserProfileImageAsync (string accountId, string userId);

        /// <summary>
        /// Deletes the user profile image for the specified user.
        /// </summary>
        /// <remarks>
        /// Deletes the user profile image from the  specified user&#39;s profile.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserProfileImageDeleteUserProfileImageAsyncWithHttpInfo (string accountId, string userId);
        /// <summary>
        /// Retrieves the user profile image for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.  If successful, the response returns a 200 - OK and the user profile image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="encoding"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> UserProfileImageGetUserProfileImageAsync (string accountId, string userId, string encoding = null);

        /// <summary>
        /// Retrieves the user profile image for the specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.  If successful, the response returns a 200 - OK and the user profile image.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="encoding"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> UserProfileImageGetUserProfileImageAsyncWithHttpInfo (string accountId, string userId, string encoding = null);
        /// <summary>
        /// Updates the user profile image for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the user profile image by uploading an image to the user profile.  The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserProfileImagePutUserProfileImageAsync (string accountId, string userId);

        /// <summary>
        /// Updates the user profile image for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the user profile image by uploading an image to the user profile.  The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserProfileImagePutUserProfileImageAsyncWithHttpInfo (string accountId, string userId);
        /// <summary>
        /// Updates the specified user information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="users"> (optional)</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> UserPutUserAsync (string accountId, string userId, Users users = null);

        /// <summary>
        /// Updates the specified user information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="users"> (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> UserPutUserAsyncWithHttpInfo (string accountId, string userId, Users users = null);
        /// <summary>
        /// Gets the user account settings for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the account settings and email notification information for the specified user.  The response returns the account setting name/value information and the email notification settings for the specified user. For more information about the different user settings, see the [ML:userSettings list].
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of UserSettingsInformation</returns>
        System.Threading.Tasks.Task<UserSettingsInformation> UserSettingsGetUserSettingsAsync (string accountId, string userId);

        /// <summary>
        /// Gets the user account settings for a specified user.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of the account settings and email notification information for the specified user.  The response returns the account setting name/value information and the email notification settings for the specified user. For more information about the different user settings, see the [ML:userSettings list].
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of ApiResponse (UserSettingsInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSettingsInformation>> UserSettingsGetUserSettingsAsyncWithHttpInfo (string accountId, string userId);
        /// <summary>
        /// Updates the user account settings for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the account settings list and email notification types for the specified user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="userSettingsInformation"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserSettingsPutUserSettingsAsync (string accountId, string userId, UserSettingsInformation userSettingsInformation = null);

        /// <summary>
        /// Updates the user account settings for a specified user.
        /// </summary>
        /// <remarks>
        /// Updates the account settings list and email notification types for the specified user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="userSettingsInformation"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserSettingsPutUserSettingsAsyncWithHttpInfo (string accountId, string userId, UserSettingsInformation userSettingsInformation = null);
        /// <summary>
        /// Removes users account privileges.
        /// </summary>
        /// <remarks>
        /// This closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.  The response returns whether the API execution was successful (200 - OK) or  if it failed. The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an &#x60;errorDetails&#x60; node with &#x60;errorCode&#x60; and &#x60;message&#x60; properties.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of GroupUsers</returns>
        System.Threading.Tasks.Task<GroupUsers> UsersDeleteUsersAsync (string accountId, UserInfoList userInfoList = null);

        /// <summary>
        /// Removes users account privileges.
        /// </summary>
        /// <remarks>
        /// This closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.  The response returns whether the API execution was successful (200 - OK) or  if it failed. The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an &#x60;errorDetails&#x60; node with &#x60;errorCode&#x60; and &#x60;message&#x60; properties.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupUsers>> UsersDeleteUsersAsyncWithHttpInfo (string accountId, UserInfoList userInfoList = null);
        /// <summary>
        /// Retrieves the list of users for the specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of users for the specified account.  The response returns the list of users for the account along with the information about the result set. If the &#x60;additional_info&#x60; query was added to the endpoint and set to **true**, the full user information is returned for each user
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="count">Number of records to return. The number must be greater than 0 and less than or equal to 100.  (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="groupId">Filters user records returned by one or more group Id&#39;s. (optional)</param>
        /// <param name="includeUsersettingsForCsv"> (optional)</param>
        /// <param name="loginStatus"> (optional)</param>
        /// <param name="notGroupId"> (optional)</param>
        /// <param name="startPosition">Starting value for the list.  (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>Task of UserInformationList</returns>
        System.Threading.Tasks.Task<UserInformationList> UsersGetUsersAsync (string accountId, string additionalInfo = null, string count = null, string email = null, string emailSubstring = null, string groupId = null, string includeUsersettingsForCsv = null, string loginStatus = null, string notGroupId = null, string startPosition = null, string status = null, string userNameSubstring = null);

        /// <summary>
        /// Retrieves the list of users for the specified account.
        /// </summary>
        /// <remarks>
        /// Retrieves the list of users for the specified account.  The response returns the list of users for the account along with the information about the result set. If the &#x60;additional_info&#x60; query was added to the endpoint and set to **true**, the full user information is returned for each user
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="count">Number of records to return. The number must be greater than 0 and less than or equal to 100.  (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="groupId">Filters user records returned by one or more group Id&#39;s. (optional)</param>
        /// <param name="includeUsersettingsForCsv"> (optional)</param>
        /// <param name="loginStatus"> (optional)</param>
        /// <param name="notGroupId"> (optional)</param>
        /// <param name="startPosition">Starting value for the list.  (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>Task of ApiResponse (UserInformationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInformationList>> UsersGetUsersAsyncWithHttpInfo (string accountId, string additionalInfo = null, string count = null, string email = null, string emailSubstring = null, string groupId = null, string includeUsersettingsForCsv = null, string loginStatus = null, string notGroupId = null, string startPosition = null, string status = null, string userNameSubstring = null);
        /// <summary>
        /// Adds news user to the specified account.
        /// </summary>
        /// <remarks>
        /// Adds new users to your account. Set the &#x60;userSettings&#x60; property in the request to specify the actions the users can perform on the account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="newUsersDefinition"> (optional)</param>
        /// <returns>Task of NewUsersSummary</returns>
        System.Threading.Tasks.Task<NewUsersSummary> UsersPostUsersAsync (string accountId, NewUsersDefinition newUsersDefinition = null);

        /// <summary>
        /// Adds news user to the specified account.
        /// </summary>
        /// <remarks>
        /// Adds new users to your account. Set the &#x60;userSettings&#x60; property in the request to specify the actions the users can perform on the account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="newUsersDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (NewUsersSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewUsersSummary>> UsersPostUsersAsyncWithHttpInfo (string accountId, NewUsersDefinition newUsersDefinition = null);
        /// <summary>
        /// Change one or more user in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInformationList"> (optional)</param>
        /// <returns>Task of UserInformationList</returns>
        System.Threading.Tasks.Task<UserInformationList> UsersPutUsersAsync (string accountId, UserInformationList userInformationList = null);

        /// <summary>
        /// Change one or more user in the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInformationList"> (optional)</param>
        /// <returns>Task of ApiResponse (UserInformationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInformationList>> UsersPutUsersAsyncWithHttpInfo (string accountId, UserInformationList userInformationList = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the user information for a specified user. Retrieves the user information for the specified user.   To return additional user information that details the last login date, login status, and the user&#39;s password expiration date, set the optional &#x60;additional_info&#x60; query string parameter to **true**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <returns>Users</returns>
        public Users UserGetUser (string accountId, string userId, string additionalInfo = null, string email = null)
        {
             ApiResponse<Users> localVarResponse = UserGetUserWithHttpInfo(accountId, userId, additionalInfo, email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the user information for a specified user. Retrieves the user information for the specified user.   To return additional user information that details the last login date, login status, and the user&#39;s password expiration date, set the optional &#x60;additional_info&#x60; query string parameter to **true**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <returns>ApiResponse of Users</returns>
        public ApiResponse< Users > UserGetUserWithHttpInfo (string accountId, string userId, string additionalInfo = null, string email = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserGetUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserGetUser");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (additionalInfo != null) localVarQueryParams.Add("additional_info", Configuration.ApiClient.ParameterToString(additionalInfo)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Users>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Users) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Users)));
            
        }

        /// <summary>
        /// Gets the user information for a specified user. Retrieves the user information for the specified user.   To return additional user information that details the last login date, login status, and the user&#39;s password expiration date, set the optional &#x60;additional_info&#x60; query string parameter to **true**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> UserGetUserAsync (string accountId, string userId, string additionalInfo = null, string email = null)
        {
             ApiResponse<Users> localVarResponse = await UserGetUserAsyncWithHttpInfo(accountId, userId, additionalInfo, email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the user information for a specified user. Retrieves the user information for the specified user.   To return additional user information that details the last login date, login status, and the user&#39;s password expiration date, set the optional &#x60;additional_info&#x60; query string parameter to **true**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Users>> UserGetUserAsyncWithHttpInfo (string accountId, string userId, string additionalInfo = null, string email = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserGetUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserGetUser");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (additionalInfo != null) localVarQueryParams.Add("additional_info", Configuration.ApiClient.ParameterToString(additionalInfo)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Users>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Users) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Users)));
            
        }

        /// <summary>
        /// Deletes the user profile image for the specified user. Deletes the user profile image from the  specified user&#39;s profile.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns></returns>
        public void UserProfileImageDeleteUserProfileImage (string accountId, string userId)
        {
             UserProfileImageDeleteUserProfileImageWithHttpInfo(accountId, userId);
        }

        /// <summary>
        /// Deletes the user profile image for the specified user. Deletes the user profile image from the  specified user&#39;s profile.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserProfileImageDeleteUserProfileImageWithHttpInfo (string accountId, string userId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserProfileImageDeleteUserProfileImage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserProfileImageDeleteUserProfileImage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/profile/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileImageDeleteUserProfileImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the user profile image for the specified user. Deletes the user profile image from the  specified user&#39;s profile.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserProfileImageDeleteUserProfileImageAsync (string accountId, string userId)
        {
             await UserProfileImageDeleteUserProfileImageAsyncWithHttpInfo(accountId, userId);

        }

        /// <summary>
        /// Deletes the user profile image for the specified user. Deletes the user profile image from the  specified user&#39;s profile.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserProfileImageDeleteUserProfileImageAsyncWithHttpInfo (string accountId, string userId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserProfileImageDeleteUserProfileImage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserProfileImageDeleteUserProfileImage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/profile/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileImageDeleteUserProfileImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves the user profile image for the specified user. Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.  If successful, the response returns a 200 - OK and the user profile image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="encoding"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream UserProfileImageGetUserProfileImage (string accountId, string userId, string encoding = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = UserProfileImageGetUserProfileImageWithHttpInfo(accountId, userId, encoding);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the user profile image for the specified user. Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.  If successful, the response returns a 200 - OK and the user profile image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="encoding"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > UserProfileImageGetUserProfileImageWithHttpInfo (string accountId, string userId, string encoding = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserProfileImageGetUserProfileImage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserProfileImageGetUserProfileImage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/profile/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/gif"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (encoding != null) localVarQueryParams.Add("encoding", Configuration.ApiClient.ParameterToString(encoding)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileImageGetUserProfileImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Retrieves the user profile image for the specified user. Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.  If successful, the response returns a 200 - OK and the user profile image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="encoding"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> UserProfileImageGetUserProfileImageAsync (string accountId, string userId, string encoding = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await UserProfileImageGetUserProfileImageAsyncWithHttpInfo(accountId, userId, encoding);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the user profile image for the specified user. Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.  If successful, the response returns a 200 - OK and the user profile image.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="encoding"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> UserProfileImageGetUserProfileImageAsyncWithHttpInfo (string accountId, string userId, string encoding = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserProfileImageGetUserProfileImage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserProfileImageGetUserProfileImage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/profile/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/gif"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (encoding != null) localVarQueryParams.Add("encoding", Configuration.ApiClient.ParameterToString(encoding)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileImageGetUserProfileImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Updates the user profile image for a specified user. Updates the user profile image by uploading an image to the user profile.  The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns></returns>
        public void UserProfileImagePutUserProfileImage (string accountId, string userId)
        {
             UserProfileImagePutUserProfileImageWithHttpInfo(accountId, userId);
        }

        /// <summary>
        /// Updates the user profile image for a specified user. Updates the user profile image by uploading an image to the user profile.  The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserProfileImagePutUserProfileImageWithHttpInfo (string accountId, string userId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserProfileImagePutUserProfileImage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserProfileImagePutUserProfileImage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/profile/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileImagePutUserProfileImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the user profile image for a specified user. Updates the user profile image by uploading an image to the user profile.  The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserProfileImagePutUserProfileImageAsync (string accountId, string userId)
        {
             await UserProfileImagePutUserProfileImageAsyncWithHttpInfo(accountId, userId);

        }

        /// <summary>
        /// Updates the user profile image for a specified user. Updates the user profile image by uploading an image to the user profile.  The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserProfileImagePutUserProfileImageAsyncWithHttpInfo (string accountId, string userId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserProfileImagePutUserProfileImage");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserProfileImagePutUserProfileImage");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/profile/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserProfileImagePutUserProfileImage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the specified user information. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="users"> (optional)</param>
        /// <returns>Users</returns>
        public Users UserPutUser (string accountId, string userId, Users users = null)
        {
             ApiResponse<Users> localVarResponse = UserPutUserWithHttpInfo(accountId, userId, users);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the specified user information. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="users"> (optional)</param>
        /// <returns>ApiResponse of Users</returns>
        public ApiResponse< Users > UserPutUserWithHttpInfo (string accountId, string userId, Users users = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserPutUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserPutUser");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (users != null && users.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(users); // http body (model) parameter
            }
            else
            {
                localVarPostBody = users; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPutUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Users>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Users) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Users)));
            
        }

        /// <summary>
        /// Updates the specified user information. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="users"> (optional)</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> UserPutUserAsync (string accountId, string userId, Users users = null)
        {
             ApiResponse<Users> localVarResponse = await UserPutUserAsyncWithHttpInfo(accountId, userId, users);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the specified user information. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="users"> (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Users>> UserPutUserAsyncWithHttpInfo (string accountId, string userId, Users users = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserPutUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserPutUser");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (users != null && users.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(users); // http body (model) parameter
            }
            else
            {
                localVarPostBody = users; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserPutUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Users>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Users) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Users)));
            
        }

        /// <summary>
        /// Gets the user account settings for a specified user. Retrieves a list of the account settings and email notification information for the specified user.  The response returns the account setting name/value information and the email notification settings for the specified user. For more information about the different user settings, see the [ML:userSettings list].
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>UserSettingsInformation</returns>
        public UserSettingsInformation UserSettingsGetUserSettings (string accountId, string userId)
        {
             ApiResponse<UserSettingsInformation> localVarResponse = UserSettingsGetUserSettingsWithHttpInfo(accountId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the user account settings for a specified user. Retrieves a list of the account settings and email notification information for the specified user.  The response returns the account setting name/value information and the email notification settings for the specified user. For more information about the different user settings, see the [ML:userSettings list].
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>ApiResponse of UserSettingsInformation</returns>
        public ApiResponse< UserSettingsInformation > UserSettingsGetUserSettingsWithHttpInfo (string accountId, string userId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserSettingsGetUserSettings");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserSettingsGetUserSettings");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSettingsGetUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSettingsInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSettingsInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSettingsInformation)));
            
        }

        /// <summary>
        /// Gets the user account settings for a specified user. Retrieves a list of the account settings and email notification information for the specified user.  The response returns the account setting name/value information and the email notification settings for the specified user. For more information about the different user settings, see the [ML:userSettings list].
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of UserSettingsInformation</returns>
        public async System.Threading.Tasks.Task<UserSettingsInformation> UserSettingsGetUserSettingsAsync (string accountId, string userId)
        {
             ApiResponse<UserSettingsInformation> localVarResponse = await UserSettingsGetUserSettingsAsyncWithHttpInfo(accountId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the user account settings for a specified user. Retrieves a list of the account settings and email notification information for the specified user.  The response returns the account setting name/value information and the email notification settings for the specified user. For more information about the different user settings, see the [ML:userSettings list].
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <returns>Task of ApiResponse (UserSettingsInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSettingsInformation>> UserSettingsGetUserSettingsAsyncWithHttpInfo (string accountId, string userId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserSettingsGetUserSettings");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserSettingsGetUserSettings");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSettingsGetUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSettingsInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSettingsInformation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSettingsInformation)));
            
        }

        /// <summary>
        /// Updates the user account settings for a specified user. Updates the account settings list and email notification types for the specified user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="userSettingsInformation"> (optional)</param>
        /// <returns></returns>
        public void UserSettingsPutUserSettings (string accountId, string userId, UserSettingsInformation userSettingsInformation = null)
        {
             UserSettingsPutUserSettingsWithHttpInfo(accountId, userId, userSettingsInformation);
        }

        /// <summary>
        /// Updates the user account settings for a specified user. Updates the account settings list and email notification types for the specified user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="userSettingsInformation"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserSettingsPutUserSettingsWithHttpInfo (string accountId, string userId, UserSettingsInformation userSettingsInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserSettingsPutUserSettings");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserSettingsPutUserSettings");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (userSettingsInformation != null && userSettingsInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userSettingsInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSettingsInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSettingsPutUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the user account settings for a specified user. Updates the account settings list and email notification types for the specified user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="userSettingsInformation"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserSettingsPutUserSettingsAsync (string accountId, string userId, UserSettingsInformation userSettingsInformation = null)
        {
             await UserSettingsPutUserSettingsAsyncWithHttpInfo(accountId, userId, userSettingsInformation);

        }

        /// <summary>
        /// Updates the user account settings for a specified user. Updates the account settings list and email notification types for the specified user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</param>
        /// <param name="userSettingsInformation"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserSettingsPutUserSettingsAsyncWithHttpInfo (string accountId, string userId, UserSettingsInformation userSettingsInformation = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UserSettingsPutUserSettings");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UserSettingsPutUserSettings");

            var localVarPath = "/v2/accounts/{accountId}/users/{userId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (userSettingsInformation != null && userSettingsInformation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userSettingsInformation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSettingsInformation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSettingsPutUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes users account privileges. This closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.  The response returns whether the API execution was successful (200 - OK) or  if it failed. The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an &#x60;errorDetails&#x60; node with &#x60;errorCode&#x60; and &#x60;message&#x60; properties.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>GroupUsers</returns>
        public GroupUsers UsersDeleteUsers (string accountId, UserInfoList userInfoList = null)
        {
             ApiResponse<GroupUsers> localVarResponse = UsersDeleteUsersWithHttpInfo(accountId, userInfoList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes users account privileges. This closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.  The response returns whether the API execution was successful (200 - OK) or  if it failed. The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an &#x60;errorDetails&#x60; node with &#x60;errorCode&#x60; and &#x60;message&#x60; properties.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>ApiResponse of GroupUsers</returns>
        public ApiResponse< GroupUsers > UsersDeleteUsersWithHttpInfo (string accountId, UserInfoList userInfoList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UsersDeleteUsers");

            var localVarPath = "/v2/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userInfoList != null && userInfoList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userInfoList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInfoList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDeleteUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupUsers)));
            
        }

        /// <summary>
        /// Removes users account privileges. This closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.  The response returns whether the API execution was successful (200 - OK) or  if it failed. The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an &#x60;errorDetails&#x60; node with &#x60;errorCode&#x60; and &#x60;message&#x60; properties.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of GroupUsers</returns>
        public async System.Threading.Tasks.Task<GroupUsers> UsersDeleteUsersAsync (string accountId, UserInfoList userInfoList = null)
        {
             ApiResponse<GroupUsers> localVarResponse = await UsersDeleteUsersAsyncWithHttpInfo(accountId, userInfoList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes users account privileges. This closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.  The response returns whether the API execution was successful (200 - OK) or  if it failed. The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an &#x60;errorDetails&#x60; node with &#x60;errorCode&#x60; and &#x60;message&#x60; properties.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInfoList"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupUsers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupUsers>> UsersDeleteUsersAsyncWithHttpInfo (string accountId, UserInfoList userInfoList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UsersDeleteUsers");

            var localVarPath = "/v2/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userInfoList != null && userInfoList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userInfoList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInfoList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersDeleteUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupUsers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupUsers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupUsers)));
            
        }

        /// <summary>
        /// Retrieves the list of users for the specified account. Retrieves the list of users for the specified account.  The response returns the list of users for the account along with the information about the result set. If the &#x60;additional_info&#x60; query was added to the endpoint and set to **true**, the full user information is returned for each user
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="count">Number of records to return. The number must be greater than 0 and less than or equal to 100.  (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="groupId">Filters user records returned by one or more group Id&#39;s. (optional)</param>
        /// <param name="includeUsersettingsForCsv"> (optional)</param>
        /// <param name="loginStatus"> (optional)</param>
        /// <param name="notGroupId"> (optional)</param>
        /// <param name="startPosition">Starting value for the list.  (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>UserInformationList</returns>
        public UserInformationList UsersGetUsers (string accountId, string additionalInfo = null, string count = null, string email = null, string emailSubstring = null, string groupId = null, string includeUsersettingsForCsv = null, string loginStatus = null, string notGroupId = null, string startPosition = null, string status = null, string userNameSubstring = null)
        {
             ApiResponse<UserInformationList> localVarResponse = UsersGetUsersWithHttpInfo(accountId, additionalInfo, count, email, emailSubstring, groupId, includeUsersettingsForCsv, loginStatus, notGroupId, startPosition, status, userNameSubstring);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of users for the specified account. Retrieves the list of users for the specified account.  The response returns the list of users for the account along with the information about the result set. If the &#x60;additional_info&#x60; query was added to the endpoint and set to **true**, the full user information is returned for each user
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="count">Number of records to return. The number must be greater than 0 and less than or equal to 100.  (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="groupId">Filters user records returned by one or more group Id&#39;s. (optional)</param>
        /// <param name="includeUsersettingsForCsv"> (optional)</param>
        /// <param name="loginStatus"> (optional)</param>
        /// <param name="notGroupId"> (optional)</param>
        /// <param name="startPosition">Starting value for the list.  (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>ApiResponse of UserInformationList</returns>
        public ApiResponse< UserInformationList > UsersGetUsersWithHttpInfo (string accountId, string additionalInfo = null, string count = null, string email = null, string emailSubstring = null, string groupId = null, string includeUsersettingsForCsv = null, string loginStatus = null, string notGroupId = null, string startPosition = null, string status = null, string userNameSubstring = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UsersGetUsers");

            var localVarPath = "/v2/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (additionalInfo != null) localVarQueryParams.Add("additional_info", Configuration.ApiClient.ParameterToString(additionalInfo)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (emailSubstring != null) localVarQueryParams.Add("email_substring", Configuration.ApiClient.ParameterToString(emailSubstring)); // query parameter
            if (groupId != null) localVarQueryParams.Add("group_id", Configuration.ApiClient.ParameterToString(groupId)); // query parameter
            if (includeUsersettingsForCsv != null) localVarQueryParams.Add("include_usersettings_for_csv", Configuration.ApiClient.ParameterToString(includeUsersettingsForCsv)); // query parameter
            if (loginStatus != null) localVarQueryParams.Add("login_status", Configuration.ApiClient.ParameterToString(loginStatus)); // query parameter
            if (notGroupId != null) localVarQueryParams.Add("not_group_id", Configuration.ApiClient.ParameterToString(notGroupId)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (userNameSubstring != null) localVarQueryParams.Add("user_name_substring", Configuration.ApiClient.ParameterToString(userNameSubstring)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInformationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInformationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInformationList)));
            
        }

        /// <summary>
        /// Retrieves the list of users for the specified account. Retrieves the list of users for the specified account.  The response returns the list of users for the account along with the information about the result set. If the &#x60;additional_info&#x60; query was added to the endpoint and set to **true**, the full user information is returned for each user
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="count">Number of records to return. The number must be greater than 0 and less than or equal to 100.  (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="groupId">Filters user records returned by one or more group Id&#39;s. (optional)</param>
        /// <param name="includeUsersettingsForCsv"> (optional)</param>
        /// <param name="loginStatus"> (optional)</param>
        /// <param name="notGroupId"> (optional)</param>
        /// <param name="startPosition">Starting value for the list.  (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>Task of UserInformationList</returns>
        public async System.Threading.Tasks.Task<UserInformationList> UsersGetUsersAsync (string accountId, string additionalInfo = null, string count = null, string email = null, string emailSubstring = null, string groupId = null, string includeUsersettingsForCsv = null, string loginStatus = null, string notGroupId = null, string startPosition = null, string status = null, string userNameSubstring = null)
        {
             ApiResponse<UserInformationList> localVarResponse = await UsersGetUsersAsyncWithHttpInfo(accountId, additionalInfo, count, email, emailSubstring, groupId, includeUsersettingsForCsv, loginStatus, notGroupId, startPosition, status, userNameSubstring);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of users for the specified account. Retrieves the list of users for the specified account.  The response returns the list of users for the account along with the information about the result set. If the &#x60;additional_info&#x60; query was added to the endpoint and set to **true**, the full user information is returned for each user
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="additionalInfo">When set to **true**, the full list of user information is returned for each user in the account. (optional)</param>
        /// <param name="count">Number of records to return. The number must be greater than 0 and less than or equal to 100.  (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="emailSubstring">Filters the returned user records by the email address or a sub-string of email address. (optional)</param>
        /// <param name="groupId">Filters user records returned by one or more group Id&#39;s. (optional)</param>
        /// <param name="includeUsersettingsForCsv"> (optional)</param>
        /// <param name="loginStatus"> (optional)</param>
        /// <param name="notGroupId"> (optional)</param>
        /// <param name="startPosition">Starting value for the list.  (optional)</param>
        /// <param name="status">Filters the results by user status. You can specify a comma-separated list of the following statuses:  * ActivationRequired  * ActivationSent  * Active * Closed  * Disabled  (optional)</param>
        /// <param name="userNameSubstring">Filters the user records returned by the user name or a sub-string of user name. (optional)</param>
        /// <returns>Task of ApiResponse (UserInformationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInformationList>> UsersGetUsersAsyncWithHttpInfo (string accountId, string additionalInfo = null, string count = null, string email = null, string emailSubstring = null, string groupId = null, string includeUsersettingsForCsv = null, string loginStatus = null, string notGroupId = null, string startPosition = null, string status = null, string userNameSubstring = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UsersGetUsers");

            var localVarPath = "/v2/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (additionalInfo != null) localVarQueryParams.Add("additional_info", Configuration.ApiClient.ParameterToString(additionalInfo)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (email != null) localVarQueryParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (emailSubstring != null) localVarQueryParams.Add("email_substring", Configuration.ApiClient.ParameterToString(emailSubstring)); // query parameter
            if (groupId != null) localVarQueryParams.Add("group_id", Configuration.ApiClient.ParameterToString(groupId)); // query parameter
            if (includeUsersettingsForCsv != null) localVarQueryParams.Add("include_usersettings_for_csv", Configuration.ApiClient.ParameterToString(includeUsersettingsForCsv)); // query parameter
            if (loginStatus != null) localVarQueryParams.Add("login_status", Configuration.ApiClient.ParameterToString(loginStatus)); // query parameter
            if (notGroupId != null) localVarQueryParams.Add("not_group_id", Configuration.ApiClient.ParameterToString(notGroupId)); // query parameter
            if (startPosition != null) localVarQueryParams.Add("start_position", Configuration.ApiClient.ParameterToString(startPosition)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (userNameSubstring != null) localVarQueryParams.Add("user_name_substring", Configuration.ApiClient.ParameterToString(userNameSubstring)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInformationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInformationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInformationList)));
            
        }

        /// <summary>
        /// Adds news user to the specified account. Adds new users to your account. Set the &#x60;userSettings&#x60; property in the request to specify the actions the users can perform on the account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="newUsersDefinition"> (optional)</param>
        /// <returns>NewUsersSummary</returns>
        public NewUsersSummary UsersPostUsers (string accountId, NewUsersDefinition newUsersDefinition = null)
        {
             ApiResponse<NewUsersSummary> localVarResponse = UsersPostUsersWithHttpInfo(accountId, newUsersDefinition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds news user to the specified account. Adds new users to your account. Set the &#x60;userSettings&#x60; property in the request to specify the actions the users can perform on the account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="newUsersDefinition"> (optional)</param>
        /// <returns>ApiResponse of NewUsersSummary</returns>
        public ApiResponse< NewUsersSummary > UsersPostUsersWithHttpInfo (string accountId, NewUsersDefinition newUsersDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UsersPostUsers");

            var localVarPath = "/v2/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (newUsersDefinition != null && newUsersDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newUsersDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newUsersDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPostUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewUsersSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NewUsersSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NewUsersSummary)));
            
        }

        /// <summary>
        /// Adds news user to the specified account. Adds new users to your account. Set the &#x60;userSettings&#x60; property in the request to specify the actions the users can perform on the account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="newUsersDefinition"> (optional)</param>
        /// <returns>Task of NewUsersSummary</returns>
        public async System.Threading.Tasks.Task<NewUsersSummary> UsersPostUsersAsync (string accountId, NewUsersDefinition newUsersDefinition = null)
        {
             ApiResponse<NewUsersSummary> localVarResponse = await UsersPostUsersAsyncWithHttpInfo(accountId, newUsersDefinition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds news user to the specified account. Adds new users to your account. Set the &#x60;userSettings&#x60; property in the request to specify the actions the users can perform on the account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="newUsersDefinition"> (optional)</param>
        /// <returns>Task of ApiResponse (NewUsersSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NewUsersSummary>> UsersPostUsersAsyncWithHttpInfo (string accountId, NewUsersDefinition newUsersDefinition = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UsersPostUsers");

            var localVarPath = "/v2/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (newUsersDefinition != null && newUsersDefinition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newUsersDefinition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newUsersDefinition; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPostUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewUsersSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NewUsersSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NewUsersSummary)));
            
        }

        /// <summary>
        /// Change one or more user in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInformationList"> (optional)</param>
        /// <returns>UserInformationList</returns>
        public UserInformationList UsersPutUsers (string accountId, UserInformationList userInformationList = null)
        {
             ApiResponse<UserInformationList> localVarResponse = UsersPutUsersWithHttpInfo(accountId, userInformationList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change one or more user in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInformationList"> (optional)</param>
        /// <returns>ApiResponse of UserInformationList</returns>
        public ApiResponse< UserInformationList > UsersPutUsersWithHttpInfo (string accountId, UserInformationList userInformationList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UsersPutUsers");

            var localVarPath = "/v2/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userInformationList != null && userInformationList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userInformationList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInformationList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPutUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInformationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInformationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInformationList)));
            
        }

        /// <summary>
        /// Change one or more user in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInformationList"> (optional)</param>
        /// <returns>Task of UserInformationList</returns>
        public async System.Threading.Tasks.Task<UserInformationList> UsersPutUsersAsync (string accountId, UserInformationList userInformationList = null)
        {
             ApiResponse<UserInformationList> localVarResponse = await UsersPutUsersAsyncWithHttpInfo(accountId, userInformationList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change one or more user in the specified account. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="userInformationList"> (optional)</param>
        /// <returns>Task of ApiResponse (UserInformationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInformationList>> UsersPutUsersAsyncWithHttpInfo (string accountId, UserInformationList userInformationList = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling UsersApi->UsersPutUsers");

            var localVarPath = "/v2/accounts/{accountId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (userInformationList != null && userInformationList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userInformationList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInformationList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPutUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInformationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInformationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInformationList)));
            
        }

    }
}
