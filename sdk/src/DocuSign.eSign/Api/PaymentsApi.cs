/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;
using RestSharp;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets billing payment information for a specific payment.
        /// </summary>
        /// <remarks>
        /// Retrieves the information for a specified payment.   Privileges required: account administrator 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="paymentId"></param>
        /// <returns>Payments</returns>
        Payments BillingPaymentsGetPayment (string accountId, string paymentId);

        /// <summary>
        /// Gets billing payment information for a specific payment.
        /// </summary>
        /// <remarks>
        /// Retrieves the information for a specified payment.   Privileges required: account administrator 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of Payments</returns>
        ApiResponse<Payments> BillingPaymentsGetPaymentWithHttpInfo (string accountId, string paymentId);
        /// <summary>
        /// Gets payment information for one or more payments.
        /// </summary>
        /// <remarks>
        /// Retrieves a list containing information about one or more payments. If the from date or to date queries are not used, the response returns payment information for the last 365 days.   Privileges required: account administrator 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Specifies the date/time of the earliest payment in the account to retrieve. (optional)</param>
        /// <param name="toDate">Specifies the date/time of the latest payment in the account to retrieve. (optional)</param>
        /// <returns>BillingPaymentsResponse</returns>
        BillingPaymentsResponse BillingPaymentsGetPaymentList (string accountId, string fromDate = null, string toDate = null);

        /// <summary>
        /// Gets payment information for one or more payments.
        /// </summary>
        /// <remarks>
        /// Retrieves a list containing information about one or more payments. If the from date or to date queries are not used, the response returns payment information for the last 365 days.   Privileges required: account administrator 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Specifies the date/time of the earliest payment in the account to retrieve. (optional)</param>
        /// <param name="toDate">Specifies the date/time of the latest payment in the account to retrieve. (optional)</param>
        /// <returns>ApiResponse of BillingPaymentsResponse</returns>
        ApiResponse<BillingPaymentsResponse> BillingPaymentsGetPaymentListWithHttpInfo (string accountId, string fromDate = null, string toDate = null);
        /// <summary>
        /// Posts a payment to a past due invoice.
        /// </summary>
        /// <remarks>
        /// Posts a payment to a past due invoice.   ###### Note: This can only be used if the &#x60;paymentAllowed&#x60; value for a past due invoice is true. This can be determined calling [ML:GetBillingInvoicesPastDue].  The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the &#x60;nextUri&#x60; and &#x60;previousUri&#x60; properties are not returned.  Privileges required: account administrator
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="billingPaymentRequest"> (optional)</param>
        /// <returns>BillingPaymentResponse</returns>
        BillingPaymentResponse BillingPaymentsPostPayment (string accountId, BillingPaymentRequest billingPaymentRequest = null);

        /// <summary>
        /// Posts a payment to a past due invoice.
        /// </summary>
        /// <remarks>
        /// Posts a payment to a past due invoice.   ###### Note: This can only be used if the &#x60;paymentAllowed&#x60; value for a past due invoice is true. This can be determined calling [ML:GetBillingInvoicesPastDue].  The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the &#x60;nextUri&#x60; and &#x60;previousUri&#x60; properties are not returned.  Privileges required: account administrator
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="billingPaymentRequest"> (optional)</param>
        /// <returns>ApiResponse of BillingPaymentResponse</returns>
        ApiResponse<BillingPaymentResponse> BillingPaymentsPostPaymentWithHttpInfo (string accountId, BillingPaymentRequest billingPaymentRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets billing payment information for a specific payment.
        /// </summary>
        /// <remarks>
        /// Retrieves the information for a specified payment.   Privileges required: account administrator 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="paymentId"></param>
        /// <returns>Task of Payments</returns>
        System.Threading.Tasks.Task<Payments> BillingPaymentsGetPaymentAsync (string accountId, string paymentId);

        /// <summary>
        /// Gets billing payment information for a specific payment.
        /// </summary>
        /// <remarks>
        /// Retrieves the information for a specified payment.   Privileges required: account administrator 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payments>> BillingPaymentsGetPaymentAsyncWithHttpInfo (string accountId, string paymentId);
        /// <summary>
        /// Gets payment information for one or more payments.
        /// </summary>
        /// <remarks>
        /// Retrieves a list containing information about one or more payments. If the from date or to date queries are not used, the response returns payment information for the last 365 days.   Privileges required: account administrator 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Specifies the date/time of the earliest payment in the account to retrieve. (optional)</param>
        /// <param name="toDate">Specifies the date/time of the latest payment in the account to retrieve. (optional)</param>
        /// <returns>Task of BillingPaymentsResponse</returns>
        System.Threading.Tasks.Task<BillingPaymentsResponse> BillingPaymentsGetPaymentListAsync (string accountId, string fromDate = null, string toDate = null);

        /// <summary>
        /// Gets payment information for one or more payments.
        /// </summary>
        /// <remarks>
        /// Retrieves a list containing information about one or more payments. If the from date or to date queries are not used, the response returns payment information for the last 365 days.   Privileges required: account administrator 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Specifies the date/time of the earliest payment in the account to retrieve. (optional)</param>
        /// <param name="toDate">Specifies the date/time of the latest payment in the account to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (BillingPaymentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingPaymentsResponse>> BillingPaymentsGetPaymentListAsyncWithHttpInfo (string accountId, string fromDate = null, string toDate = null);
        /// <summary>
        /// Posts a payment to a past due invoice.
        /// </summary>
        /// <remarks>
        /// Posts a payment to a past due invoice.   ###### Note: This can only be used if the &#x60;paymentAllowed&#x60; value for a past due invoice is true. This can be determined calling [ML:GetBillingInvoicesPastDue].  The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the &#x60;nextUri&#x60; and &#x60;previousUri&#x60; properties are not returned.  Privileges required: account administrator
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="billingPaymentRequest"> (optional)</param>
        /// <returns>Task of BillingPaymentResponse</returns>
        System.Threading.Tasks.Task<BillingPaymentResponse> BillingPaymentsPostPaymentAsync (string accountId, BillingPaymentRequest billingPaymentRequest = null);

        /// <summary>
        /// Posts a payment to a past due invoice.
        /// </summary>
        /// <remarks>
        /// Posts a payment to a past due invoice.   ###### Note: This can only be used if the &#x60;paymentAllowed&#x60; value for a past due invoice is true. This can be determined calling [ML:GetBillingInvoicesPastDue].  The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the &#x60;nextUri&#x60; and &#x60;previousUri&#x60; properties are not returned.  Privileges required: account administrator
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="billingPaymentRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (BillingPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingPaymentResponse>> BillingPaymentsPostPaymentAsyncWithHttpInfo (string accountId, BillingPaymentRequest billingPaymentRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets billing payment information for a specific payment. Retrieves the information for a specified payment.   Privileges required: account administrator 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="paymentId"></param>
        /// <returns>Payments</returns>
        public Payments BillingPaymentsGetPayment (string accountId, string paymentId)
        {
             ApiResponse<Payments> localVarResponse = BillingPaymentsGetPaymentWithHttpInfo(accountId, paymentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets billing payment information for a specific payment. Retrieves the information for a specified payment.   Privileges required: account administrator 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="paymentId"></param>
        /// <returns>ApiResponse of Payments</returns>
        public ApiResponse< Payments > BillingPaymentsGetPaymentWithHttpInfo (string accountId, string paymentId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PaymentsApi->BillingPaymentsGetPayment");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentsApi->BillingPaymentsGetPayment");

            var localVarPath = "/v2/accounts/{accountId}/billing_payments/{paymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (paymentId != null) localVarPathParams.Add("paymentId", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPaymentsGetPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payments)));
            
        }

        /// <summary>
        /// Gets billing payment information for a specific payment. Retrieves the information for a specified payment.   Privileges required: account administrator 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="paymentId"></param>
        /// <returns>Task of Payments</returns>
        public async System.Threading.Tasks.Task<Payments> BillingPaymentsGetPaymentAsync (string accountId, string paymentId)
        {
             ApiResponse<Payments> localVarResponse = await BillingPaymentsGetPaymentAsyncWithHttpInfo(accountId, paymentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets billing payment information for a specific payment. Retrieves the information for a specified payment.   Privileges required: account administrator 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="paymentId"></param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payments>> BillingPaymentsGetPaymentAsyncWithHttpInfo (string accountId, string paymentId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PaymentsApi->BillingPaymentsGetPayment");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentsApi->BillingPaymentsGetPayment");

            var localVarPath = "/v2/accounts/{accountId}/billing_payments/{paymentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (paymentId != null) localVarPathParams.Add("paymentId", Configuration.ApiClient.ParameterToString(paymentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPaymentsGetPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payments) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payments)));
            
        }

        /// <summary>
        /// Gets payment information for one or more payments. Retrieves a list containing information about one or more payments. If the from date or to date queries are not used, the response returns payment information for the last 365 days.   Privileges required: account administrator 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Specifies the date/time of the earliest payment in the account to retrieve. (optional)</param>
        /// <param name="toDate">Specifies the date/time of the latest payment in the account to retrieve. (optional)</param>
        /// <returns>BillingPaymentsResponse</returns>
        public BillingPaymentsResponse BillingPaymentsGetPaymentList (string accountId, string fromDate = null, string toDate = null)
        {
             ApiResponse<BillingPaymentsResponse> localVarResponse = BillingPaymentsGetPaymentListWithHttpInfo(accountId, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets payment information for one or more payments. Retrieves a list containing information about one or more payments. If the from date or to date queries are not used, the response returns payment information for the last 365 days.   Privileges required: account administrator 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Specifies the date/time of the earliest payment in the account to retrieve. (optional)</param>
        /// <param name="toDate">Specifies the date/time of the latest payment in the account to retrieve. (optional)</param>
        /// <returns>ApiResponse of BillingPaymentsResponse</returns>
        public ApiResponse< BillingPaymentsResponse > BillingPaymentsGetPaymentListWithHttpInfo (string accountId, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PaymentsApi->BillingPaymentsGetPaymentList");

            var localVarPath = "/v2/accounts/{accountId}/billing_payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPaymentsGetPaymentList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPaymentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPaymentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPaymentsResponse)));
            
        }

        /// <summary>
        /// Gets payment information for one or more payments. Retrieves a list containing information about one or more payments. If the from date or to date queries are not used, the response returns payment information for the last 365 days.   Privileges required: account administrator 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Specifies the date/time of the earliest payment in the account to retrieve. (optional)</param>
        /// <param name="toDate">Specifies the date/time of the latest payment in the account to retrieve. (optional)</param>
        /// <returns>Task of BillingPaymentsResponse</returns>
        public async System.Threading.Tasks.Task<BillingPaymentsResponse> BillingPaymentsGetPaymentListAsync (string accountId, string fromDate = null, string toDate = null)
        {
             ApiResponse<BillingPaymentsResponse> localVarResponse = await BillingPaymentsGetPaymentListAsyncWithHttpInfo(accountId, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets payment information for one or more payments. Retrieves a list containing information about one or more payments. If the from date or to date queries are not used, the response returns payment information for the last 365 days.   Privileges required: account administrator 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="fromDate">Specifies the date/time of the earliest payment in the account to retrieve. (optional)</param>
        /// <param name="toDate">Specifies the date/time of the latest payment in the account to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (BillingPaymentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingPaymentsResponse>> BillingPaymentsGetPaymentListAsyncWithHttpInfo (string accountId, string fromDate = null, string toDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PaymentsApi->BillingPaymentsGetPaymentList");

            var localVarPath = "/v2/accounts/{accountId}/billing_payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (fromDate != null) localVarQueryParams.Add("from_date", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.Add("to_date", Configuration.ApiClient.ParameterToString(toDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPaymentsGetPaymentList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPaymentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPaymentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPaymentsResponse)));
            
        }

        /// <summary>
        /// Posts a payment to a past due invoice. Posts a payment to a past due invoice.   ###### Note: This can only be used if the &#x60;paymentAllowed&#x60; value for a past due invoice is true. This can be determined calling [ML:GetBillingInvoicesPastDue].  The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the &#x60;nextUri&#x60; and &#x60;previousUri&#x60; properties are not returned.  Privileges required: account administrator
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="billingPaymentRequest"> (optional)</param>
        /// <returns>BillingPaymentResponse</returns>
        public BillingPaymentResponse BillingPaymentsPostPayment (string accountId, BillingPaymentRequest billingPaymentRequest = null)
        {
             ApiResponse<BillingPaymentResponse> localVarResponse = BillingPaymentsPostPaymentWithHttpInfo(accountId, billingPaymentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Posts a payment to a past due invoice. Posts a payment to a past due invoice.   ###### Note: This can only be used if the &#x60;paymentAllowed&#x60; value for a past due invoice is true. This can be determined calling [ML:GetBillingInvoicesPastDue].  The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the &#x60;nextUri&#x60; and &#x60;previousUri&#x60; properties are not returned.  Privileges required: account administrator
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="billingPaymentRequest"> (optional)</param>
        /// <returns>ApiResponse of BillingPaymentResponse</returns>
        public ApiResponse< BillingPaymentResponse > BillingPaymentsPostPaymentWithHttpInfo (string accountId, BillingPaymentRequest billingPaymentRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PaymentsApi->BillingPaymentsPostPayment");

            var localVarPath = "/v2/accounts/{accountId}/billing_payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (billingPaymentRequest != null && billingPaymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(billingPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billingPaymentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPaymentsPostPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPaymentResponse)));
            
        }

        /// <summary>
        /// Posts a payment to a past due invoice. Posts a payment to a past due invoice.   ###### Note: This can only be used if the &#x60;paymentAllowed&#x60; value for a past due invoice is true. This can be determined calling [ML:GetBillingInvoicesPastDue].  The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the &#x60;nextUri&#x60; and &#x60;previousUri&#x60; properties are not returned.  Privileges required: account administrator
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="billingPaymentRequest"> (optional)</param>
        /// <returns>Task of BillingPaymentResponse</returns>
        public async System.Threading.Tasks.Task<BillingPaymentResponse> BillingPaymentsPostPaymentAsync (string accountId, BillingPaymentRequest billingPaymentRequest = null)
        {
             ApiResponse<BillingPaymentResponse> localVarResponse = await BillingPaymentsPostPaymentAsyncWithHttpInfo(accountId, billingPaymentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Posts a payment to a past due invoice. Posts a payment to a past due invoice.   ###### Note: This can only be used if the &#x60;paymentAllowed&#x60; value for a past due invoice is true. This can be determined calling [ML:GetBillingInvoicesPastDue].  The response returns information for a single payment, if a payment ID was used in the endpoint, or a list of payments. If the from date or to date queries or payment ID are not used, the response returns payment information for the last 365 days. If the request was for a single payment ID, the &#x60;nextUri&#x60; and &#x60;previousUri&#x60; properties are not returned.  Privileges required: account administrator
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The external account number (int) or account ID Guid.</param>
        /// <param name="billingPaymentRequest"> (optional)</param>
        /// <returns>Task of ApiResponse (BillingPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingPaymentResponse>> BillingPaymentsPostPaymentAsyncWithHttpInfo (string accountId, BillingPaymentRequest billingPaymentRequest = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PaymentsApi->BillingPaymentsPostPayment");

            var localVarPath = "/v2/accounts/{accountId}/billing_payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (billingPaymentRequest != null && billingPaymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(billingPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billingPaymentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BillingPaymentsPostPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingPaymentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingPaymentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingPaymentResponse)));
            
        }

    }
}
