/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Describes information about the &#x60;total&#x60; of a payment. 
    /// </summary>
    [DataContract]
    public partial class Money :  IEquatable<Money>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Money" /> class.
        /// </summary>
        /// <param name="AmountInBaseUnit">The total payment amount in the currency&#39;s base unit. For example, for USD the base currency is one cent. .</param>
        /// <param name="Currency">The three-letter [ISO 4217][ISO4217] currency code for the payment.  For example:  * AUD Australian dollar * CAD Canadian dollar * EUR Euro * GBP Great Britain pund * USD United States dollar  This is a read-only property.  [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217 .</param>
        /// <param name="DisplayAmount">The payment amount as displayed in the &#x60;currency&#x60;.  For example, if the payment amount is USD 12.59, the &#x60;amountInBaseUnit&#x60; is 1259 (cents), and the displayed amount is &#x60;$12.59 USD&#x60;.  This is a read-only property. .</param>
        public Money(string AmountInBaseUnit = null, string Currency = null, string DisplayAmount = null)
        {
            this.AmountInBaseUnit = AmountInBaseUnit;
            this.Currency = Currency;
            this.DisplayAmount = DisplayAmount;
        }
        
        /// <summary>
        /// The total payment amount in the currency&#39;s base unit. For example, for USD the base currency is one cent. 
        /// </summary>
        /// <value>The total payment amount in the currency&#39;s base unit. For example, for USD the base currency is one cent. </value>
        [DataMember(Name="amountInBaseUnit", EmitDefaultValue=false)]
        public string AmountInBaseUnit { get; set; }
        /// <summary>
        /// The three-letter [ISO 4217][ISO4217] currency code for the payment.  For example:  * AUD Australian dollar * CAD Canadian dollar * EUR Euro * GBP Great Britain pund * USD United States dollar  This is a read-only property.  [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217 
        /// </summary>
        /// <value>The three-letter [ISO 4217][ISO4217] currency code for the payment.  For example:  * AUD Australian dollar * CAD Canadian dollar * EUR Euro * GBP Great Britain pund * USD United States dollar  This is a read-only property.  [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217 </value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }
        /// <summary>
        /// The payment amount as displayed in the &#x60;currency&#x60;.  For example, if the payment amount is USD 12.59, the &#x60;amountInBaseUnit&#x60; is 1259 (cents), and the displayed amount is &#x60;$12.59 USD&#x60;.  This is a read-only property. 
        /// </summary>
        /// <value>The payment amount as displayed in the &#x60;currency&#x60;.  For example, if the payment amount is USD 12.59, the &#x60;amountInBaseUnit&#x60; is 1259 (cents), and the displayed amount is &#x60;$12.59 USD&#x60;.  This is a read-only property. </value>
        [DataMember(Name="displayAmount", EmitDefaultValue=false)]
        public string DisplayAmount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Money {\n");
            sb.Append("  AmountInBaseUnit: ").Append(AmountInBaseUnit).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DisplayAmount: ").Append(DisplayAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Money);
        }

        /// <summary>
        /// Returns true if Money instances are equal
        /// </summary>
        /// <param name="other">Instance of Money to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Money other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AmountInBaseUnit == other.AmountInBaseUnit ||
                    this.AmountInBaseUnit != null &&
                    this.AmountInBaseUnit.Equals(other.AmountInBaseUnit)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.DisplayAmount == other.DisplayAmount ||
                    this.DisplayAmount != null &&
                    this.DisplayAmount.Equals(other.DisplayAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AmountInBaseUnit != null)
                    hash = hash * 59 + this.AmountInBaseUnit.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.DisplayAmount != null)
                    hash = hash * 59 + this.DisplayAmount.GetHashCode();
                return hash;
            }
        }
    }

}
