/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnvelopeNotificationRequest :  IEquatable<EnvelopeNotificationRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeNotificationRequest" /> class.
        /// </summary>
        /// <param name="Expirations">A complex element that specifies the expiration settings for the envelope..</param>
        /// <param name="Reminders">A complex element that specifies reminder settings for the envelope.</param>
        /// <param name="UseAccountDefaults">When set to **true**, the account default notification settings are used for the envelope..</param>
        public EnvelopeNotificationRequest(Expirations Expirations = null, Reminders Reminders = null, string UseAccountDefaults = null)
        {
            this.Expirations = Expirations;
            this.Reminders = Reminders;
            this.UseAccountDefaults = UseAccountDefaults;
        }
        
        /// <summary>
        /// A complex element that specifies the expiration settings for the envelope.
        /// </summary>
        /// <value>A complex element that specifies the expiration settings for the envelope.</value>
        [DataMember(Name="expirations", EmitDefaultValue=false)]
        public Expirations Expirations { get; set; }
        /// <summary>
        /// A complex element that specifies reminder settings for the envelope
        /// </summary>
        /// <value>A complex element that specifies reminder settings for the envelope</value>
        [DataMember(Name="reminders", EmitDefaultValue=false)]
        public Reminders Reminders { get; set; }
        /// <summary>
        /// When set to **true**, the account default notification settings are used for the envelope.
        /// </summary>
        /// <value>When set to **true**, the account default notification settings are used for the envelope.</value>
        [DataMember(Name="useAccountDefaults", EmitDefaultValue=false)]
        public string UseAccountDefaults { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvelopeNotificationRequest {\n");
            sb.Append("  Expirations: ").Append(Expirations).Append("\n");
            sb.Append("  Reminders: ").Append(Reminders).Append("\n");
            sb.Append("  UseAccountDefaults: ").Append(UseAccountDefaults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnvelopeNotificationRequest);
        }

        /// <summary>
        /// Returns true if EnvelopeNotificationRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvelopeNotificationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvelopeNotificationRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Expirations == other.Expirations ||
                    this.Expirations != null &&
                    this.Expirations.Equals(other.Expirations)
                ) && 
                (
                    this.Reminders == other.Reminders ||
                    this.Reminders != null &&
                    this.Reminders.Equals(other.Reminders)
                ) && 
                (
                    this.UseAccountDefaults == other.UseAccountDefaults ||
                    this.UseAccountDefaults != null &&
                    this.UseAccountDefaults.Equals(other.UseAccountDefaults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Expirations != null)
                    hash = hash * 59 + this.Expirations.GetHashCode();
                if (this.Reminders != null)
                    hash = hash * 59 + this.Reminders.GetHashCode();
                if (this.UseAccountDefaults != null)
                    hash = hash * 59 + this.UseAccountDefaults.GetHashCode();
                return hash;
            }
        }
    }

}
