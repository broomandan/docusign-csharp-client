/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RecipientViewRequest :  IEquatable<RecipientViewRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipientViewRequest" /> class.
        /// </summary>
        /// <param name="AssertionId">A unique identifier of the authentication event executed by the client application..</param>
        /// <param name="AuthenticationInstant">A sender generated value that indicates the date/time that the signer was authenticated..</param>
        /// <param name="AuthenticationMethod">Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer.   Choose a value from this list:  * Biometric  * Email * HTTPBasicAuth * Kerberos * KnowledgeBasedAuth * None * PaperDocuments * Password * RSASecureID * SingleSignOn_CASiteminder * SingleSignOn_InfoCard * SingleSignOn_MicrosoftActiveDirectory * SingleSignOn_Other * SingleSignOn_Passport * SingleSignOn_SAML * Smartcard * SSLMutualAuth * X509Certificate  This information is included in the Certificate of Completion..</param>
        /// <param name="ClientUserId">A sender created value. If provided, the recipient is treated as an embedded (captive) recipient or signer.  Use your application&#39;s client ID (user ID) for the recipient. Doing so enables the details of your application&#39;s authentication of the recipient to be connected to the recipient&#39;s signature if the signature is disputed or repudiated.  Maximum length: 100 characters..</param>
        /// <param name="Email">Specifies the email of the recipient. You can use either email and userName or userId to identify the recipient..</param>
        /// <param name="PingFrequency">Only used if pingUrl is specified. This is the interval, in seconds, between pings on the pingUrl.  The default is 300 seconds. Valid values are 60-1200 seconds..</param>
        /// <param name="PingUrl">A client Url to be pinged by the DocuSign Signing experience to indicate to the client that Signing is active. An HTTP Get is executed against the client. The response from the client is ignored. The intent is for the client to reset it&#39;s session timer when the request is received..</param>
        /// <param name="RecipientId">Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document..</param>
        /// <param name="ReturnUrl">The URL that the recipient is redirected to after the signing session has ended. DocuSign redirects to the URL and includes an &#x60;event&#x60; query parameter that can be used by your application.  Possible &#x60;event&#x60; parameter values:   * &#x60;access_code_failed&#x60;&lt;br&gt;   Recipient used incorrect access code. * &#x60;cancel&#x60;&lt;br&gt;   Recipient canceled the signing operation,   possibly by using the Finish Later option. * &#x60;decline&#x60;&lt;br&gt;   Recipient declined to sign. * &#x60;exception&#x60;&lt;br&gt;   A system error occurred during signing. * &#x60;fax_pending&#x60;&lt;br&gt;   Recipient has a fax pending. * &#x60;id_check_failed&#x60;&lt;br&gt;   Recipient failed an ID check. * &#x60;session_timeout&#x60;&lt;br&gt;   The session timed out.   An account can control this timeout using the Signer Session Timeout option. * &#x60;signing_complete&#x60;&lt;br&gt;   Recipient completed the signing ceremony. * &#x60;ttl_expired&#x60;&lt;br&gt;   The Time To Live token for the envelope has expired.   After being successfully invoked, these tokens expire   after 5 minutes   or if the envelope is voided. * &#x60;viewing_complete&#x60;&lt;br&gt;   The recipient completed viewing an envelope   that is in a read-only/terminal state   such as completed, declined, or voided.  Be sure to include &#x60;https://&#x60; in the URL or the redirect may fail on some browsers. .</param>
        /// <param name="SecurityDomain">The domain in which the user authenticated..</param>
        /// <param name="UserId">Specifies the user ID of the recipient. You can use with user ID or email and user name to identify the recipient.   If userId is used and a clientUserId is provided, the value in the &#x60;userId&#x60; property must match a recipientId (which can be retrieved with a GET recipients call) for the envelope.   If a userId is used and a clientUserId is not provided, the userId must match the user ID of the authenticating user..</param>
        /// <param name="UserName">Specifies the username of the recipient. You can use either email and userName or userId to identify the recipient..</param>
        /// <param name="XFrameOptions">.</param>
        /// <param name="XFrameOptionsAllowFromUrl">.</param>
        public RecipientViewRequest(string AssertionId = null, string AuthenticationInstant = null, string AuthenticationMethod = null, string ClientUserId = null, string Email = null, string PingFrequency = null, string PingUrl = null, string RecipientId = null, string ReturnUrl = null, string SecurityDomain = null, string UserId = null, string UserName = null, string XFrameOptions = null, string XFrameOptionsAllowFromUrl = null)
        {
            this.AssertionId = AssertionId;
            this.AuthenticationInstant = AuthenticationInstant;
            this.AuthenticationMethod = AuthenticationMethod;
            this.ClientUserId = ClientUserId;
            this.Email = Email;
            this.PingFrequency = PingFrequency;
            this.PingUrl = PingUrl;
            this.RecipientId = RecipientId;
            this.ReturnUrl = ReturnUrl;
            this.SecurityDomain = SecurityDomain;
            this.UserId = UserId;
            this.UserName = UserName;
            this.XFrameOptions = XFrameOptions;
            this.XFrameOptionsAllowFromUrl = XFrameOptionsAllowFromUrl;
        }
        
        /// <summary>
        /// A unique identifier of the authentication event executed by the client application.
        /// </summary>
        /// <value>A unique identifier of the authentication event executed by the client application.</value>
        [DataMember(Name="assertionId", EmitDefaultValue=false)]
        public string AssertionId { get; set; }
        /// <summary>
        /// A sender generated value that indicates the date/time that the signer was authenticated.
        /// </summary>
        /// <value>A sender generated value that indicates the date/time that the signer was authenticated.</value>
        [DataMember(Name="authenticationInstant", EmitDefaultValue=false)]
        public string AuthenticationInstant { get; set; }
        /// <summary>
        /// Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer.   Choose a value from this list:  * Biometric  * Email * HTTPBasicAuth * Kerberos * KnowledgeBasedAuth * None * PaperDocuments * Password * RSASecureID * SingleSignOn_CASiteminder * SingleSignOn_InfoCard * SingleSignOn_MicrosoftActiveDirectory * SingleSignOn_Other * SingleSignOn_Passport * SingleSignOn_SAML * Smartcard * SSLMutualAuth * X509Certificate  This information is included in the Certificate of Completion.
        /// </summary>
        /// <value>Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer.   Choose a value from this list:  * Biometric  * Email * HTTPBasicAuth * Kerberos * KnowledgeBasedAuth * None * PaperDocuments * Password * RSASecureID * SingleSignOn_CASiteminder * SingleSignOn_InfoCard * SingleSignOn_MicrosoftActiveDirectory * SingleSignOn_Other * SingleSignOn_Passport * SingleSignOn_SAML * Smartcard * SSLMutualAuth * X509Certificate  This information is included in the Certificate of Completion.</value>
        [DataMember(Name="authenticationMethod", EmitDefaultValue=false)]
        public string AuthenticationMethod { get; set; }
        /// <summary>
        /// A sender created value. If provided, the recipient is treated as an embedded (captive) recipient or signer.  Use your application&#39;s client ID (user ID) for the recipient. Doing so enables the details of your application&#39;s authentication of the recipient to be connected to the recipient&#39;s signature if the signature is disputed or repudiated.  Maximum length: 100 characters.
        /// </summary>
        /// <value>A sender created value. If provided, the recipient is treated as an embedded (captive) recipient or signer.  Use your application&#39;s client ID (user ID) for the recipient. Doing so enables the details of your application&#39;s authentication of the recipient to be connected to the recipient&#39;s signature if the signature is disputed or repudiated.  Maximum length: 100 characters.</value>
        [DataMember(Name="clientUserId", EmitDefaultValue=false)]
        public string ClientUserId { get; set; }
        /// <summary>
        /// Specifies the email of the recipient. You can use either email and userName or userId to identify the recipient.
        /// </summary>
        /// <value>Specifies the email of the recipient. You can use either email and userName or userId to identify the recipient.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Only used if pingUrl is specified. This is the interval, in seconds, between pings on the pingUrl.  The default is 300 seconds. Valid values are 60-1200 seconds.
        /// </summary>
        /// <value>Only used if pingUrl is specified. This is the interval, in seconds, between pings on the pingUrl.  The default is 300 seconds. Valid values are 60-1200 seconds.</value>
        [DataMember(Name="pingFrequency", EmitDefaultValue=false)]
        public string PingFrequency { get; set; }
        /// <summary>
        /// A client Url to be pinged by the DocuSign Signing experience to indicate to the client that Signing is active. An HTTP Get is executed against the client. The response from the client is ignored. The intent is for the client to reset it&#39;s session timer when the request is received.
        /// </summary>
        /// <value>A client Url to be pinged by the DocuSign Signing experience to indicate to the client that Signing is active. An HTTP Get is executed against the client. The response from the client is ignored. The intent is for the client to reset it&#39;s session timer when the request is received.</value>
        [DataMember(Name="pingUrl", EmitDefaultValue=false)]
        public string PingUrl { get; set; }
        /// <summary>
        /// Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
        /// </summary>
        /// <value>Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.</value>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; set; }
        /// <summary>
        /// The URL that the recipient is redirected to after the signing session has ended. DocuSign redirects to the URL and includes an &#x60;event&#x60; query parameter that can be used by your application.  Possible &#x60;event&#x60; parameter values:   * &#x60;access_code_failed&#x60;&lt;br&gt;   Recipient used incorrect access code. * &#x60;cancel&#x60;&lt;br&gt;   Recipient canceled the signing operation,   possibly by using the Finish Later option. * &#x60;decline&#x60;&lt;br&gt;   Recipient declined to sign. * &#x60;exception&#x60;&lt;br&gt;   A system error occurred during signing. * &#x60;fax_pending&#x60;&lt;br&gt;   Recipient has a fax pending. * &#x60;id_check_failed&#x60;&lt;br&gt;   Recipient failed an ID check. * &#x60;session_timeout&#x60;&lt;br&gt;   The session timed out.   An account can control this timeout using the Signer Session Timeout option. * &#x60;signing_complete&#x60;&lt;br&gt;   Recipient completed the signing ceremony. * &#x60;ttl_expired&#x60;&lt;br&gt;   The Time To Live token for the envelope has expired.   After being successfully invoked, these tokens expire   after 5 minutes   or if the envelope is voided. * &#x60;viewing_complete&#x60;&lt;br&gt;   The recipient completed viewing an envelope   that is in a read-only/terminal state   such as completed, declined, or voided.  Be sure to include &#x60;https://&#x60; in the URL or the redirect may fail on some browsers. 
        /// </summary>
        /// <value>The URL that the recipient is redirected to after the signing session has ended. DocuSign redirects to the URL and includes an &#x60;event&#x60; query parameter that can be used by your application.  Possible &#x60;event&#x60; parameter values:   * &#x60;access_code_failed&#x60;&lt;br&gt;   Recipient used incorrect access code. * &#x60;cancel&#x60;&lt;br&gt;   Recipient canceled the signing operation,   possibly by using the Finish Later option. * &#x60;decline&#x60;&lt;br&gt;   Recipient declined to sign. * &#x60;exception&#x60;&lt;br&gt;   A system error occurred during signing. * &#x60;fax_pending&#x60;&lt;br&gt;   Recipient has a fax pending. * &#x60;id_check_failed&#x60;&lt;br&gt;   Recipient failed an ID check. * &#x60;session_timeout&#x60;&lt;br&gt;   The session timed out.   An account can control this timeout using the Signer Session Timeout option. * &#x60;signing_complete&#x60;&lt;br&gt;   Recipient completed the signing ceremony. * &#x60;ttl_expired&#x60;&lt;br&gt;   The Time To Live token for the envelope has expired.   After being successfully invoked, these tokens expire   after 5 minutes   or if the envelope is voided. * &#x60;viewing_complete&#x60;&lt;br&gt;   The recipient completed viewing an envelope   that is in a read-only/terminal state   such as completed, declined, or voided.  Be sure to include &#x60;https://&#x60; in the URL or the redirect may fail on some browsers. </value>
        [DataMember(Name="returnUrl", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }
        /// <summary>
        /// The domain in which the user authenticated.
        /// </summary>
        /// <value>The domain in which the user authenticated.</value>
        [DataMember(Name="securityDomain", EmitDefaultValue=false)]
        public string SecurityDomain { get; set; }
        /// <summary>
        /// Specifies the user ID of the recipient. You can use with user ID or email and user name to identify the recipient.   If userId is used and a clientUserId is provided, the value in the &#x60;userId&#x60; property must match a recipientId (which can be retrieved with a GET recipients call) for the envelope.   If a userId is used and a clientUserId is not provided, the userId must match the user ID of the authenticating user.
        /// </summary>
        /// <value>Specifies the user ID of the recipient. You can use with user ID or email and user name to identify the recipient.   If userId is used and a clientUserId is provided, the value in the &#x60;userId&#x60; property must match a recipientId (which can be retrieved with a GET recipients call) for the envelope.   If a userId is used and a clientUserId is not provided, the userId must match the user ID of the authenticating user.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Specifies the username of the recipient. You can use either email and userName or userId to identify the recipient.
        /// </summary>
        /// <value>Specifies the username of the recipient. You can use either email and userName or userId to identify the recipient.</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="xFrameOptions", EmitDefaultValue=false)]
        public string XFrameOptions { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="xFrameOptionsAllowFromUrl", EmitDefaultValue=false)]
        public string XFrameOptionsAllowFromUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecipientViewRequest {\n");
            sb.Append("  AssertionId: ").Append(AssertionId).Append("\n");
            sb.Append("  AuthenticationInstant: ").Append(AuthenticationInstant).Append("\n");
            sb.Append("  AuthenticationMethod: ").Append(AuthenticationMethod).Append("\n");
            sb.Append("  ClientUserId: ").Append(ClientUserId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PingFrequency: ").Append(PingFrequency).Append("\n");
            sb.Append("  PingUrl: ").Append(PingUrl).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  SecurityDomain: ").Append(SecurityDomain).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  XFrameOptions: ").Append(XFrameOptions).Append("\n");
            sb.Append("  XFrameOptionsAllowFromUrl: ").Append(XFrameOptionsAllowFromUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RecipientViewRequest);
        }

        /// <summary>
        /// Returns true if RecipientViewRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of RecipientViewRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipientViewRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AssertionId == other.AssertionId ||
                    this.AssertionId != null &&
                    this.AssertionId.Equals(other.AssertionId)
                ) && 
                (
                    this.AuthenticationInstant == other.AuthenticationInstant ||
                    this.AuthenticationInstant != null &&
                    this.AuthenticationInstant.Equals(other.AuthenticationInstant)
                ) && 
                (
                    this.AuthenticationMethod == other.AuthenticationMethod ||
                    this.AuthenticationMethod != null &&
                    this.AuthenticationMethod.Equals(other.AuthenticationMethod)
                ) && 
                (
                    this.ClientUserId == other.ClientUserId ||
                    this.ClientUserId != null &&
                    this.ClientUserId.Equals(other.ClientUserId)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.PingFrequency == other.PingFrequency ||
                    this.PingFrequency != null &&
                    this.PingFrequency.Equals(other.PingFrequency)
                ) && 
                (
                    this.PingUrl == other.PingUrl ||
                    this.PingUrl != null &&
                    this.PingUrl.Equals(other.PingUrl)
                ) && 
                (
                    this.RecipientId == other.RecipientId ||
                    this.RecipientId != null &&
                    this.RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    this.ReturnUrl == other.ReturnUrl ||
                    this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(other.ReturnUrl)
                ) && 
                (
                    this.SecurityDomain == other.SecurityDomain ||
                    this.SecurityDomain != null &&
                    this.SecurityDomain.Equals(other.SecurityDomain)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                ) && 
                (
                    this.XFrameOptions == other.XFrameOptions ||
                    this.XFrameOptions != null &&
                    this.XFrameOptions.Equals(other.XFrameOptions)
                ) && 
                (
                    this.XFrameOptionsAllowFromUrl == other.XFrameOptionsAllowFromUrl ||
                    this.XFrameOptionsAllowFromUrl != null &&
                    this.XFrameOptionsAllowFromUrl.Equals(other.XFrameOptionsAllowFromUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AssertionId != null)
                    hash = hash * 59 + this.AssertionId.GetHashCode();
                if (this.AuthenticationInstant != null)
                    hash = hash * 59 + this.AuthenticationInstant.GetHashCode();
                if (this.AuthenticationMethod != null)
                    hash = hash * 59 + this.AuthenticationMethod.GetHashCode();
                if (this.ClientUserId != null)
                    hash = hash * 59 + this.ClientUserId.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.PingFrequency != null)
                    hash = hash * 59 + this.PingFrequency.GetHashCode();
                if (this.PingUrl != null)
                    hash = hash * 59 + this.PingUrl.GetHashCode();
                if (this.RecipientId != null)
                    hash = hash * 59 + this.RecipientId.GetHashCode();
                if (this.ReturnUrl != null)
                    hash = hash * 59 + this.ReturnUrl.GetHashCode();
                if (this.SecurityDomain != null)
                    hash = hash * 59 + this.SecurityDomain.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                if (this.XFrameOptions != null)
                    hash = hash * 59 + this.XFrameOptions.GetHashCode();
                if (this.XFrameOptionsAllowFromUrl != null)
                    hash = hash * 59 + this.XFrameOptionsAllowFromUrl.GetHashCode();
                return hash;
            }
        }
    }

}
