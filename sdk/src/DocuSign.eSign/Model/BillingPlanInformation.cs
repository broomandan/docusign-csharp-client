/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BillingPlanInformation :  IEquatable<BillingPlanInformation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingPlanInformation" /> class.
        /// </summary>
        /// <param name="AppStoreReceipt">.</param>
        /// <param name="BillingAddress">.</param>
        /// <param name="CreditCardInformation">A complex type that has information about the credit card used to pay for this account..</param>
        /// <param name="DowngradeReason">.</param>
        /// <param name="EnableSupport">When set to **true**, then customer support is provided as part of the account plan..</param>
        /// <param name="IncludedSeats">The number of seats (users) included..</param>
        /// <param name="IncrementalSeats">Reserved: TBD.</param>
        /// <param name="PaymentProcessorInformation">.</param>
        /// <param name="PlanInformation">An object used to identify the features and attributes of the account being created..</param>
        /// <param name="ReferralInformation">A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry   ###### Note: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.  .</param>
        /// <param name="RenewalStatus">.</param>
        /// <param name="SaleDiscountAmount">Reserved for DocuSign use only..</param>
        /// <param name="SaleDiscountFixedAmount">Reserved for DocuSign use only..</param>
        /// <param name="SaleDiscountPercent">Reserved for DocuSign use only..</param>
        /// <param name="SaleDiscountPeriods">Reserved for DocuSign use only..</param>
        /// <param name="SaleDiscountSeatPriceOverride">Reserved for DocuSign use only..</param>
        public BillingPlanInformation(AppStoreReceipt AppStoreReceipt = null, AccountAddress BillingAddress = null, CreditCardInformation CreditCardInformation = null, string DowngradeReason = null, string EnableSupport = null, string IncludedSeats = null, string IncrementalSeats = null, PaymentProcessorInformation PaymentProcessorInformation = null, PlanInformation PlanInformation = null, ReferralInformation ReferralInformation = null, string RenewalStatus = null, string SaleDiscountAmount = null, string SaleDiscountFixedAmount = null, string SaleDiscountPercent = null, string SaleDiscountPeriods = null, string SaleDiscountSeatPriceOverride = null)
        {
            this.AppStoreReceipt = AppStoreReceipt;
            this.BillingAddress = BillingAddress;
            this.CreditCardInformation = CreditCardInformation;
            this.DowngradeReason = DowngradeReason;
            this.EnableSupport = EnableSupport;
            this.IncludedSeats = IncludedSeats;
            this.IncrementalSeats = IncrementalSeats;
            this.PaymentProcessorInformation = PaymentProcessorInformation;
            this.PlanInformation = PlanInformation;
            this.ReferralInformation = ReferralInformation;
            this.RenewalStatus = RenewalStatus;
            this.SaleDiscountAmount = SaleDiscountAmount;
            this.SaleDiscountFixedAmount = SaleDiscountFixedAmount;
            this.SaleDiscountPercent = SaleDiscountPercent;
            this.SaleDiscountPeriods = SaleDiscountPeriods;
            this.SaleDiscountSeatPriceOverride = SaleDiscountSeatPriceOverride;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="appStoreReceipt", EmitDefaultValue=false)]
        public AppStoreReceipt AppStoreReceipt { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="billingAddress", EmitDefaultValue=false)]
        public AccountAddress BillingAddress { get; set; }
        /// <summary>
        /// A complex type that has information about the credit card used to pay for this account.
        /// </summary>
        /// <value>A complex type that has information about the credit card used to pay for this account.</value>
        [DataMember(Name="creditCardInformation", EmitDefaultValue=false)]
        public CreditCardInformation CreditCardInformation { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="downgradeReason", EmitDefaultValue=false)]
        public string DowngradeReason { get; set; }
        /// <summary>
        /// When set to **true**, then customer support is provided as part of the account plan.
        /// </summary>
        /// <value>When set to **true**, then customer support is provided as part of the account plan.</value>
        [DataMember(Name="enableSupport", EmitDefaultValue=false)]
        public string EnableSupport { get; set; }
        /// <summary>
        /// The number of seats (users) included.
        /// </summary>
        /// <value>The number of seats (users) included.</value>
        [DataMember(Name="includedSeats", EmitDefaultValue=false)]
        public string IncludedSeats { get; set; }
        /// <summary>
        /// Reserved: TBD
        /// </summary>
        /// <value>Reserved: TBD</value>
        [DataMember(Name="incrementalSeats", EmitDefaultValue=false)]
        public string IncrementalSeats { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="paymentProcessorInformation", EmitDefaultValue=false)]
        public PaymentProcessorInformation PaymentProcessorInformation { get; set; }
        /// <summary>
        /// An object used to identify the features and attributes of the account being created.
        /// </summary>
        /// <value>An object used to identify the features and attributes of the account being created.</value>
        [DataMember(Name="planInformation", EmitDefaultValue=false)]
        public PlanInformation PlanInformation { get; set; }
        /// <summary>
        /// A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry   ###### Note: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.  
        /// </summary>
        /// <value>A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry   ###### Note: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.  </value>
        [DataMember(Name="referralInformation", EmitDefaultValue=false)]
        public ReferralInformation ReferralInformation { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="renewalStatus", EmitDefaultValue=false)]
        public string RenewalStatus { get; set; }
        /// <summary>
        /// Reserved for DocuSign use only.
        /// </summary>
        /// <value>Reserved for DocuSign use only.</value>
        [DataMember(Name="saleDiscountAmount", EmitDefaultValue=false)]
        public string SaleDiscountAmount { get; set; }
        /// <summary>
        /// Reserved for DocuSign use only.
        /// </summary>
        /// <value>Reserved for DocuSign use only.</value>
        [DataMember(Name="saleDiscountFixedAmount", EmitDefaultValue=false)]
        public string SaleDiscountFixedAmount { get; set; }
        /// <summary>
        /// Reserved for DocuSign use only.
        /// </summary>
        /// <value>Reserved for DocuSign use only.</value>
        [DataMember(Name="saleDiscountPercent", EmitDefaultValue=false)]
        public string SaleDiscountPercent { get; set; }
        /// <summary>
        /// Reserved for DocuSign use only.
        /// </summary>
        /// <value>Reserved for DocuSign use only.</value>
        [DataMember(Name="saleDiscountPeriods", EmitDefaultValue=false)]
        public string SaleDiscountPeriods { get; set; }
        /// <summary>
        /// Reserved for DocuSign use only.
        /// </summary>
        /// <value>Reserved for DocuSign use only.</value>
        [DataMember(Name="saleDiscountSeatPriceOverride", EmitDefaultValue=false)]
        public string SaleDiscountSeatPriceOverride { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingPlanInformation {\n");
            sb.Append("  AppStoreReceipt: ").Append(AppStoreReceipt).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  CreditCardInformation: ").Append(CreditCardInformation).Append("\n");
            sb.Append("  DowngradeReason: ").Append(DowngradeReason).Append("\n");
            sb.Append("  EnableSupport: ").Append(EnableSupport).Append("\n");
            sb.Append("  IncludedSeats: ").Append(IncludedSeats).Append("\n");
            sb.Append("  IncrementalSeats: ").Append(IncrementalSeats).Append("\n");
            sb.Append("  PaymentProcessorInformation: ").Append(PaymentProcessorInformation).Append("\n");
            sb.Append("  PlanInformation: ").Append(PlanInformation).Append("\n");
            sb.Append("  ReferralInformation: ").Append(ReferralInformation).Append("\n");
            sb.Append("  RenewalStatus: ").Append(RenewalStatus).Append("\n");
            sb.Append("  SaleDiscountAmount: ").Append(SaleDiscountAmount).Append("\n");
            sb.Append("  SaleDiscountFixedAmount: ").Append(SaleDiscountFixedAmount).Append("\n");
            sb.Append("  SaleDiscountPercent: ").Append(SaleDiscountPercent).Append("\n");
            sb.Append("  SaleDiscountPeriods: ").Append(SaleDiscountPeriods).Append("\n");
            sb.Append("  SaleDiscountSeatPriceOverride: ").Append(SaleDiscountSeatPriceOverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingPlanInformation);
        }

        /// <summary>
        /// Returns true if BillingPlanInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingPlanInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingPlanInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AppStoreReceipt == other.AppStoreReceipt ||
                    this.AppStoreReceipt != null &&
                    this.AppStoreReceipt.Equals(other.AppStoreReceipt)
                ) && 
                (
                    this.BillingAddress == other.BillingAddress ||
                    this.BillingAddress != null &&
                    this.BillingAddress.Equals(other.BillingAddress)
                ) && 
                (
                    this.CreditCardInformation == other.CreditCardInformation ||
                    this.CreditCardInformation != null &&
                    this.CreditCardInformation.Equals(other.CreditCardInformation)
                ) && 
                (
                    this.DowngradeReason == other.DowngradeReason ||
                    this.DowngradeReason != null &&
                    this.DowngradeReason.Equals(other.DowngradeReason)
                ) && 
                (
                    this.EnableSupport == other.EnableSupport ||
                    this.EnableSupport != null &&
                    this.EnableSupport.Equals(other.EnableSupport)
                ) && 
                (
                    this.IncludedSeats == other.IncludedSeats ||
                    this.IncludedSeats != null &&
                    this.IncludedSeats.Equals(other.IncludedSeats)
                ) && 
                (
                    this.IncrementalSeats == other.IncrementalSeats ||
                    this.IncrementalSeats != null &&
                    this.IncrementalSeats.Equals(other.IncrementalSeats)
                ) && 
                (
                    this.PaymentProcessorInformation == other.PaymentProcessorInformation ||
                    this.PaymentProcessorInformation != null &&
                    this.PaymentProcessorInformation.Equals(other.PaymentProcessorInformation)
                ) && 
                (
                    this.PlanInformation == other.PlanInformation ||
                    this.PlanInformation != null &&
                    this.PlanInformation.Equals(other.PlanInformation)
                ) && 
                (
                    this.ReferralInformation == other.ReferralInformation ||
                    this.ReferralInformation != null &&
                    this.ReferralInformation.Equals(other.ReferralInformation)
                ) && 
                (
                    this.RenewalStatus == other.RenewalStatus ||
                    this.RenewalStatus != null &&
                    this.RenewalStatus.Equals(other.RenewalStatus)
                ) && 
                (
                    this.SaleDiscountAmount == other.SaleDiscountAmount ||
                    this.SaleDiscountAmount != null &&
                    this.SaleDiscountAmount.Equals(other.SaleDiscountAmount)
                ) && 
                (
                    this.SaleDiscountFixedAmount == other.SaleDiscountFixedAmount ||
                    this.SaleDiscountFixedAmount != null &&
                    this.SaleDiscountFixedAmount.Equals(other.SaleDiscountFixedAmount)
                ) && 
                (
                    this.SaleDiscountPercent == other.SaleDiscountPercent ||
                    this.SaleDiscountPercent != null &&
                    this.SaleDiscountPercent.Equals(other.SaleDiscountPercent)
                ) && 
                (
                    this.SaleDiscountPeriods == other.SaleDiscountPeriods ||
                    this.SaleDiscountPeriods != null &&
                    this.SaleDiscountPeriods.Equals(other.SaleDiscountPeriods)
                ) && 
                (
                    this.SaleDiscountSeatPriceOverride == other.SaleDiscountSeatPriceOverride ||
                    this.SaleDiscountSeatPriceOverride != null &&
                    this.SaleDiscountSeatPriceOverride.Equals(other.SaleDiscountSeatPriceOverride)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AppStoreReceipt != null)
                    hash = hash * 59 + this.AppStoreReceipt.GetHashCode();
                if (this.BillingAddress != null)
                    hash = hash * 59 + this.BillingAddress.GetHashCode();
                if (this.CreditCardInformation != null)
                    hash = hash * 59 + this.CreditCardInformation.GetHashCode();
                if (this.DowngradeReason != null)
                    hash = hash * 59 + this.DowngradeReason.GetHashCode();
                if (this.EnableSupport != null)
                    hash = hash * 59 + this.EnableSupport.GetHashCode();
                if (this.IncludedSeats != null)
                    hash = hash * 59 + this.IncludedSeats.GetHashCode();
                if (this.IncrementalSeats != null)
                    hash = hash * 59 + this.IncrementalSeats.GetHashCode();
                if (this.PaymentProcessorInformation != null)
                    hash = hash * 59 + this.PaymentProcessorInformation.GetHashCode();
                if (this.PlanInformation != null)
                    hash = hash * 59 + this.PlanInformation.GetHashCode();
                if (this.ReferralInformation != null)
                    hash = hash * 59 + this.ReferralInformation.GetHashCode();
                if (this.RenewalStatus != null)
                    hash = hash * 59 + this.RenewalStatus.GetHashCode();
                if (this.SaleDiscountAmount != null)
                    hash = hash * 59 + this.SaleDiscountAmount.GetHashCode();
                if (this.SaleDiscountFixedAmount != null)
                    hash = hash * 59 + this.SaleDiscountFixedAmount.GetHashCode();
                if (this.SaleDiscountPercent != null)
                    hash = hash * 59 + this.SaleDiscountPercent.GetHashCode();
                if (this.SaleDiscountPeriods != null)
                    hash = hash * 59 + this.SaleDiscountPeriods.GetHashCode();
                if (this.SaleDiscountSeatPriceOverride != null)
                    hash = hash * 59 + this.SaleDiscountSeatPriceOverride.GetHashCode();
                return hash;
            }
        }
    }

}
