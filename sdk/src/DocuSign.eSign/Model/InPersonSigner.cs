/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// An in-person recipient is a DocuSign user, acting as a Signing Host, who is in the same physical location as the signer. To learn about fields used for eNotary feature, see the [EnvelopeRecipients resource][enveloperecipientsInPerson].  [enveloperecipientsInPerson]: /esign/restapi/Envelopes/EnvelopeRecipients/#in-person-signers-recipient 
    /// </summary>
    [DataContract]
    public partial class InPersonSigner :  IEquatable<InPersonSigner>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InPersonSigner" /> class.
        /// </summary>
        /// <param name="AccessCode">If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required..</param>
        /// <param name="AddAccessCodeToEmail">This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient..</param>
        /// <param name="AutoNavigation">Specifies whether auto navigation is set for the recipient. .</param>
        /// <param name="CanSignOffline">When set to **true**, specifies that the signer can perform the signing ceremony offline..</param>
        /// <param name="ClientUserId">Specifies whether the recipient is embedded or remote.   If the &#x60;clientUserId&#x60; property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.  Note: if the &#x60;clientUserId&#x60; property is set and either &#x60;SignerMustHaveAccount&#x60; or &#x60;SignerMustLoginToSign&#x60; property of the account settings is set to  **true**, an error is generated on sending.   Maximum length: 100 characters. .</param>
        /// <param name="CreationReason">.</param>
        /// <param name="CustomFields">An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters..</param>
        /// <param name="DeclinedDateTime">The date and time the recipient declined the document..</param>
        /// <param name="DeclinedReason">The reason the recipient declined the document..</param>
        /// <param name="DefaultRecipient">When set to **true**, this is the default recipient for the envelope. This option is used when creating an envelope from a template. .</param>
        /// <param name="DeliveredDateTime">Reserved: For DocuSign use only..</param>
        /// <param name="DeliveryMethod">Reserved: For DocuSign use only..</param>
        /// <param name="DocumentVisibility">.</param>
        /// <param name="Email">The signer&#39;s email address in an eNotary flow.  Use only when &#x60;inPersonSigningType&#x60; is &#x60;notary&#x60;. For regular in-person-signer flow, use &#x60;signerEmail&#x60; instead. .</param>
        /// <param name="EmailNotification">An optional complex type that sets a specific email subject and body for this recipient&#39;s notification email.   **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope &#x60;Subject&#x60; and &#x60;EmailBlurb&#x60; property settings. .</param>
        /// <param name="EmbeddedRecipientStartURL">Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender&#39;s system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to &#x60;SIGN_AT_DOCUSIGN&#x60;, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.  It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient&#39;s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets &#x60;EmbeddedRecipientStartURL&#x3D;SIGN_AT_DOCUSIGN&#x60;, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the &#x60;clientUserId&#x60; property is NOT set, and the &#x60;embeddedRecipientStartURL&#x60; is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The &#x60;customFields&#x60; property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   &#x60;http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&amp;[[mergeField3]]&#x60; .</param>
        /// <param name="ErrorDetails">.</param>
        /// <param name="FaxNumber">Reserved:.</param>
        /// <param name="HostEmail">The email address of the signing host. This is the DocuSign user that is hosting the in-person signing session.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;email&#x60; instead.  Maximum Length: 100 characters. .</param>
        /// <param name="HostName">The name of the signing host. This is the DocuSign user that is hosting the in-person signing session.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;name&#x60; instead.  Maximum Length: 100 characters. .</param>
        /// <param name="IdCheckConfigurationName">Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.  *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as &#39;ID Check $&#39; and &#39;SMS Auth $&#39;. To use ID check in an envelope, the idCheckConfigurationName should be &#39;ID Check &#39;. If you wanted to use SMS, it would be &#39;SMS Auth $&#39; and you would need to add you would need to add phone number information to the &#x60;smsAuthentication&#x60; node..</param>
        /// <param name="IdCheckInformationInput">A complex element that contains input information related to a recipient ID check. It can include the following information.  addressInformationInput: Used to set recipient address information and consists of:  * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 &#x3D; 150 characters, city &#x3D; 50 characters, state &#x3D; 2 characters, and zip/zipPlus4 &#x3D; 20 characters. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.  dobInformationInput: Used to set recipient date of birth information and consists of:  * dateOfBirth: Specifies the recipient&#39;s date, month and year of birth. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.  ssn4InformationInput: Used to set the last four digits of the recipient&#39;s SSN information and consists of:  * ssn4: Specifies the last four digits of the recipient&#39;s SSN. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.  ssn9InformationInput: Used to set the recipient&#39;s SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of:  * ssn9: Specifies the recipient&#39;s SSN. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.  .</param>
        /// <param name="InheritEmailNotificationConfiguration">When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient&#39;s account. .</param>
        /// <param name="InPersonSigningType">Specifies whether the envelope uses the eNotary feature. Valid values:  * &#x60;inPersonSigner&#x60; The envelope uses the normal in-person signing flow. * &#x60;notary&#x60;: The envelope uses the eNotary in-person signing flow. .</param>
        /// <param name="Name">The signer&#39;s full legal name in an eNotary flow.  Required when &#x60;inPersonSigningType&#x60; is &#x60;notary&#x60;. For regular in-person-signer flow, use &#x60;signerName&#x60; instead.  Maximum Length: 100 characters. .</param>
        /// <param name="NotaryHost">Information about the notary host. The following information is required when using the eNotary in-person signing flow:  * &#x60;name&#x60;: Specifies the name of the notary. * &#x60;email&#x60;: Specifies the email address of the notary. * &#x60;recipientId&#x60;: A unique ID number for the notary signing host.  .</param>
        /// <param name="Note">A note sent to the in-person signer in the signing email. This note is visible only to this recipient.  Maximum Length: 1000 characters. .</param>
        /// <param name="PhoneAuthentication">A complex type that Contains the elements:  * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose. * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use. * recordVoicePrint - Reserved. * validateRecipProvidedNumber - Reserved. .</param>
        /// <param name="RecipientAttachments">Reserved:.</param>
        /// <param name="RecipientAuthenticationStatus">.</param>
        /// <param name="RecipientId">Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document..</param>
        /// <param name="RecipientIdGuid">.</param>
        /// <param name="RecipientSignatureProviders">The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information](../../../../guide/appendix/standards_based_signatures.html).</param>
        /// <param name="RecipientSuppliesTabs">.</param>
        /// <param name="RequireIdLookup">When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. .</param>
        /// <param name="RequireSignerCertificate">By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.  This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the &#x60;recipientSignatureProviders&#x60; parameter for other types of digital certificates.   Set this parameter to &#x60;safe&#x60; to use a SAFE-BioPharma certificate.  The signer must be enrolled in the SAFE program to sign with a SAFE certificate..</param>
        /// <param name="RequireSignOnPaper">When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign..</param>
        /// <param name="RoleName">Optional element. Specifies the role name associated with the recipient.&lt;br/&gt;&lt;br/&gt;This is required when working with template recipients..</param>
        /// <param name="RoutingOrder">Specifies the routing order of the recipient in the envelope. .</param>
        /// <param name="SamlAuthentication">.</param>
        /// <param name="SentDateTime">The date and time the envelope was sent..</param>
        /// <param name="SignatureInfo">Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.  Used only with recipient types In Person Signers and Signers.   .</param>
        /// <param name="SignedDateTime">Reserved: For DocuSign use only. .</param>
        /// <param name="SignerEmail">The in-person signer&#39;s email address.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;email&#x60; instead.  Maximum Length: 100 characters.  .</param>
        /// <param name="SignerName">The in-person signer&#39;s full legal name.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;name&#x60; instead.  Maximum Length: 100 characters. .</param>
        /// <param name="SignInEachLocation">When set to **true**, specifies that the signer must sign in all locations..</param>
        /// <param name="SigningGroupId">When set to **true** and the feature is enabled in the sender&#39;s account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once)..</param>
        /// <param name="SigningGroupName">The display name for the signing group.   Maximum Length: 100 characters. .</param>
        /// <param name="SigningGroupUsers">A complex type that contains information about users in the signing group..</param>
        /// <param name="SmsAuthentication">Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication.  .</param>
        /// <param name="SocialAuthentications"> Lists the social ID type that can be used for recipient authentication..</param>
        /// <param name="Status">Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later..</param>
        /// <param name="Tabs">.</param>
        /// <param name="TemplateLocked">When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. .</param>
        /// <param name="TemplateRequired">When set to **true**, the sender may not remove the recipient. Used only when working with template recipients..</param>
        /// <param name="TotalTabCount">.</param>
        /// <param name="UserId">The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing..</param>
        public InPersonSigner(string AccessCode = null, string AddAccessCodeToEmail = null, string AutoNavigation = null, string CanSignOffline = null, string ClientUserId = null, string CreationReason = null, List<string> CustomFields = null, string DeclinedDateTime = null, string DeclinedReason = null, string DefaultRecipient = null, string DeliveredDateTime = null, string DeliveryMethod = null, List<DocumentVisibility> DocumentVisibility = null, string Email = null, RecipientEmailNotification EmailNotification = null, string EmbeddedRecipientStartURL = null, ErrorDetails ErrorDetails = null, string FaxNumber = null, string HostEmail = null, string HostName = null, string IdCheckConfigurationName = null, IdCheckInformationInput IdCheckInformationInput = null, string InheritEmailNotificationConfiguration = null, string InPersonSigningType = null, string Name = null, NotaryHost NotaryHost = null, string Note = null, RecipientPhoneAuthentication PhoneAuthentication = null, List<RecipientAttachment> RecipientAttachments = null, AuthenticationStatus RecipientAuthenticationStatus = null, string RecipientId = null, string RecipientIdGuid = null, List<RecipientSignatureProvider> RecipientSignatureProviders = null, string RecipientSuppliesTabs = null, string RequireIdLookup = null, string RequireSignerCertificate = null, string RequireSignOnPaper = null, string RoleName = null, string RoutingOrder = null, RecipientSAMLAuthentication SamlAuthentication = null, string SentDateTime = null, RecipientSignatureInformation SignatureInfo = null, string SignedDateTime = null, string SignerEmail = null, string SignerName = null, string SignInEachLocation = null, string SigningGroupId = null, string SigningGroupName = null, List<UserInfo> SigningGroupUsers = null, RecipientSMSAuthentication SmsAuthentication = null, List<SocialAuthentication> SocialAuthentications = null, string Status = null, EnvelopeRecipientTabs Tabs = null, string TemplateLocked = null, string TemplateRequired = null, string TotalTabCount = null, string UserId = null)
        {
            this.AccessCode = AccessCode;
            this.AddAccessCodeToEmail = AddAccessCodeToEmail;
            this.AutoNavigation = AutoNavigation;
            this.CanSignOffline = CanSignOffline;
            this.ClientUserId = ClientUserId;
            this.CreationReason = CreationReason;
            this.CustomFields = CustomFields;
            this.DeclinedDateTime = DeclinedDateTime;
            this.DeclinedReason = DeclinedReason;
            this.DefaultRecipient = DefaultRecipient;
            this.DeliveredDateTime = DeliveredDateTime;
            this.DeliveryMethod = DeliveryMethod;
            this.DocumentVisibility = DocumentVisibility;
            this.Email = Email;
            this.EmailNotification = EmailNotification;
            this.EmbeddedRecipientStartURL = EmbeddedRecipientStartURL;
            this.ErrorDetails = ErrorDetails;
            this.FaxNumber = FaxNumber;
            this.HostEmail = HostEmail;
            this.HostName = HostName;
            this.IdCheckConfigurationName = IdCheckConfigurationName;
            this.IdCheckInformationInput = IdCheckInformationInput;
            this.InheritEmailNotificationConfiguration = InheritEmailNotificationConfiguration;
            this.InPersonSigningType = InPersonSigningType;
            this.Name = Name;
            this.NotaryHost = NotaryHost;
            this.Note = Note;
            this.PhoneAuthentication = PhoneAuthentication;
            this.RecipientAttachments = RecipientAttachments;
            this.RecipientAuthenticationStatus = RecipientAuthenticationStatus;
            this.RecipientId = RecipientId;
            this.RecipientIdGuid = RecipientIdGuid;
            this.RecipientSignatureProviders = RecipientSignatureProviders;
            this.RecipientSuppliesTabs = RecipientSuppliesTabs;
            this.RequireIdLookup = RequireIdLookup;
            this.RequireSignerCertificate = RequireSignerCertificate;
            this.RequireSignOnPaper = RequireSignOnPaper;
            this.RoleName = RoleName;
            this.RoutingOrder = RoutingOrder;
            this.SamlAuthentication = SamlAuthentication;
            this.SentDateTime = SentDateTime;
            this.SignatureInfo = SignatureInfo;
            this.SignedDateTime = SignedDateTime;
            this.SignerEmail = SignerEmail;
            this.SignerName = SignerName;
            this.SignInEachLocation = SignInEachLocation;
            this.SigningGroupId = SigningGroupId;
            this.SigningGroupName = SigningGroupName;
            this.SigningGroupUsers = SigningGroupUsers;
            this.SmsAuthentication = SmsAuthentication;
            this.SocialAuthentications = SocialAuthentications;
            this.Status = Status;
            this.Tabs = Tabs;
            this.TemplateLocked = TemplateLocked;
            this.TemplateRequired = TemplateRequired;
            this.TotalTabCount = TotalTabCount;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required.
        /// </summary>
        /// <value>If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account&#39;s access code format setting.  If blank, but the signer &#x60;accessCode&#x60; property is set in the envelope, then that value is used.  If blank and the signer &#x60;accessCode&#x60; property is not set, then the access code is not required.</value>
        [DataMember(Name="accessCode", EmitDefaultValue=false)]
        public string AccessCode { get; set; }
        /// <summary>
        /// This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.
        /// </summary>
        /// <value>This Optional attribute indicates that the access code will be added to the email sent to the recipient; this nullifies the Security measure of Access Code on the recipient.</value>
        [DataMember(Name="addAccessCodeToEmail", EmitDefaultValue=false)]
        public string AddAccessCodeToEmail { get; set; }
        /// <summary>
        /// Specifies whether auto navigation is set for the recipient. 
        /// </summary>
        /// <value>Specifies whether auto navigation is set for the recipient. </value>
        [DataMember(Name="autoNavigation", EmitDefaultValue=false)]
        public string AutoNavigation { get; set; }
        /// <summary>
        /// When set to **true**, specifies that the signer can perform the signing ceremony offline.
        /// </summary>
        /// <value>When set to **true**, specifies that the signer can perform the signing ceremony offline.</value>
        [DataMember(Name="canSignOffline", EmitDefaultValue=false)]
        public string CanSignOffline { get; set; }
        /// <summary>
        /// Specifies whether the recipient is embedded or remote.   If the &#x60;clientUserId&#x60; property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.  Note: if the &#x60;clientUserId&#x60; property is set and either &#x60;SignerMustHaveAccount&#x60; or &#x60;SignerMustLoginToSign&#x60; property of the account settings is set to  **true**, an error is generated on sending.   Maximum length: 100 characters. 
        /// </summary>
        /// <value>Specifies whether the recipient is embedded or remote.   If the &#x60;clientUserId&#x60; property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.  Note: if the &#x60;clientUserId&#x60; property is set and either &#x60;SignerMustHaveAccount&#x60; or &#x60;SignerMustLoginToSign&#x60; property of the account settings is set to  **true**, an error is generated on sending.   Maximum length: 100 characters. </value>
        [DataMember(Name="clientUserId", EmitDefaultValue=false)]
        public string ClientUserId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="creationReason", EmitDefaultValue=false)]
        public string CreationReason { get; set; }
        /// <summary>
        /// An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.
        /// </summary>
        /// <value>An optional array of strings that allows the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each customField string can be a maximum of 100 characters.</value>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public List<string> CustomFields { get; set; }
        /// <summary>
        /// The date and time the recipient declined the document.
        /// </summary>
        /// <value>The date and time the recipient declined the document.</value>
        [DataMember(Name="declinedDateTime", EmitDefaultValue=false)]
        public string DeclinedDateTime { get; set; }
        /// <summary>
        /// The reason the recipient declined the document.
        /// </summary>
        /// <value>The reason the recipient declined the document.</value>
        [DataMember(Name="declinedReason", EmitDefaultValue=false)]
        public string DeclinedReason { get; set; }
        /// <summary>
        /// When set to **true**, this is the default recipient for the envelope. This option is used when creating an envelope from a template. 
        /// </summary>
        /// <value>When set to **true**, this is the default recipient for the envelope. This option is used when creating an envelope from a template. </value>
        [DataMember(Name="defaultRecipient", EmitDefaultValue=false)]
        public string DefaultRecipient { get; set; }
        /// <summary>
        /// Reserved: For DocuSign use only.
        /// </summary>
        /// <value>Reserved: For DocuSign use only.</value>
        [DataMember(Name="deliveredDateTime", EmitDefaultValue=false)]
        public string DeliveredDateTime { get; set; }
        /// <summary>
        /// Reserved: For DocuSign use only.
        /// </summary>
        /// <value>Reserved: For DocuSign use only.</value>
        [DataMember(Name="deliveryMethod", EmitDefaultValue=false)]
        public string DeliveryMethod { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="documentVisibility", EmitDefaultValue=false)]
        public List<DocumentVisibility> DocumentVisibility { get; set; }
        /// <summary>
        /// The signer&#39;s email address in an eNotary flow.  Use only when &#x60;inPersonSigningType&#x60; is &#x60;notary&#x60;. For regular in-person-signer flow, use &#x60;signerEmail&#x60; instead. 
        /// </summary>
        /// <value>The signer&#39;s email address in an eNotary flow.  Use only when &#x60;inPersonSigningType&#x60; is &#x60;notary&#x60;. For regular in-person-signer flow, use &#x60;signerEmail&#x60; instead. </value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// An optional complex type that sets a specific email subject and body for this recipient&#39;s notification email.   **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope &#x60;Subject&#x60; and &#x60;EmailBlurb&#x60; property settings. 
        /// </summary>
        /// <value>An optional complex type that sets a specific email subject and body for this recipient&#39;s notification email.   **Note**: If you use this field to set a specific email notification for one recipient, you must also set the email notification for the other recipients. Using this field for one or more recipients negates the Envelope &#x60;Subject&#x60; and &#x60;EmailBlurb&#x60; property settings. </value>
        [DataMember(Name="emailNotification", EmitDefaultValue=false)]
        public RecipientEmailNotification EmailNotification { get; set; }
        /// <summary>
        /// Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender&#39;s system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to &#x60;SIGN_AT_DOCUSIGN&#x60;, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.  It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient&#39;s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets &#x60;EmbeddedRecipientStartURL&#x3D;SIGN_AT_DOCUSIGN&#x60;, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the &#x60;clientUserId&#x60; property is NOT set, and the &#x60;embeddedRecipientStartURL&#x60; is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The &#x60;customFields&#x60; property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   &#x60;http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&amp;[[mergeField3]]&#x60; 
        /// </summary>
        /// <value>Specifies a sender provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender&#39;s system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to &#x60;SIGN_AT_DOCUSIGN&#x60;, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation that is launched by any partner.  It is important to remember that in a typical embedded workflow the authentication of an embedded recipient is the responsibility of the sending application, DocuSign expects that senders will follow their own process for establishing the recipient&#39;s identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process in initiated. However, when the sending application sets &#x60;EmbeddedRecipientStartURL&#x3D;SIGN_AT_DOCUSIGN&#x60;, the recipient goes directly to the embedded signing or viewing process bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the &#x60;clientUserId&#x60; property is NOT set, and the &#x60;embeddedRecipientStartURL&#x60; is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: envelopeId, recipientId, recipientName, recipientEmail, and customFields. The &#x60;customFields&#x60; property must be set fort the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   &#x60;http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&amp;[[mergeField3]]&#x60; </value>
        [DataMember(Name="embeddedRecipientStartURL", EmitDefaultValue=false)]
        public string EmbeddedRecipientStartURL { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// Reserved:
        /// </summary>
        /// <value>Reserved:</value>
        [DataMember(Name="faxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }
        /// <summary>
        /// The email address of the signing host. This is the DocuSign user that is hosting the in-person signing session.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;email&#x60; instead.  Maximum Length: 100 characters. 
        /// </summary>
        /// <value>The email address of the signing host. This is the DocuSign user that is hosting the in-person signing session.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;email&#x60; instead.  Maximum Length: 100 characters. </value>
        [DataMember(Name="hostEmail", EmitDefaultValue=false)]
        public string HostEmail { get; set; }
        /// <summary>
        /// The name of the signing host. This is the DocuSign user that is hosting the in-person signing session.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;name&#x60; instead.  Maximum Length: 100 characters. 
        /// </summary>
        /// <value>The name of the signing host. This is the DocuSign user that is hosting the in-person signing session.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;name&#x60; instead.  Maximum Length: 100 characters. </value>
        [DataMember(Name="hostName", EmitDefaultValue=false)]
        public string HostName { get; set; }
        /// <summary>
        /// Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.  *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as &#39;ID Check $&#39; and &#39;SMS Auth $&#39;. To use ID check in an envelope, the idCheckConfigurationName should be &#39;ID Check &#39;. If you wanted to use SMS, it would be &#39;SMS Auth $&#39; and you would need to add you would need to add phone number information to the &#x60;smsAuthentication&#x60; node.
        /// </summary>
        /// <value>Specifies authentication check by name. The names used here must be the same as the authentication type names used by the account (these name can also be found in the web console sending interface in the Identify list for a recipient,) This overrides any default authentication setting.  *Example*: Your account has ID Check and SMS Authentication available and in the web console Identify list these appear as &#39;ID Check $&#39; and &#39;SMS Auth $&#39;. To use ID check in an envelope, the idCheckConfigurationName should be &#39;ID Check &#39;. If you wanted to use SMS, it would be &#39;SMS Auth $&#39; and you would need to add you would need to add phone number information to the &#x60;smsAuthentication&#x60; node.</value>
        [DataMember(Name="idCheckConfigurationName", EmitDefaultValue=false)]
        public string IdCheckConfigurationName { get; set; }
        /// <summary>
        /// A complex element that contains input information related to a recipient ID check. It can include the following information.  addressInformationInput: Used to set recipient address information and consists of:  * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 &#x3D; 150 characters, city &#x3D; 50 characters, state &#x3D; 2 characters, and zip/zipPlus4 &#x3D; 20 characters. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.  dobInformationInput: Used to set recipient date of birth information and consists of:  * dateOfBirth: Specifies the recipient&#39;s date, month and year of birth. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.  ssn4InformationInput: Used to set the last four digits of the recipient&#39;s SSN information and consists of:  * ssn4: Specifies the last four digits of the recipient&#39;s SSN. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.  ssn9InformationInput: Used to set the recipient&#39;s SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of:  * ssn9: Specifies the recipient&#39;s SSN. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.  
        /// </summary>
        /// <value>A complex element that contains input information related to a recipient ID check. It can include the following information.  addressInformationInput: Used to set recipient address information and consists of:  * addressInformation: consists of six elements, with stree2 and zipPlus4 being optional. The elements are: street1, street2, city, state, zip, zipPlus4. The maximum length of each element is: street1/street2 &#x3D; 150 characters, city &#x3D; 50 characters, state &#x3D; 2 characters, and zip/zipPlus4 &#x3D; 20 characters. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.  dobInformationInput: Used to set recipient date of birth information and consists of:  * dateOfBirth: Specifies the recipient&#39;s date, month and year of birth. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.  ssn4InformationInput: Used to set the last four digits of the recipient&#39;s SSN information and consists of:  * ssn4: Specifies the last four digits of the recipient&#39;s SSN. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay. * receiveInResponse: A Boolean element that specifies if the information needs to be returned in the response.  ssn9InformationInput: Used to set the recipient&#39;s SSN information. Note that the ssn9 information can never be returned in the response. The ssn9 input consists of:  * ssn9: Specifies the recipient&#39;s SSN. * displayLevelCode: Specifies the display level for the recipient. Values are: ReadOnly, Editable, or DoNotDisplay.  </value>
        [DataMember(Name="idCheckInformationInput", EmitDefaultValue=false)]
        public IdCheckInformationInput IdCheckInformationInput { get; set; }
        /// <summary>
        /// When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient&#39;s account. 
        /// </summary>
        /// <value>When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient&#39;s account. </value>
        [DataMember(Name="inheritEmailNotificationConfiguration", EmitDefaultValue=false)]
        public string InheritEmailNotificationConfiguration { get; set; }
        /// <summary>
        /// Specifies whether the envelope uses the eNotary feature. Valid values:  * &#x60;inPersonSigner&#x60; The envelope uses the normal in-person signing flow. * &#x60;notary&#x60;: The envelope uses the eNotary in-person signing flow. 
        /// </summary>
        /// <value>Specifies whether the envelope uses the eNotary feature. Valid values:  * &#x60;inPersonSigner&#x60; The envelope uses the normal in-person signing flow. * &#x60;notary&#x60;: The envelope uses the eNotary in-person signing flow. </value>
        [DataMember(Name="inPersonSigningType", EmitDefaultValue=false)]
        public string InPersonSigningType { get; set; }
        /// <summary>
        /// The signer&#39;s full legal name in an eNotary flow.  Required when &#x60;inPersonSigningType&#x60; is &#x60;notary&#x60;. For regular in-person-signer flow, use &#x60;signerName&#x60; instead.  Maximum Length: 100 characters. 
        /// </summary>
        /// <value>The signer&#39;s full legal name in an eNotary flow.  Required when &#x60;inPersonSigningType&#x60; is &#x60;notary&#x60;. For regular in-person-signer flow, use &#x60;signerName&#x60; instead.  Maximum Length: 100 characters. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Information about the notary host. The following information is required when using the eNotary in-person signing flow:  * &#x60;name&#x60;: Specifies the name of the notary. * &#x60;email&#x60;: Specifies the email address of the notary. * &#x60;recipientId&#x60;: A unique ID number for the notary signing host.  
        /// </summary>
        /// <value>Information about the notary host. The following information is required when using the eNotary in-person signing flow:  * &#x60;name&#x60;: Specifies the name of the notary. * &#x60;email&#x60;: Specifies the email address of the notary. * &#x60;recipientId&#x60;: A unique ID number for the notary signing host.  </value>
        [DataMember(Name="notaryHost", EmitDefaultValue=false)]
        public NotaryHost NotaryHost { get; set; }
        /// <summary>
        /// A note sent to the in-person signer in the signing email. This note is visible only to this recipient.  Maximum Length: 1000 characters. 
        /// </summary>
        /// <value>A note sent to the in-person signer in the signing email. This note is visible only to this recipient.  Maximum Length: 1000 characters. </value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// A complex type that Contains the elements:  * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose. * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use. * recordVoicePrint - Reserved. * validateRecipProvidedNumber - Reserved. 
        /// </summary>
        /// <value>A complex type that Contains the elements:  * recipMayProvideNumber - Boolean. When set to **true**, the recipient can use whatever phone number they choose. * senderProvidedNumbers - ArrayOfString.  A list of phone numbers the recipient can use. * recordVoicePrint - Reserved. * validateRecipProvidedNumber - Reserved. </value>
        [DataMember(Name="phoneAuthentication", EmitDefaultValue=false)]
        public RecipientPhoneAuthentication PhoneAuthentication { get; set; }
        /// <summary>
        /// Reserved:
        /// </summary>
        /// <value>Reserved:</value>
        [DataMember(Name="recipientAttachments", EmitDefaultValue=false)]
        public List<RecipientAttachment> RecipientAttachments { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="recipientAuthenticationStatus", EmitDefaultValue=false)]
        public AuthenticationStatus RecipientAuthenticationStatus { get; set; }
        /// <summary>
        /// Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.
        /// </summary>
        /// <value>Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the Document.</value>
        [DataMember(Name="recipientId", EmitDefaultValue=false)]
        public string RecipientId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="recipientIdGuid", EmitDefaultValue=false)]
        public string RecipientIdGuid { get; set; }
        /// <summary>
        /// The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information](../../../../guide/appendix/standards_based_signatures.html)
        /// </summary>
        /// <value>The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information](../../../../guide/appendix/standards_based_signatures.html)</value>
        [DataMember(Name="recipientSignatureProviders", EmitDefaultValue=false)]
        public List<RecipientSignatureProvider> RecipientSignatureProviders { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="recipientSuppliesTabs", EmitDefaultValue=false)]
        public string RecipientSuppliesTabs { get; set; }
        /// <summary>
        /// When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. 
        /// </summary>
        /// <value>When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity. </value>
        [DataMember(Name="requireIdLookup", EmitDefaultValue=false)]
        public string RequireIdLookup { get; set; }
        /// <summary>
        /// By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.  This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the &#x60;recipientSignatureProviders&#x60; parameter for other types of digital certificates.   Set this parameter to &#x60;safe&#x60; to use a SAFE-BioPharma certificate.  The signer must be enrolled in the SAFE program to sign with a SAFE certificate.
        /// </summary>
        /// <value>By default, DocuSign signers create electronic signatures. This field can be used to require the signer to use a SAFE-BioPharma digital certificate for signing.  This parameter should only be used to select a SAFE-BioPharma certificate. New integrations should use the &#x60;recipientSignatureProviders&#x60; parameter for other types of digital certificates.   Set this parameter to &#x60;safe&#x60; to use a SAFE-BioPharma certificate.  The signer must be enrolled in the SAFE program to sign with a SAFE certificate.</value>
        [DataMember(Name="requireSignerCertificate", EmitDefaultValue=false)]
        public string RequireSignerCertificate { get; set; }
        /// <summary>
        /// When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.
        /// </summary>
        /// <value>When set to **true**, the signer must print, sign, and upload or fax the signed documents to DocuSign.</value>
        [DataMember(Name="requireSignOnPaper", EmitDefaultValue=false)]
        public string RequireSignOnPaper { get; set; }
        /// <summary>
        /// Optional element. Specifies the role name associated with the recipient.&lt;br/&gt;&lt;br/&gt;This is required when working with template recipients.
        /// </summary>
        /// <value>Optional element. Specifies the role name associated with the recipient.&lt;br/&gt;&lt;br/&gt;This is required when working with template recipients.</value>
        [DataMember(Name="roleName", EmitDefaultValue=false)]
        public string RoleName { get; set; }
        /// <summary>
        /// Specifies the routing order of the recipient in the envelope. 
        /// </summary>
        /// <value>Specifies the routing order of the recipient in the envelope. </value>
        [DataMember(Name="routingOrder", EmitDefaultValue=false)]
        public string RoutingOrder { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="samlAuthentication", EmitDefaultValue=false)]
        public RecipientSAMLAuthentication SamlAuthentication { get; set; }
        /// <summary>
        /// The date and time the envelope was sent.
        /// </summary>
        /// <value>The date and time the envelope was sent.</value>
        [DataMember(Name="sentDateTime", EmitDefaultValue=false)]
        public string SentDateTime { get; set; }
        /// <summary>
        /// Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.  Used only with recipient types In Person Signers and Signers.   
        /// </summary>
        /// <value>Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.  Used only with recipient types In Person Signers and Signers.   </value>
        [DataMember(Name="signatureInfo", EmitDefaultValue=false)]
        public RecipientSignatureInformation SignatureInfo { get; set; }
        /// <summary>
        /// Reserved: For DocuSign use only. 
        /// </summary>
        /// <value>Reserved: For DocuSign use only. </value>
        [DataMember(Name="signedDateTime", EmitDefaultValue=false)]
        public string SignedDateTime { get; set; }
        /// <summary>
        /// The in-person signer&#39;s email address.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;email&#x60; instead.  Maximum Length: 100 characters.  
        /// </summary>
        /// <value>The in-person signer&#39;s email address.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;email&#x60; instead.  Maximum Length: 100 characters.  </value>
        [DataMember(Name="signerEmail", EmitDefaultValue=false)]
        public string SignerEmail { get; set; }
        /// <summary>
        /// The in-person signer&#39;s full legal name.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;name&#x60; instead.  Maximum Length: 100 characters. 
        /// </summary>
        /// <value>The in-person signer&#39;s full legal name.  Required when &#x60;inPersonSigningType&#x60; is &#x60;inPersonSigner&#x60;. For eNotary flow, use &#x60;name&#x60; instead.  Maximum Length: 100 characters. </value>
        [DataMember(Name="signerName", EmitDefaultValue=false)]
        public string SignerName { get; set; }
        /// <summary>
        /// When set to **true**, specifies that the signer must sign in all locations.
        /// </summary>
        /// <value>When set to **true**, specifies that the signer must sign in all locations.</value>
        [DataMember(Name="signInEachLocation", EmitDefaultValue=false)]
        public string SignInEachLocation { get; set; }
        /// <summary>
        /// When set to **true** and the feature is enabled in the sender&#39;s account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).
        /// </summary>
        /// <value>When set to **true** and the feature is enabled in the sender&#39;s account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once).</value>
        [DataMember(Name="signingGroupId", EmitDefaultValue=false)]
        public string SigningGroupId { get; set; }
        /// <summary>
        /// The display name for the signing group.   Maximum Length: 100 characters. 
        /// </summary>
        /// <value>The display name for the signing group.   Maximum Length: 100 characters. </value>
        [DataMember(Name="signingGroupName", EmitDefaultValue=false)]
        public string SigningGroupName { get; set; }
        /// <summary>
        /// A complex type that contains information about users in the signing group.
        /// </summary>
        /// <value>A complex type that contains information about users in the signing group.</value>
        [DataMember(Name="signingGroupUsers", EmitDefaultValue=false)]
        public List<UserInfo> SigningGroupUsers { get; set; }
        /// <summary>
        /// Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication.  
        /// </summary>
        /// <value>Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication.  </value>
        [DataMember(Name="smsAuthentication", EmitDefaultValue=false)]
        public RecipientSMSAuthentication SmsAuthentication { get; set; }
        /// <summary>
        ///  Lists the social ID type that can be used for recipient authentication.
        /// </summary>
        /// <value> Lists the social ID type that can be used for recipient authentication.</value>
        [DataMember(Name="socialAuthentications", EmitDefaultValue=false)]
        public List<SocialAuthentication> SocialAuthentications { get; set; }
        /// <summary>
        /// Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.
        /// </summary>
        /// <value>Indicates the envelope status. Valid values are:  * sent - The envelope is sent to the recipients.  * created - The envelope is saved as a draft and can be modified and sent later.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="tabs", EmitDefaultValue=false)]
        public EnvelopeRecipientTabs Tabs { get; set; }
        /// <summary>
        /// When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. 
        /// </summary>
        /// <value>When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients. </value>
        [DataMember(Name="templateLocked", EmitDefaultValue=false)]
        public string TemplateLocked { get; set; }
        /// <summary>
        /// When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.
        /// </summary>
        /// <value>When set to **true**, the sender may not remove the recipient. Used only when working with template recipients.</value>
        [DataMember(Name="templateRequired", EmitDefaultValue=false)]
        public string TemplateRequired { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="totalTabCount", EmitDefaultValue=false)]
        public string TotalTabCount { get; set; }
        /// <summary>
        /// The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.
        /// </summary>
        /// <value>The user ID of the user being accessed. Generally this is the user ID of the authenticated user, but if the authenticated user is an Admin on the account, this may be another user the Admin user is accessing.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InPersonSigner {\n");
            sb.Append("  AccessCode: ").Append(AccessCode).Append("\n");
            sb.Append("  AddAccessCodeToEmail: ").Append(AddAccessCodeToEmail).Append("\n");
            sb.Append("  AutoNavigation: ").Append(AutoNavigation).Append("\n");
            sb.Append("  CanSignOffline: ").Append(CanSignOffline).Append("\n");
            sb.Append("  ClientUserId: ").Append(ClientUserId).Append("\n");
            sb.Append("  CreationReason: ").Append(CreationReason).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  DeclinedDateTime: ").Append(DeclinedDateTime).Append("\n");
            sb.Append("  DeclinedReason: ").Append(DeclinedReason).Append("\n");
            sb.Append("  DefaultRecipient: ").Append(DefaultRecipient).Append("\n");
            sb.Append("  DeliveredDateTime: ").Append(DeliveredDateTime).Append("\n");
            sb.Append("  DeliveryMethod: ").Append(DeliveryMethod).Append("\n");
            sb.Append("  DocumentVisibility: ").Append(DocumentVisibility).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailNotification: ").Append(EmailNotification).Append("\n");
            sb.Append("  EmbeddedRecipientStartURL: ").Append(EmbeddedRecipientStartURL).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  HostEmail: ").Append(HostEmail).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  IdCheckConfigurationName: ").Append(IdCheckConfigurationName).Append("\n");
            sb.Append("  IdCheckInformationInput: ").Append(IdCheckInformationInput).Append("\n");
            sb.Append("  InheritEmailNotificationConfiguration: ").Append(InheritEmailNotificationConfiguration).Append("\n");
            sb.Append("  InPersonSigningType: ").Append(InPersonSigningType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotaryHost: ").Append(NotaryHost).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  PhoneAuthentication: ").Append(PhoneAuthentication).Append("\n");
            sb.Append("  RecipientAttachments: ").Append(RecipientAttachments).Append("\n");
            sb.Append("  RecipientAuthenticationStatus: ").Append(RecipientAuthenticationStatus).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  RecipientIdGuid: ").Append(RecipientIdGuid).Append("\n");
            sb.Append("  RecipientSignatureProviders: ").Append(RecipientSignatureProviders).Append("\n");
            sb.Append("  RecipientSuppliesTabs: ").Append(RecipientSuppliesTabs).Append("\n");
            sb.Append("  RequireIdLookup: ").Append(RequireIdLookup).Append("\n");
            sb.Append("  RequireSignerCertificate: ").Append(RequireSignerCertificate).Append("\n");
            sb.Append("  RequireSignOnPaper: ").Append(RequireSignOnPaper).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  RoutingOrder: ").Append(RoutingOrder).Append("\n");
            sb.Append("  SamlAuthentication: ").Append(SamlAuthentication).Append("\n");
            sb.Append("  SentDateTime: ").Append(SentDateTime).Append("\n");
            sb.Append("  SignatureInfo: ").Append(SignatureInfo).Append("\n");
            sb.Append("  SignedDateTime: ").Append(SignedDateTime).Append("\n");
            sb.Append("  SignerEmail: ").Append(SignerEmail).Append("\n");
            sb.Append("  SignerName: ").Append(SignerName).Append("\n");
            sb.Append("  SignInEachLocation: ").Append(SignInEachLocation).Append("\n");
            sb.Append("  SigningGroupId: ").Append(SigningGroupId).Append("\n");
            sb.Append("  SigningGroupName: ").Append(SigningGroupName).Append("\n");
            sb.Append("  SigningGroupUsers: ").Append(SigningGroupUsers).Append("\n");
            sb.Append("  SmsAuthentication: ").Append(SmsAuthentication).Append("\n");
            sb.Append("  SocialAuthentications: ").Append(SocialAuthentications).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tabs: ").Append(Tabs).Append("\n");
            sb.Append("  TemplateLocked: ").Append(TemplateLocked).Append("\n");
            sb.Append("  TemplateRequired: ").Append(TemplateRequired).Append("\n");
            sb.Append("  TotalTabCount: ").Append(TotalTabCount).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InPersonSigner);
        }

        /// <summary>
        /// Returns true if InPersonSigner instances are equal
        /// </summary>
        /// <param name="other">Instance of InPersonSigner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InPersonSigner other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessCode == other.AccessCode ||
                    this.AccessCode != null &&
                    this.AccessCode.Equals(other.AccessCode)
                ) && 
                (
                    this.AddAccessCodeToEmail == other.AddAccessCodeToEmail ||
                    this.AddAccessCodeToEmail != null &&
                    this.AddAccessCodeToEmail.Equals(other.AddAccessCodeToEmail)
                ) && 
                (
                    this.AutoNavigation == other.AutoNavigation ||
                    this.AutoNavigation != null &&
                    this.AutoNavigation.Equals(other.AutoNavigation)
                ) && 
                (
                    this.CanSignOffline == other.CanSignOffline ||
                    this.CanSignOffline != null &&
                    this.CanSignOffline.Equals(other.CanSignOffline)
                ) && 
                (
                    this.ClientUserId == other.ClientUserId ||
                    this.ClientUserId != null &&
                    this.ClientUserId.Equals(other.ClientUserId)
                ) && 
                (
                    this.CreationReason == other.CreationReason ||
                    this.CreationReason != null &&
                    this.CreationReason.Equals(other.CreationReason)
                ) && 
                (
                    this.CustomFields == other.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    this.DeclinedDateTime == other.DeclinedDateTime ||
                    this.DeclinedDateTime != null &&
                    this.DeclinedDateTime.Equals(other.DeclinedDateTime)
                ) && 
                (
                    this.DeclinedReason == other.DeclinedReason ||
                    this.DeclinedReason != null &&
                    this.DeclinedReason.Equals(other.DeclinedReason)
                ) && 
                (
                    this.DefaultRecipient == other.DefaultRecipient ||
                    this.DefaultRecipient != null &&
                    this.DefaultRecipient.Equals(other.DefaultRecipient)
                ) && 
                (
                    this.DeliveredDateTime == other.DeliveredDateTime ||
                    this.DeliveredDateTime != null &&
                    this.DeliveredDateTime.Equals(other.DeliveredDateTime)
                ) && 
                (
                    this.DeliveryMethod == other.DeliveryMethod ||
                    this.DeliveryMethod != null &&
                    this.DeliveryMethod.Equals(other.DeliveryMethod)
                ) && 
                (
                    this.DocumentVisibility == other.DocumentVisibility ||
                    this.DocumentVisibility != null &&
                    this.DocumentVisibility.SequenceEqual(other.DocumentVisibility)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.EmailNotification == other.EmailNotification ||
                    this.EmailNotification != null &&
                    this.EmailNotification.Equals(other.EmailNotification)
                ) && 
                (
                    this.EmbeddedRecipientStartURL == other.EmbeddedRecipientStartURL ||
                    this.EmbeddedRecipientStartURL != null &&
                    this.EmbeddedRecipientStartURL.Equals(other.EmbeddedRecipientStartURL)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.FaxNumber == other.FaxNumber ||
                    this.FaxNumber != null &&
                    this.FaxNumber.Equals(other.FaxNumber)
                ) && 
                (
                    this.HostEmail == other.HostEmail ||
                    this.HostEmail != null &&
                    this.HostEmail.Equals(other.HostEmail)
                ) && 
                (
                    this.HostName == other.HostName ||
                    this.HostName != null &&
                    this.HostName.Equals(other.HostName)
                ) && 
                (
                    this.IdCheckConfigurationName == other.IdCheckConfigurationName ||
                    this.IdCheckConfigurationName != null &&
                    this.IdCheckConfigurationName.Equals(other.IdCheckConfigurationName)
                ) && 
                (
                    this.IdCheckInformationInput == other.IdCheckInformationInput ||
                    this.IdCheckInformationInput != null &&
                    this.IdCheckInformationInput.Equals(other.IdCheckInformationInput)
                ) && 
                (
                    this.InheritEmailNotificationConfiguration == other.InheritEmailNotificationConfiguration ||
                    this.InheritEmailNotificationConfiguration != null &&
                    this.InheritEmailNotificationConfiguration.Equals(other.InheritEmailNotificationConfiguration)
                ) && 
                (
                    this.InPersonSigningType == other.InPersonSigningType ||
                    this.InPersonSigningType != null &&
                    this.InPersonSigningType.Equals(other.InPersonSigningType)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NotaryHost == other.NotaryHost ||
                    this.NotaryHost != null &&
                    this.NotaryHost.Equals(other.NotaryHost)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.PhoneAuthentication == other.PhoneAuthentication ||
                    this.PhoneAuthentication != null &&
                    this.PhoneAuthentication.Equals(other.PhoneAuthentication)
                ) && 
                (
                    this.RecipientAttachments == other.RecipientAttachments ||
                    this.RecipientAttachments != null &&
                    this.RecipientAttachments.SequenceEqual(other.RecipientAttachments)
                ) && 
                (
                    this.RecipientAuthenticationStatus == other.RecipientAuthenticationStatus ||
                    this.RecipientAuthenticationStatus != null &&
                    this.RecipientAuthenticationStatus.Equals(other.RecipientAuthenticationStatus)
                ) && 
                (
                    this.RecipientId == other.RecipientId ||
                    this.RecipientId != null &&
                    this.RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    this.RecipientIdGuid == other.RecipientIdGuid ||
                    this.RecipientIdGuid != null &&
                    this.RecipientIdGuid.Equals(other.RecipientIdGuid)
                ) && 
                (
                    this.RecipientSignatureProviders == other.RecipientSignatureProviders ||
                    this.RecipientSignatureProviders != null &&
                    this.RecipientSignatureProviders.SequenceEqual(other.RecipientSignatureProviders)
                ) && 
                (
                    this.RecipientSuppliesTabs == other.RecipientSuppliesTabs ||
                    this.RecipientSuppliesTabs != null &&
                    this.RecipientSuppliesTabs.Equals(other.RecipientSuppliesTabs)
                ) && 
                (
                    this.RequireIdLookup == other.RequireIdLookup ||
                    this.RequireIdLookup != null &&
                    this.RequireIdLookup.Equals(other.RequireIdLookup)
                ) && 
                (
                    this.RequireSignerCertificate == other.RequireSignerCertificate ||
                    this.RequireSignerCertificate != null &&
                    this.RequireSignerCertificate.Equals(other.RequireSignerCertificate)
                ) && 
                (
                    this.RequireSignOnPaper == other.RequireSignOnPaper ||
                    this.RequireSignOnPaper != null &&
                    this.RequireSignOnPaper.Equals(other.RequireSignOnPaper)
                ) && 
                (
                    this.RoleName == other.RoleName ||
                    this.RoleName != null &&
                    this.RoleName.Equals(other.RoleName)
                ) && 
                (
                    this.RoutingOrder == other.RoutingOrder ||
                    this.RoutingOrder != null &&
                    this.RoutingOrder.Equals(other.RoutingOrder)
                ) && 
                (
                    this.SamlAuthentication == other.SamlAuthentication ||
                    this.SamlAuthentication != null &&
                    this.SamlAuthentication.Equals(other.SamlAuthentication)
                ) && 
                (
                    this.SentDateTime == other.SentDateTime ||
                    this.SentDateTime != null &&
                    this.SentDateTime.Equals(other.SentDateTime)
                ) && 
                (
                    this.SignatureInfo == other.SignatureInfo ||
                    this.SignatureInfo != null &&
                    this.SignatureInfo.Equals(other.SignatureInfo)
                ) && 
                (
                    this.SignedDateTime == other.SignedDateTime ||
                    this.SignedDateTime != null &&
                    this.SignedDateTime.Equals(other.SignedDateTime)
                ) && 
                (
                    this.SignerEmail == other.SignerEmail ||
                    this.SignerEmail != null &&
                    this.SignerEmail.Equals(other.SignerEmail)
                ) && 
                (
                    this.SignerName == other.SignerName ||
                    this.SignerName != null &&
                    this.SignerName.Equals(other.SignerName)
                ) && 
                (
                    this.SignInEachLocation == other.SignInEachLocation ||
                    this.SignInEachLocation != null &&
                    this.SignInEachLocation.Equals(other.SignInEachLocation)
                ) && 
                (
                    this.SigningGroupId == other.SigningGroupId ||
                    this.SigningGroupId != null &&
                    this.SigningGroupId.Equals(other.SigningGroupId)
                ) && 
                (
                    this.SigningGroupName == other.SigningGroupName ||
                    this.SigningGroupName != null &&
                    this.SigningGroupName.Equals(other.SigningGroupName)
                ) && 
                (
                    this.SigningGroupUsers == other.SigningGroupUsers ||
                    this.SigningGroupUsers != null &&
                    this.SigningGroupUsers.SequenceEqual(other.SigningGroupUsers)
                ) && 
                (
                    this.SmsAuthentication == other.SmsAuthentication ||
                    this.SmsAuthentication != null &&
                    this.SmsAuthentication.Equals(other.SmsAuthentication)
                ) && 
                (
                    this.SocialAuthentications == other.SocialAuthentications ||
                    this.SocialAuthentications != null &&
                    this.SocialAuthentications.SequenceEqual(other.SocialAuthentications)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Tabs == other.Tabs ||
                    this.Tabs != null &&
                    this.Tabs.Equals(other.Tabs)
                ) && 
                (
                    this.TemplateLocked == other.TemplateLocked ||
                    this.TemplateLocked != null &&
                    this.TemplateLocked.Equals(other.TemplateLocked)
                ) && 
                (
                    this.TemplateRequired == other.TemplateRequired ||
                    this.TemplateRequired != null &&
                    this.TemplateRequired.Equals(other.TemplateRequired)
                ) && 
                (
                    this.TotalTabCount == other.TotalTabCount ||
                    this.TotalTabCount != null &&
                    this.TotalTabCount.Equals(other.TotalTabCount)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessCode != null)
                    hash = hash * 59 + this.AccessCode.GetHashCode();
                if (this.AddAccessCodeToEmail != null)
                    hash = hash * 59 + this.AddAccessCodeToEmail.GetHashCode();
                if (this.AutoNavigation != null)
                    hash = hash * 59 + this.AutoNavigation.GetHashCode();
                if (this.CanSignOffline != null)
                    hash = hash * 59 + this.CanSignOffline.GetHashCode();
                if (this.ClientUserId != null)
                    hash = hash * 59 + this.ClientUserId.GetHashCode();
                if (this.CreationReason != null)
                    hash = hash * 59 + this.CreationReason.GetHashCode();
                if (this.CustomFields != null)
                    hash = hash * 59 + this.CustomFields.GetHashCode();
                if (this.DeclinedDateTime != null)
                    hash = hash * 59 + this.DeclinedDateTime.GetHashCode();
                if (this.DeclinedReason != null)
                    hash = hash * 59 + this.DeclinedReason.GetHashCode();
                if (this.DefaultRecipient != null)
                    hash = hash * 59 + this.DefaultRecipient.GetHashCode();
                if (this.DeliveredDateTime != null)
                    hash = hash * 59 + this.DeliveredDateTime.GetHashCode();
                if (this.DeliveryMethod != null)
                    hash = hash * 59 + this.DeliveryMethod.GetHashCode();
                if (this.DocumentVisibility != null)
                    hash = hash * 59 + this.DocumentVisibility.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.EmailNotification != null)
                    hash = hash * 59 + this.EmailNotification.GetHashCode();
                if (this.EmbeddedRecipientStartURL != null)
                    hash = hash * 59 + this.EmbeddedRecipientStartURL.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.FaxNumber != null)
                    hash = hash * 59 + this.FaxNumber.GetHashCode();
                if (this.HostEmail != null)
                    hash = hash * 59 + this.HostEmail.GetHashCode();
                if (this.HostName != null)
                    hash = hash * 59 + this.HostName.GetHashCode();
                if (this.IdCheckConfigurationName != null)
                    hash = hash * 59 + this.IdCheckConfigurationName.GetHashCode();
                if (this.IdCheckInformationInput != null)
                    hash = hash * 59 + this.IdCheckInformationInput.GetHashCode();
                if (this.InheritEmailNotificationConfiguration != null)
                    hash = hash * 59 + this.InheritEmailNotificationConfiguration.GetHashCode();
                if (this.InPersonSigningType != null)
                    hash = hash * 59 + this.InPersonSigningType.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NotaryHost != null)
                    hash = hash * 59 + this.NotaryHost.GetHashCode();
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.PhoneAuthentication != null)
                    hash = hash * 59 + this.PhoneAuthentication.GetHashCode();
                if (this.RecipientAttachments != null)
                    hash = hash * 59 + this.RecipientAttachments.GetHashCode();
                if (this.RecipientAuthenticationStatus != null)
                    hash = hash * 59 + this.RecipientAuthenticationStatus.GetHashCode();
                if (this.RecipientId != null)
                    hash = hash * 59 + this.RecipientId.GetHashCode();
                if (this.RecipientIdGuid != null)
                    hash = hash * 59 + this.RecipientIdGuid.GetHashCode();
                if (this.RecipientSignatureProviders != null)
                    hash = hash * 59 + this.RecipientSignatureProviders.GetHashCode();
                if (this.RecipientSuppliesTabs != null)
                    hash = hash * 59 + this.RecipientSuppliesTabs.GetHashCode();
                if (this.RequireIdLookup != null)
                    hash = hash * 59 + this.RequireIdLookup.GetHashCode();
                if (this.RequireSignerCertificate != null)
                    hash = hash * 59 + this.RequireSignerCertificate.GetHashCode();
                if (this.RequireSignOnPaper != null)
                    hash = hash * 59 + this.RequireSignOnPaper.GetHashCode();
                if (this.RoleName != null)
                    hash = hash * 59 + this.RoleName.GetHashCode();
                if (this.RoutingOrder != null)
                    hash = hash * 59 + this.RoutingOrder.GetHashCode();
                if (this.SamlAuthentication != null)
                    hash = hash * 59 + this.SamlAuthentication.GetHashCode();
                if (this.SentDateTime != null)
                    hash = hash * 59 + this.SentDateTime.GetHashCode();
                if (this.SignatureInfo != null)
                    hash = hash * 59 + this.SignatureInfo.GetHashCode();
                if (this.SignedDateTime != null)
                    hash = hash * 59 + this.SignedDateTime.GetHashCode();
                if (this.SignerEmail != null)
                    hash = hash * 59 + this.SignerEmail.GetHashCode();
                if (this.SignerName != null)
                    hash = hash * 59 + this.SignerName.GetHashCode();
                if (this.SignInEachLocation != null)
                    hash = hash * 59 + this.SignInEachLocation.GetHashCode();
                if (this.SigningGroupId != null)
                    hash = hash * 59 + this.SigningGroupId.GetHashCode();
                if (this.SigningGroupName != null)
                    hash = hash * 59 + this.SigningGroupName.GetHashCode();
                if (this.SigningGroupUsers != null)
                    hash = hash * 59 + this.SigningGroupUsers.GetHashCode();
                if (this.SmsAuthentication != null)
                    hash = hash * 59 + this.SmsAuthentication.GetHashCode();
                if (this.SocialAuthentications != null)
                    hash = hash * 59 + this.SocialAuthentications.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Tabs != null)
                    hash = hash * 59 + this.Tabs.GetHashCode();
                if (this.TemplateLocked != null)
                    hash = hash * 59 + this.TemplateLocked.GetHashCode();
                if (this.TemplateRequired != null)
                    hash = hash * 59 + this.TemplateRequired.GetHashCode();
                if (this.TotalTabCount != null)
                    hash = hash * 59 + this.TotalTabCount.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                return hash;
            }
        }
    }

}
