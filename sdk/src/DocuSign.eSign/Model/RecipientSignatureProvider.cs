/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information.](../../../../guide/appendix/standards_based_signatures.html)
    /// </summary>
    [DataContract]
    public partial class RecipientSignatureProvider :  IEquatable<RecipientSignatureProvider>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipientSignatureProvider" /> class.
        /// </summary>
        /// <param name="SignatureProviderName">The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. [The current provider list.](../../../../guide/appendix/standards_based_signatures.html#signature-provider-options).</param>
        /// <param name="SignatureProviderOptions">Option settings for the signature provider..</param>
        public RecipientSignatureProvider(string SignatureProviderName = null, RecipientSignatureProviderOptions SignatureProviderOptions = null)
        {
            this.SignatureProviderName = SignatureProviderName;
            this.SignatureProviderOptions = SignatureProviderOptions;
        }
        
        /// <summary>
        /// The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. [The current provider list.](../../../../guide/appendix/standards_based_signatures.html#signature-provider-options)
        /// </summary>
        /// <value>The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. [The current provider list.](../../../../guide/appendix/standards_based_signatures.html#signature-provider-options)</value>
        [DataMember(Name="signatureProviderName", EmitDefaultValue=false)]
        public string SignatureProviderName { get; set; }
        /// <summary>
        /// Option settings for the signature provider.
        /// </summary>
        /// <value>Option settings for the signature provider.</value>
        [DataMember(Name="signatureProviderOptions", EmitDefaultValue=false)]
        public RecipientSignatureProviderOptions SignatureProviderOptions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecipientSignatureProvider {\n");
            sb.Append("  SignatureProviderName: ").Append(SignatureProviderName).Append("\n");
            sb.Append("  SignatureProviderOptions: ").Append(SignatureProviderOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RecipientSignatureProvider);
        }

        /// <summary>
        /// Returns true if RecipientSignatureProvider instances are equal
        /// </summary>
        /// <param name="other">Instance of RecipientSignatureProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipientSignatureProvider other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SignatureProviderName == other.SignatureProviderName ||
                    this.SignatureProviderName != null &&
                    this.SignatureProviderName.Equals(other.SignatureProviderName)
                ) && 
                (
                    this.SignatureProviderOptions == other.SignatureProviderOptions ||
                    this.SignatureProviderOptions != null &&
                    this.SignatureProviderOptions.Equals(other.SignatureProviderOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SignatureProviderName != null)
                    hash = hash * 59 + this.SignatureProviderName.GetHashCode();
                if (this.SignatureProviderOptions != null)
                    hash = hash * 59 + this.SignatureProviderOptions.GetHashCode();
                return hash;
            }
        }
    }

}
