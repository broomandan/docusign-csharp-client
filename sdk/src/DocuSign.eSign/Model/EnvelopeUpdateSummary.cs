/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnvelopeUpdateSummary :  IEquatable<EnvelopeUpdateSummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeUpdateSummary" /> class.
        /// </summary>
        /// <param name="BulkEnvelopeStatus">.</param>
        /// <param name="EnvelopeId">The envelope ID of the envelope status that failed to post..</param>
        /// <param name="ErrorDetails">.</param>
        /// <param name="ListCustomFieldUpdateResults">.</param>
        /// <param name="LockInformation">.</param>
        /// <param name="RecipientUpdateResults">.</param>
        /// <param name="TabUpdateResults">.</param>
        /// <param name="TextCustomFieldUpdateResults">.</param>
        public EnvelopeUpdateSummary(BulkEnvelopeStatus BulkEnvelopeStatus = null, string EnvelopeId = null, ErrorDetails ErrorDetails = null, List<ListCustomField> ListCustomFieldUpdateResults = null, EnvelopeLocks LockInformation = null, List<RecipientUpdateResponse> RecipientUpdateResults = null, EnvelopeRecipientTabs TabUpdateResults = null, List<TextCustomField> TextCustomFieldUpdateResults = null)
        {
            this.BulkEnvelopeStatus = BulkEnvelopeStatus;
            this.EnvelopeId = EnvelopeId;
            this.ErrorDetails = ErrorDetails;
            this.ListCustomFieldUpdateResults = ListCustomFieldUpdateResults;
            this.LockInformation = LockInformation;
            this.RecipientUpdateResults = RecipientUpdateResults;
            this.TabUpdateResults = TabUpdateResults;
            this.TextCustomFieldUpdateResults = TextCustomFieldUpdateResults;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="bulkEnvelopeStatus", EmitDefaultValue=false)]
        public BulkEnvelopeStatus BulkEnvelopeStatus { get; set; }
        /// <summary>
        /// The envelope ID of the envelope status that failed to post.
        /// </summary>
        /// <value>The envelope ID of the envelope status that failed to post.</value>
        [DataMember(Name="envelopeId", EmitDefaultValue=false)]
        public string EnvelopeId { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="listCustomFieldUpdateResults", EmitDefaultValue=false)]
        public List<ListCustomField> ListCustomFieldUpdateResults { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="lockInformation", EmitDefaultValue=false)]
        public EnvelopeLocks LockInformation { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="recipientUpdateResults", EmitDefaultValue=false)]
        public List<RecipientUpdateResponse> RecipientUpdateResults { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="tabUpdateResults", EmitDefaultValue=false)]
        public EnvelopeRecipientTabs TabUpdateResults { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="textCustomFieldUpdateResults", EmitDefaultValue=false)]
        public List<TextCustomField> TextCustomFieldUpdateResults { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvelopeUpdateSummary {\n");
            sb.Append("  BulkEnvelopeStatus: ").Append(BulkEnvelopeStatus).Append("\n");
            sb.Append("  EnvelopeId: ").Append(EnvelopeId).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  ListCustomFieldUpdateResults: ").Append(ListCustomFieldUpdateResults).Append("\n");
            sb.Append("  LockInformation: ").Append(LockInformation).Append("\n");
            sb.Append("  RecipientUpdateResults: ").Append(RecipientUpdateResults).Append("\n");
            sb.Append("  TabUpdateResults: ").Append(TabUpdateResults).Append("\n");
            sb.Append("  TextCustomFieldUpdateResults: ").Append(TextCustomFieldUpdateResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnvelopeUpdateSummary);
        }

        /// <summary>
        /// Returns true if EnvelopeUpdateSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvelopeUpdateSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvelopeUpdateSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BulkEnvelopeStatus == other.BulkEnvelopeStatus ||
                    this.BulkEnvelopeStatus != null &&
                    this.BulkEnvelopeStatus.Equals(other.BulkEnvelopeStatus)
                ) && 
                (
                    this.EnvelopeId == other.EnvelopeId ||
                    this.EnvelopeId != null &&
                    this.EnvelopeId.Equals(other.EnvelopeId)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.ListCustomFieldUpdateResults == other.ListCustomFieldUpdateResults ||
                    this.ListCustomFieldUpdateResults != null &&
                    this.ListCustomFieldUpdateResults.SequenceEqual(other.ListCustomFieldUpdateResults)
                ) && 
                (
                    this.LockInformation == other.LockInformation ||
                    this.LockInformation != null &&
                    this.LockInformation.Equals(other.LockInformation)
                ) && 
                (
                    this.RecipientUpdateResults == other.RecipientUpdateResults ||
                    this.RecipientUpdateResults != null &&
                    this.RecipientUpdateResults.SequenceEqual(other.RecipientUpdateResults)
                ) && 
                (
                    this.TabUpdateResults == other.TabUpdateResults ||
                    this.TabUpdateResults != null &&
                    this.TabUpdateResults.Equals(other.TabUpdateResults)
                ) && 
                (
                    this.TextCustomFieldUpdateResults == other.TextCustomFieldUpdateResults ||
                    this.TextCustomFieldUpdateResults != null &&
                    this.TextCustomFieldUpdateResults.SequenceEqual(other.TextCustomFieldUpdateResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BulkEnvelopeStatus != null)
                    hash = hash * 59 + this.BulkEnvelopeStatus.GetHashCode();
                if (this.EnvelopeId != null)
                    hash = hash * 59 + this.EnvelopeId.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.ListCustomFieldUpdateResults != null)
                    hash = hash * 59 + this.ListCustomFieldUpdateResults.GetHashCode();
                if (this.LockInformation != null)
                    hash = hash * 59 + this.LockInformation.GetHashCode();
                if (this.RecipientUpdateResults != null)
                    hash = hash * 59 + this.RecipientUpdateResults.GetHashCode();
                if (this.TabUpdateResults != null)
                    hash = hash * 59 + this.TabUpdateResults.GetHashCode();
                if (this.TextCustomFieldUpdateResults != null)
                    hash = hash * 59 + this.TextCustomFieldUpdateResults.GetHashCode();
                return hash;
            }
        }
    }

}
