/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConnectDebugLog :  IEquatable<ConnectDebugLog>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectDebugLog" /> class.
        /// </summary>
        /// <param name="ConnectConfig">.</param>
        /// <param name="ErrorDetails">.</param>
        /// <param name="EventDateTime">.</param>
        /// <param name="EventDescription">.</param>
        /// <param name="Payload">.</param>
        public ConnectDebugLog(string ConnectConfig = null, ErrorDetails ErrorDetails = null, string EventDateTime = null, string EventDescription = null, string Payload = null)
        {
            this.ConnectConfig = ConnectConfig;
            this.ErrorDetails = ErrorDetails;
            this.EventDateTime = EventDateTime;
            this.EventDescription = EventDescription;
            this.Payload = Payload;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="connectConfig", EmitDefaultValue=false)]
        public string ConnectConfig { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public ErrorDetails ErrorDetails { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="eventDateTime", EmitDefaultValue=false)]
        public string EventDateTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="eventDescription", EmitDefaultValue=false)]
        public string EventDescription { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectDebugLog {\n");
            sb.Append("  ConnectConfig: ").Append(ConnectConfig).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  EventDateTime: ").Append(EventDateTime).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConnectDebugLog);
        }

        /// <summary>
        /// Returns true if ConnectDebugLog instances are equal
        /// </summary>
        /// <param name="other">Instance of ConnectDebugLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectDebugLog other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ConnectConfig == other.ConnectConfig ||
                    this.ConnectConfig != null &&
                    this.ConnectConfig.Equals(other.ConnectConfig)
                ) && 
                (
                    this.ErrorDetails == other.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(other.ErrorDetails)
                ) && 
                (
                    this.EventDateTime == other.EventDateTime ||
                    this.EventDateTime != null &&
                    this.EventDateTime.Equals(other.EventDateTime)
                ) && 
                (
                    this.EventDescription == other.EventDescription ||
                    this.EventDescription != null &&
                    this.EventDescription.Equals(other.EventDescription)
                ) && 
                (
                    this.Payload == other.Payload ||
                    this.Payload != null &&
                    this.Payload.Equals(other.Payload)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ConnectConfig != null)
                    hash = hash * 59 + this.ConnectConfig.GetHashCode();
                if (this.ErrorDetails != null)
                    hash = hash * 59 + this.ErrorDetails.GetHashCode();
                if (this.EventDateTime != null)
                    hash = hash * 59 + this.EventDateTime.GetHashCode();
                if (this.EventDescription != null)
                    hash = hash * 59 + this.EventDescription.GetHashCode();
                if (this.Payload != null)
                    hash = hash * 59 + this.Payload.GetHashCode();
                return hash;
            }
        }
    }

}
