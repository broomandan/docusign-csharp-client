/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](../../../../guide/appendix/standards_based_signatures.html#signature-provider-options)
    /// </summary>
    [DataContract]
    public partial class RecipientSignatureProviderOptions :  IEquatable<RecipientSignatureProviderOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipientSignatureProviderOptions" /> class.
        /// </summary>
        /// <param name="CpfNumber">Reserved for DocuSign.</param>
        /// <param name="OneTimePassword">A pre-shared secret that the signer must enter to complete the signing process. Eg last six digits of the signer&#39;s government ID or Social Security number. Or a newly created pre-shared secret for the transaction. Note: some signature providers may require an exact (case-sensitive) match if alphabetic characters are included in the field..</param>
        /// <param name="SignerRole">The role or capacity of the signing recipient. Examples: Manager, Approver, etc..</param>
        /// <param name="Sms">The mobile phone number used to send the recipient an access code for the signing ceremony. Format: a string starting with +, then the country code followed by the full mobile phone number without any spaces or special characters. Omit leading zeroes before a city code. Examples: +14155551234, +97235551234, +33505551234..</param>
        public RecipientSignatureProviderOptions(string CpfNumber = null, string OneTimePassword = null, string SignerRole = null, string Sms = null)
        {
            this.CpfNumber = CpfNumber;
            this.OneTimePassword = OneTimePassword;
            this.SignerRole = SignerRole;
            this.Sms = Sms;
        }
        
        /// <summary>
        /// Reserved for DocuSign
        /// </summary>
        /// <value>Reserved for DocuSign</value>
        [DataMember(Name="cpfNumber", EmitDefaultValue=false)]
        public string CpfNumber { get; set; }
        /// <summary>
        /// A pre-shared secret that the signer must enter to complete the signing process. Eg last six digits of the signer&#39;s government ID or Social Security number. Or a newly created pre-shared secret for the transaction. Note: some signature providers may require an exact (case-sensitive) match if alphabetic characters are included in the field.
        /// </summary>
        /// <value>A pre-shared secret that the signer must enter to complete the signing process. Eg last six digits of the signer&#39;s government ID or Social Security number. Or a newly created pre-shared secret for the transaction. Note: some signature providers may require an exact (case-sensitive) match if alphabetic characters are included in the field.</value>
        [DataMember(Name="oneTimePassword", EmitDefaultValue=false)]
        public string OneTimePassword { get; set; }
        /// <summary>
        /// The role or capacity of the signing recipient. Examples: Manager, Approver, etc.
        /// </summary>
        /// <value>The role or capacity of the signing recipient. Examples: Manager, Approver, etc.</value>
        [DataMember(Name="signerRole", EmitDefaultValue=false)]
        public string SignerRole { get; set; }
        /// <summary>
        /// The mobile phone number used to send the recipient an access code for the signing ceremony. Format: a string starting with +, then the country code followed by the full mobile phone number without any spaces or special characters. Omit leading zeroes before a city code. Examples: +14155551234, +97235551234, +33505551234.
        /// </summary>
        /// <value>The mobile phone number used to send the recipient an access code for the signing ceremony. Format: a string starting with +, then the country code followed by the full mobile phone number without any spaces or special characters. Omit leading zeroes before a city code. Examples: +14155551234, +97235551234, +33505551234.</value>
        [DataMember(Name="sms", EmitDefaultValue=false)]
        public string Sms { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecipientSignatureProviderOptions {\n");
            sb.Append("  CpfNumber: ").Append(CpfNumber).Append("\n");
            sb.Append("  OneTimePassword: ").Append(OneTimePassword).Append("\n");
            sb.Append("  SignerRole: ").Append(SignerRole).Append("\n");
            sb.Append("  Sms: ").Append(Sms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RecipientSignatureProviderOptions);
        }

        /// <summary>
        /// Returns true if RecipientSignatureProviderOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of RecipientSignatureProviderOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipientSignatureProviderOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CpfNumber == other.CpfNumber ||
                    this.CpfNumber != null &&
                    this.CpfNumber.Equals(other.CpfNumber)
                ) && 
                (
                    this.OneTimePassword == other.OneTimePassword ||
                    this.OneTimePassword != null &&
                    this.OneTimePassword.Equals(other.OneTimePassword)
                ) && 
                (
                    this.SignerRole == other.SignerRole ||
                    this.SignerRole != null &&
                    this.SignerRole.Equals(other.SignerRole)
                ) && 
                (
                    this.Sms == other.Sms ||
                    this.Sms != null &&
                    this.Sms.Equals(other.Sms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CpfNumber != null)
                    hash = hash * 59 + this.CpfNumber.GetHashCode();
                if (this.OneTimePassword != null)
                    hash = hash * 59 + this.OneTimePassword.GetHashCode();
                if (this.SignerRole != null)
                    hash = hash * 59 + this.SignerRole.GetHashCode();
                if (this.Sms != null)
                    hash = hash * 59 + this.Sms.GetHashCode();
                return hash;
            }
        }
    }

}
