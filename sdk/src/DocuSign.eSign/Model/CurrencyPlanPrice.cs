/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CurrencyPlanPrice :  IEquatable<CurrencyPlanPrice>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyPlanPrice" /> class.
        /// </summary>
        /// <param name="CurrencyCode">Specifies the ISO currency code for the account..</param>
        /// <param name="CurrencySymbol">Specifies the currency symbol for the account..</param>
        /// <param name="PerSeatPrice">.</param>
        /// <param name="SupportedCardTypes">A simple type enumeration of the language used. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bahasa Indonesia (id), Bahasa Melayu (ms) Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro),Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi)..</param>
        /// <param name="SupportIncidentFee">The support incident fee charged for each support incident..</param>
        /// <param name="SupportPlanFee">The support plan fee charged for this plan..</param>
        public CurrencyPlanPrice(string CurrencyCode = null, string CurrencySymbol = null, string PerSeatPrice = null, CreditCardTypes SupportedCardTypes = null, string SupportIncidentFee = null, string SupportPlanFee = null)
        {
            this.CurrencyCode = CurrencyCode;
            this.CurrencySymbol = CurrencySymbol;
            this.PerSeatPrice = PerSeatPrice;
            this.SupportedCardTypes = SupportedCardTypes;
            this.SupportIncidentFee = SupportIncidentFee;
            this.SupportPlanFee = SupportPlanFee;
        }
        
        /// <summary>
        /// Specifies the ISO currency code for the account.
        /// </summary>
        /// <value>Specifies the ISO currency code for the account.</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Specifies the currency symbol for the account.
        /// </summary>
        /// <value>Specifies the currency symbol for the account.</value>
        [DataMember(Name="currencySymbol", EmitDefaultValue=false)]
        public string CurrencySymbol { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="perSeatPrice", EmitDefaultValue=false)]
        public string PerSeatPrice { get; set; }
        /// <summary>
        /// A simple type enumeration of the language used. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bahasa Indonesia (id), Bahasa Melayu (ms) Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro),Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi).
        /// </summary>
        /// <value>A simple type enumeration of the language used. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bahasa Indonesia (id), Bahasa Melayu (ms) Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro),Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi).</value>
        [DataMember(Name="supportedCardTypes", EmitDefaultValue=false)]
        public CreditCardTypes SupportedCardTypes { get; set; }
        /// <summary>
        /// The support incident fee charged for each support incident.
        /// </summary>
        /// <value>The support incident fee charged for each support incident.</value>
        [DataMember(Name="supportIncidentFee", EmitDefaultValue=false)]
        public string SupportIncidentFee { get; set; }
        /// <summary>
        /// The support plan fee charged for this plan.
        /// </summary>
        /// <value>The support plan fee charged for this plan.</value>
        [DataMember(Name="supportPlanFee", EmitDefaultValue=false)]
        public string SupportPlanFee { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyPlanPrice {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  PerSeatPrice: ").Append(PerSeatPrice).Append("\n");
            sb.Append("  SupportedCardTypes: ").Append(SupportedCardTypes).Append("\n");
            sb.Append("  SupportIncidentFee: ").Append(SupportIncidentFee).Append("\n");
            sb.Append("  SupportPlanFee: ").Append(SupportPlanFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CurrencyPlanPrice);
        }

        /// <summary>
        /// Returns true if CurrencyPlanPrice instances are equal
        /// </summary>
        /// <param name="other">Instance of CurrencyPlanPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyPlanPrice other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.CurrencySymbol == other.CurrencySymbol ||
                    this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(other.CurrencySymbol)
                ) && 
                (
                    this.PerSeatPrice == other.PerSeatPrice ||
                    this.PerSeatPrice != null &&
                    this.PerSeatPrice.Equals(other.PerSeatPrice)
                ) && 
                (
                    this.SupportedCardTypes == other.SupportedCardTypes ||
                    this.SupportedCardTypes != null &&
                    this.SupportedCardTypes.Equals(other.SupportedCardTypes)
                ) && 
                (
                    this.SupportIncidentFee == other.SupportIncidentFee ||
                    this.SupportIncidentFee != null &&
                    this.SupportIncidentFee.Equals(other.SupportIncidentFee)
                ) && 
                (
                    this.SupportPlanFee == other.SupportPlanFee ||
                    this.SupportPlanFee != null &&
                    this.SupportPlanFee.Equals(other.SupportPlanFee)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.CurrencySymbol != null)
                    hash = hash * 59 + this.CurrencySymbol.GetHashCode();
                if (this.PerSeatPrice != null)
                    hash = hash * 59 + this.PerSeatPrice.GetHashCode();
                if (this.SupportedCardTypes != null)
                    hash = hash * 59 + this.SupportedCardTypes.GetHashCode();
                if (this.SupportIncidentFee != null)
                    hash = hash * 59 + this.SupportIncidentFee.GetHashCode();
                if (this.SupportPlanFee != null)
                    hash = hash * 59 + this.SupportPlanFee.GetHashCode();
                return hash;
            }
        }
    }

}
