/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Authentication and login
    /// </summary>
    [DataContract]
    public partial class Authentication :  IEquatable<Authentication>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Authentication" /> class.
        /// </summary>
        /// <param name="ApiPassword">Contains a token that can be used for authentication in API calls instead of using the user name and password. Only returned if the &#x60;api_password&#x3D;true&#x60; query string is added to the URL..</param>
        /// <param name="LoginAccounts">The list of accounts that authenticating user is a member of..</param>
        public Authentication(string ApiPassword = null, List<LoginAccount> LoginAccounts = null)
        {
            this.ApiPassword = ApiPassword;
            this.LoginAccounts = LoginAccounts;
        }
        
        /// <summary>
        /// Contains a token that can be used for authentication in API calls instead of using the user name and password. Only returned if the &#x60;api_password&#x3D;true&#x60; query string is added to the URL.
        /// </summary>
        /// <value>Contains a token that can be used for authentication in API calls instead of using the user name and password. Only returned if the &#x60;api_password&#x3D;true&#x60; query string is added to the URL.</value>
        [DataMember(Name="apiPassword", EmitDefaultValue=false)]
        public string ApiPassword { get; set; }
        /// <summary>
        /// The list of accounts that authenticating user is a member of.
        /// </summary>
        /// <value>The list of accounts that authenticating user is a member of.</value>
        [DataMember(Name="loginAccounts", EmitDefaultValue=false)]
        public List<LoginAccount> LoginAccounts { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Authentication {\n");
            sb.Append("  ApiPassword: ").Append(ApiPassword).Append("\n");
            sb.Append("  LoginAccounts: ").Append(LoginAccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Authentication);
        }

        /// <summary>
        /// Returns true if Authentication instances are equal
        /// </summary>
        /// <param name="other">Instance of Authentication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Authentication other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApiPassword == other.ApiPassword ||
                    this.ApiPassword != null &&
                    this.ApiPassword.Equals(other.ApiPassword)
                ) && 
                (
                    this.LoginAccounts == other.LoginAccounts ||
                    this.LoginAccounts != null &&
                    this.LoginAccounts.SequenceEqual(other.LoginAccounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApiPassword != null)
                    hash = hash * 59 + this.ApiPassword.GetHashCode();
                if (this.LoginAccounts != null)
                    hash = hash * 59 + this.LoginAccounts.GetHashCode();
                return hash;
            }
        }
    }

}
