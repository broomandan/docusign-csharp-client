/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Billing plans
    /// </summary>
    [DataContract]
    public partial class BillingPlans :  IEquatable<BillingPlans>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingPlans" /> class.
        /// </summary>
        /// <param name="BillingAddress">The Billing address for the account..</param>
        /// <param name="BillingAddressIsCreditCardAddress">When set to **true**, the credit card address information is the same as that returned as the billing address. If false, then the billing address is considered a billing contact address, and the credit card address can be different..</param>
        /// <param name="BillingPlan">.</param>
        /// <param name="CreditCardInformation">A complex type that has information about the credit card used to pay for this account..</param>
        /// <param name="PaymentProcessorInformation">.</param>
        /// <param name="ReferralInformation">Contains information describing discounts and promotions..</param>
        /// <param name="SuccessorPlans">.</param>
        public BillingPlans(AccountAddress BillingAddress = null, string BillingAddressIsCreditCardAddress = null, AccountBillingPlan BillingPlan = null, CreditCardInformation CreditCardInformation = null, PaymentProcessorInformation PaymentProcessorInformation = null, ReferralInformation ReferralInformation = null, List<BillingPlan> SuccessorPlans = null)
        {
            this.BillingAddress = BillingAddress;
            this.BillingAddressIsCreditCardAddress = BillingAddressIsCreditCardAddress;
            this.BillingPlan = BillingPlan;
            this.CreditCardInformation = CreditCardInformation;
            this.PaymentProcessorInformation = PaymentProcessorInformation;
            this.ReferralInformation = ReferralInformation;
            this.SuccessorPlans = SuccessorPlans;
        }
        
        /// <summary>
        /// The Billing address for the account.
        /// </summary>
        /// <value>The Billing address for the account.</value>
        [DataMember(Name="billingAddress", EmitDefaultValue=false)]
        public AccountAddress BillingAddress { get; set; }
        /// <summary>
        /// When set to **true**, the credit card address information is the same as that returned as the billing address. If false, then the billing address is considered a billing contact address, and the credit card address can be different.
        /// </summary>
        /// <value>When set to **true**, the credit card address information is the same as that returned as the billing address. If false, then the billing address is considered a billing contact address, and the credit card address can be different.</value>
        [DataMember(Name="billingAddressIsCreditCardAddress", EmitDefaultValue=false)]
        public string BillingAddressIsCreditCardAddress { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="billingPlan", EmitDefaultValue=false)]
        public AccountBillingPlan BillingPlan { get; set; }
        /// <summary>
        /// A complex type that has information about the credit card used to pay for this account.
        /// </summary>
        /// <value>A complex type that has information about the credit card used to pay for this account.</value>
        [DataMember(Name="creditCardInformation", EmitDefaultValue=false)]
        public CreditCardInformation CreditCardInformation { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="paymentProcessorInformation", EmitDefaultValue=false)]
        public PaymentProcessorInformation PaymentProcessorInformation { get; set; }
        /// <summary>
        /// Contains information describing discounts and promotions.
        /// </summary>
        /// <value>Contains information describing discounts and promotions.</value>
        [DataMember(Name="referralInformation", EmitDefaultValue=false)]
        public ReferralInformation ReferralInformation { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="successorPlans", EmitDefaultValue=false)]
        public List<BillingPlan> SuccessorPlans { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingPlans {\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  BillingAddressIsCreditCardAddress: ").Append(BillingAddressIsCreditCardAddress).Append("\n");
            sb.Append("  BillingPlan: ").Append(BillingPlan).Append("\n");
            sb.Append("  CreditCardInformation: ").Append(CreditCardInformation).Append("\n");
            sb.Append("  PaymentProcessorInformation: ").Append(PaymentProcessorInformation).Append("\n");
            sb.Append("  ReferralInformation: ").Append(ReferralInformation).Append("\n");
            sb.Append("  SuccessorPlans: ").Append(SuccessorPlans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingPlans);
        }

        /// <summary>
        /// Returns true if BillingPlans instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingPlans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingPlans other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BillingAddress == other.BillingAddress ||
                    this.BillingAddress != null &&
                    this.BillingAddress.Equals(other.BillingAddress)
                ) && 
                (
                    this.BillingAddressIsCreditCardAddress == other.BillingAddressIsCreditCardAddress ||
                    this.BillingAddressIsCreditCardAddress != null &&
                    this.BillingAddressIsCreditCardAddress.Equals(other.BillingAddressIsCreditCardAddress)
                ) && 
                (
                    this.BillingPlan == other.BillingPlan ||
                    this.BillingPlan != null &&
                    this.BillingPlan.Equals(other.BillingPlan)
                ) && 
                (
                    this.CreditCardInformation == other.CreditCardInformation ||
                    this.CreditCardInformation != null &&
                    this.CreditCardInformation.Equals(other.CreditCardInformation)
                ) && 
                (
                    this.PaymentProcessorInformation == other.PaymentProcessorInformation ||
                    this.PaymentProcessorInformation != null &&
                    this.PaymentProcessorInformation.Equals(other.PaymentProcessorInformation)
                ) && 
                (
                    this.ReferralInformation == other.ReferralInformation ||
                    this.ReferralInformation != null &&
                    this.ReferralInformation.Equals(other.ReferralInformation)
                ) && 
                (
                    this.SuccessorPlans == other.SuccessorPlans ||
                    this.SuccessorPlans != null &&
                    this.SuccessorPlans.SequenceEqual(other.SuccessorPlans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BillingAddress != null)
                    hash = hash * 59 + this.BillingAddress.GetHashCode();
                if (this.BillingAddressIsCreditCardAddress != null)
                    hash = hash * 59 + this.BillingAddressIsCreditCardAddress.GetHashCode();
                if (this.BillingPlan != null)
                    hash = hash * 59 + this.BillingPlan.GetHashCode();
                if (this.CreditCardInformation != null)
                    hash = hash * 59 + this.CreditCardInformation.GetHashCode();
                if (this.PaymentProcessorInformation != null)
                    hash = hash * 59 + this.PaymentProcessorInformation.GetHashCode();
                if (this.ReferralInformation != null)
                    hash = hash * 59 + this.ReferralInformation.GetHashCode();
                if (this.SuccessorPlans != null)
                    hash = hash * 59 + this.SuccessorPlans.GetHashCode();
                return hash;
            }
        }
    }

}
