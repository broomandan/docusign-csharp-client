/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnvelopeDocumentTabs :  IEquatable<EnvelopeDocumentTabs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvelopeDocumentTabs" /> class.
        /// </summary>
        /// <param name="ApproveTabs">A tab that allows the recipient to approve documents without placing a signature or initials on the document. If the recipient clicks the Approve tab during the signing process, the recipient is considered to have signed the document. No information is shown on the document for the approval, but it is recorded as a signature in the envelope history. .</param>
        /// <param name="CheckboxTabs">Specifies a tag on the document in a location where the recipient can select an option..</param>
        /// <param name="CompanyTabs">Specifies a tag on the document where you want the recipient&#39;s company name to appear.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response..</param>
        /// <param name="DateSignedTabs">Specifies a tab on the document where the date the document was signed will automatically appear..</param>
        /// <param name="DateTabs">Specifies a tab on the document where you want the recipient to enter a date. Date tabs are single-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained.   If you need a particular date format enforced, DocuSign recommends using a Text tab with a Validation Pattern and Validation Message to enforce the format..</param>
        /// <param name="DeclineTabs">Specifies a tag on the document where you want to give the recipient the option of declining an envelope. If the recipient clicks the Decline tag during the signing process, the envelope is voided..</param>
        /// <param name="EmailAddressTabs">Specifies a location on the document where you want where you want the recipient&#39;s email, as entered in the recipient information, to display..</param>
        /// <param name="EmailTabs">Specifies a tag on the document where you want the recipient to enter an email. Email tags are single-line fields that accept any characters. The system checks that a valid email format (i.e. xxx@yyy.zzz) is entered in the tag. It uses the same parameters as a Text tab, with the validation message and pattern set for email information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response..</param>
        /// <param name="EnvelopeIdTabs">Specifies a tag on the document where you want the envelope ID for to appear. Recipients cannot enter or change the information in this tab, it is for informational purposes only..</param>
        /// <param name="FirstNameTabs">Specifies tag on a document where you want the recipient&#39;s first name to appear. This tag takes the recipient&#39;s name, as entered in the recipient information, splits it into sections based on spaces and uses the first section as the first name..</param>
        /// <param name="FormulaTabs">A list of formula tabs.  The value of a formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the formula tab calculates and displays the result.  The &#x60;formula&#x60; property of the tab contains the references to the underlying tabs. See [Calculated Fields][calculatedfields] in the DocuSign Support Center to learn more about formulas.  If a formula tab contains a &#x60;paymentDetails&#x60; property, the tab is considered a payment item. See [Requesting Payments Along with Signatures][paymentguide] in the DocuSign Support Center to learn more about payments.  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures .</param>
        /// <param name="FullNameTabs">Specifies a tag on the document where you want the recipient&#39;s name to appear..</param>
        /// <param name="InitialHereTabs">Specifies a tag location in the document at which a recipient will place their initials. The &#x60;optional&#x60; parameter specifies whether the initials are required or optional..</param>
        /// <param name="LastNameTabs">Specifies a tag on a document where you want the recipient&#39;s last name to appear. This tag takes the recipient&#39;s name, as entered in the recipient information, splits it into sections based on spaces and uses the last section as the last name..</param>
        /// <param name="ListTabs">Specify this tag to give your recipient a list of options, presented as a drop-down list, from which they can select..</param>
        /// <param name="NoteTabs">Specifies a location on the document where you want to place additional information, in the form of a note, for a recipient..</param>
        /// <param name="NumberTabs">Specifies a tag on the document where you want the recipient to enter a number. It uses the same parameters as a Text tab, with the validation message and pattern set for number information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response. .</param>
        /// <param name="RadioGroupTabs">Specifies a tag on the document in a location where the recipient can select one option from a group of options using a radio button. The radio buttons do not have to be on the same page in a document..</param>
        /// <param name="SignerAttachmentTabs">Specifies a tag on the document when you want the recipient to add supporting documents to an envelope..</param>
        /// <param name="SignHereTabs">A complex type the contains information about the tag that specifies where the recipient places their signature in the document. The \&quot;optional\&quot; parameter sets if the signature is required or optional. .</param>
        /// <param name="SsnTabs">Specifies a tag on the document where you want the recipient to enter a Social Security Number (SSN). A SSN can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response..</param>
        /// <param name="TextTabs">Specifies a that that is an adaptable field that allows the recipient to enter different text information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response..</param>
        /// <param name="TitleTabs">Specifies a tag on the document where you want the recipient&#39;s title to appear.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response..</param>
        /// <param name="ViewTabs">.</param>
        /// <param name="ZipTabs">Specifies a tag on the document where you want the recipient to enter a ZIP code. The ZIP code can be a five numbers or the ZIP+4 format with nine numbers. The zip code can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response..</param>
        public EnvelopeDocumentTabs(List<Approve> ApproveTabs = null, List<Checkbox> CheckboxTabs = null, List<Company> CompanyTabs = null, List<DateSigned> DateSignedTabs = null, List<DateTime?> DateTabs = null, List<Decline> DeclineTabs = null, List<EmailAddress> EmailAddressTabs = null, List<Email> EmailTabs = null, List<EnvelopeId> EnvelopeIdTabs = null, List<FirstName> FirstNameTabs = null, List<FormulaTab> FormulaTabs = null, List<FullName> FullNameTabs = null, List<InitialHere> InitialHereTabs = null, List<LastName> LastNameTabs = null, List<List> ListTabs = null, List<Note> NoteTabs = null, List<decimal?> NumberTabs = null, List<RadioGroup> RadioGroupTabs = null, List<SignerAttachment> SignerAttachmentTabs = null, List<SignHere> SignHereTabs = null, List<Ssn> SsnTabs = null, List<Text> TextTabs = null, List<Title> TitleTabs = null, List<View> ViewTabs = null, List<Zip> ZipTabs = null)
        {
            this.ApproveTabs = ApproveTabs;
            this.CheckboxTabs = CheckboxTabs;
            this.CompanyTabs = CompanyTabs;
            this.DateSignedTabs = DateSignedTabs;
            this.DateTabs = DateTabs;
            this.DeclineTabs = DeclineTabs;
            this.EmailAddressTabs = EmailAddressTabs;
            this.EmailTabs = EmailTabs;
            this.EnvelopeIdTabs = EnvelopeIdTabs;
            this.FirstNameTabs = FirstNameTabs;
            this.FormulaTabs = FormulaTabs;
            this.FullNameTabs = FullNameTabs;
            this.InitialHereTabs = InitialHereTabs;
            this.LastNameTabs = LastNameTabs;
            this.ListTabs = ListTabs;
            this.NoteTabs = NoteTabs;
            this.NumberTabs = NumberTabs;
            this.RadioGroupTabs = RadioGroupTabs;
            this.SignerAttachmentTabs = SignerAttachmentTabs;
            this.SignHereTabs = SignHereTabs;
            this.SsnTabs = SsnTabs;
            this.TextTabs = TextTabs;
            this.TitleTabs = TitleTabs;
            this.ViewTabs = ViewTabs;
            this.ZipTabs = ZipTabs;
        }
        
        /// <summary>
        /// A tab that allows the recipient to approve documents without placing a signature or initials on the document. If the recipient clicks the Approve tab during the signing process, the recipient is considered to have signed the document. No information is shown on the document for the approval, but it is recorded as a signature in the envelope history. 
        /// </summary>
        /// <value>A tab that allows the recipient to approve documents without placing a signature or initials on the document. If the recipient clicks the Approve tab during the signing process, the recipient is considered to have signed the document. No information is shown on the document for the approval, but it is recorded as a signature in the envelope history. </value>
        [DataMember(Name="approveTabs", EmitDefaultValue=false)]
        public List<Approve> ApproveTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document in a location where the recipient can select an option.
        /// </summary>
        /// <value>Specifies a tag on the document in a location where the recipient can select an option.</value>
        [DataMember(Name="checkboxTabs", EmitDefaultValue=false)]
        public List<Checkbox> CheckboxTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document where you want the recipient&#39;s company name to appear.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
        /// </summary>
        /// <value>Specifies a tag on the document where you want the recipient&#39;s company name to appear.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.</value>
        [DataMember(Name="companyTabs", EmitDefaultValue=false)]
        public List<Company> CompanyTabs { get; set; }
        /// <summary>
        /// Specifies a tab on the document where the date the document was signed will automatically appear.
        /// </summary>
        /// <value>Specifies a tab on the document where the date the document was signed will automatically appear.</value>
        [DataMember(Name="dateSignedTabs", EmitDefaultValue=false)]
        public List<DateSigned> DateSignedTabs { get; set; }
        /// <summary>
        /// Specifies a tab on the document where you want the recipient to enter a date. Date tabs are single-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained.   If you need a particular date format enforced, DocuSign recommends using a Text tab with a Validation Pattern and Validation Message to enforce the format.
        /// </summary>
        /// <value>Specifies a tab on the document where you want the recipient to enter a date. Date tabs are single-line fields that allow date information to be entered in any format. The tooltip for this tab recommends entering the date as MM/DD/YYYY, but this is not enforced. The format entered by the signer is retained.   If you need a particular date format enforced, DocuSign recommends using a Text tab with a Validation Pattern and Validation Message to enforce the format.</value>
        [DataMember(Name="dateTabs", EmitDefaultValue=false)]
        public List<DateTime?> DateTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document where you want to give the recipient the option of declining an envelope. If the recipient clicks the Decline tag during the signing process, the envelope is voided.
        /// </summary>
        /// <value>Specifies a tag on the document where you want to give the recipient the option of declining an envelope. If the recipient clicks the Decline tag during the signing process, the envelope is voided.</value>
        [DataMember(Name="declineTabs", EmitDefaultValue=false)]
        public List<Decline> DeclineTabs { get; set; }
        /// <summary>
        /// Specifies a location on the document where you want where you want the recipient&#39;s email, as entered in the recipient information, to display.
        /// </summary>
        /// <value>Specifies a location on the document where you want where you want the recipient&#39;s email, as entered in the recipient information, to display.</value>
        [DataMember(Name="emailAddressTabs", EmitDefaultValue=false)]
        public List<EmailAddress> EmailAddressTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document where you want the recipient to enter an email. Email tags are single-line fields that accept any characters. The system checks that a valid email format (i.e. xxx@yyy.zzz) is entered in the tag. It uses the same parameters as a Text tab, with the validation message and pattern set for email information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
        /// </summary>
        /// <value>Specifies a tag on the document where you want the recipient to enter an email. Email tags are single-line fields that accept any characters. The system checks that a valid email format (i.e. xxx@yyy.zzz) is entered in the tag. It uses the same parameters as a Text tab, with the validation message and pattern set for email information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.</value>
        [DataMember(Name="emailTabs", EmitDefaultValue=false)]
        public List<Email> EmailTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document where you want the envelope ID for to appear. Recipients cannot enter or change the information in this tab, it is for informational purposes only.
        /// </summary>
        /// <value>Specifies a tag on the document where you want the envelope ID for to appear. Recipients cannot enter or change the information in this tab, it is for informational purposes only.</value>
        [DataMember(Name="envelopeIdTabs", EmitDefaultValue=false)]
        public List<EnvelopeId> EnvelopeIdTabs { get; set; }
        /// <summary>
        /// Specifies tag on a document where you want the recipient&#39;s first name to appear. This tag takes the recipient&#39;s name, as entered in the recipient information, splits it into sections based on spaces and uses the first section as the first name.
        /// </summary>
        /// <value>Specifies tag on a document where you want the recipient&#39;s first name to appear. This tag takes the recipient&#39;s name, as entered in the recipient information, splits it into sections based on spaces and uses the first section as the first name.</value>
        [DataMember(Name="firstNameTabs", EmitDefaultValue=false)]
        public List<FirstName> FirstNameTabs { get; set; }
        /// <summary>
        /// A list of formula tabs.  The value of a formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the formula tab calculates and displays the result.  The &#x60;formula&#x60; property of the tab contains the references to the underlying tabs. See [Calculated Fields][calculatedfields] in the DocuSign Support Center to learn more about formulas.  If a formula tab contains a &#x60;paymentDetails&#x60; property, the tab is considered a payment item. See [Requesting Payments Along with Signatures][paymentguide] in the DocuSign Support Center to learn more about payments.  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures 
        /// </summary>
        /// <value>A list of formula tabs.  The value of a formula tab is calculated from the values of other number or date tabs in the document. When the recipient completes the underlying fields, the formula tab calculates and displays the result.  The &#x60;formula&#x60; property of the tab contains the references to the underlying tabs. See [Calculated Fields][calculatedfields] in the DocuSign Support Center to learn more about formulas.  If a formula tab contains a &#x60;paymentDetails&#x60; property, the tab is considered a payment item. See [Requesting Payments Along with Signatures][paymentguide] in the DocuSign Support Center to learn more about payments.  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures </value>
        [DataMember(Name="formulaTabs", EmitDefaultValue=false)]
        public List<FormulaTab> FormulaTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document where you want the recipient&#39;s name to appear.
        /// </summary>
        /// <value>Specifies a tag on the document where you want the recipient&#39;s name to appear.</value>
        [DataMember(Name="fullNameTabs", EmitDefaultValue=false)]
        public List<FullName> FullNameTabs { get; set; }
        /// <summary>
        /// Specifies a tag location in the document at which a recipient will place their initials. The &#x60;optional&#x60; parameter specifies whether the initials are required or optional.
        /// </summary>
        /// <value>Specifies a tag location in the document at which a recipient will place their initials. The &#x60;optional&#x60; parameter specifies whether the initials are required or optional.</value>
        [DataMember(Name="initialHereTabs", EmitDefaultValue=false)]
        public List<InitialHere> InitialHereTabs { get; set; }
        /// <summary>
        /// Specifies a tag on a document where you want the recipient&#39;s last name to appear. This tag takes the recipient&#39;s name, as entered in the recipient information, splits it into sections based on spaces and uses the last section as the last name.
        /// </summary>
        /// <value>Specifies a tag on a document where you want the recipient&#39;s last name to appear. This tag takes the recipient&#39;s name, as entered in the recipient information, splits it into sections based on spaces and uses the last section as the last name.</value>
        [DataMember(Name="lastNameTabs", EmitDefaultValue=false)]
        public List<LastName> LastNameTabs { get; set; }
        /// <summary>
        /// Specify this tag to give your recipient a list of options, presented as a drop-down list, from which they can select.
        /// </summary>
        /// <value>Specify this tag to give your recipient a list of options, presented as a drop-down list, from which they can select.</value>
        [DataMember(Name="listTabs", EmitDefaultValue=false)]
        public List<List> ListTabs { get; set; }
        /// <summary>
        /// Specifies a location on the document where you want to place additional information, in the form of a note, for a recipient.
        /// </summary>
        /// <value>Specifies a location on the document where you want to place additional information, in the form of a note, for a recipient.</value>
        [DataMember(Name="noteTabs", EmitDefaultValue=false)]
        public List<Note> NoteTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document where you want the recipient to enter a number. It uses the same parameters as a Text tab, with the validation message and pattern set for number information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response. 
        /// </summary>
        /// <value>Specifies a tag on the document where you want the recipient to enter a number. It uses the same parameters as a Text tab, with the validation message and pattern set for number information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response. </value>
        [DataMember(Name="numberTabs", EmitDefaultValue=false)]
        public List<decimal?> NumberTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document in a location where the recipient can select one option from a group of options using a radio button. The radio buttons do not have to be on the same page in a document.
        /// </summary>
        /// <value>Specifies a tag on the document in a location where the recipient can select one option from a group of options using a radio button. The radio buttons do not have to be on the same page in a document.</value>
        [DataMember(Name="radioGroupTabs", EmitDefaultValue=false)]
        public List<RadioGroup> RadioGroupTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document when you want the recipient to add supporting documents to an envelope.
        /// </summary>
        /// <value>Specifies a tag on the document when you want the recipient to add supporting documents to an envelope.</value>
        [DataMember(Name="signerAttachmentTabs", EmitDefaultValue=false)]
        public List<SignerAttachment> SignerAttachmentTabs { get; set; }
        /// <summary>
        /// A complex type the contains information about the tag that specifies where the recipient places their signature in the document. The \&quot;optional\&quot; parameter sets if the signature is required or optional. 
        /// </summary>
        /// <value>A complex type the contains information about the tag that specifies where the recipient places their signature in the document. The \&quot;optional\&quot; parameter sets if the signature is required or optional. </value>
        [DataMember(Name="signHereTabs", EmitDefaultValue=false)]
        public List<SignHere> SignHereTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document where you want the recipient to enter a Social Security Number (SSN). A SSN can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
        /// </summary>
        /// <value>Specifies a tag on the document where you want the recipient to enter a Social Security Number (SSN). A SSN can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for SSN information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.</value>
        [DataMember(Name="ssnTabs", EmitDefaultValue=false)]
        public List<Ssn> SsnTabs { get; set; }
        /// <summary>
        /// Specifies a that that is an adaptable field that allows the recipient to enter different text information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
        /// </summary>
        /// <value>Specifies a that that is an adaptable field that allows the recipient to enter different text information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.</value>
        [DataMember(Name="textTabs", EmitDefaultValue=false)]
        public List<Text> TextTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document where you want the recipient&#39;s title to appear.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
        /// </summary>
        /// <value>Specifies a tag on the document where you want the recipient&#39;s title to appear.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.</value>
        [DataMember(Name="titleTabs", EmitDefaultValue=false)]
        public List<Title> TitleTabs { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="viewTabs", EmitDefaultValue=false)]
        public List<View> ViewTabs { get; set; }
        /// <summary>
        /// Specifies a tag on the document where you want the recipient to enter a ZIP code. The ZIP code can be a five numbers or the ZIP+4 format with nine numbers. The zip code can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.
        /// </summary>
        /// <value>Specifies a tag on the document where you want the recipient to enter a ZIP code. The ZIP code can be a five numbers or the ZIP+4 format with nine numbers. The zip code can be typed with or without dashes. It uses the same parameters as a Text tab, with the validation message and pattern set for ZIP code information.  When getting information that includes this tab type, the original value of the tab when the associated envelope was sent is included in the response.</value>
        [DataMember(Name="zipTabs", EmitDefaultValue=false)]
        public List<Zip> ZipTabs { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvelopeDocumentTabs {\n");
            sb.Append("  ApproveTabs: ").Append(ApproveTabs).Append("\n");
            sb.Append("  CheckboxTabs: ").Append(CheckboxTabs).Append("\n");
            sb.Append("  CompanyTabs: ").Append(CompanyTabs).Append("\n");
            sb.Append("  DateSignedTabs: ").Append(DateSignedTabs).Append("\n");
            sb.Append("  DateTabs: ").Append(DateTabs).Append("\n");
            sb.Append("  DeclineTabs: ").Append(DeclineTabs).Append("\n");
            sb.Append("  EmailAddressTabs: ").Append(EmailAddressTabs).Append("\n");
            sb.Append("  EmailTabs: ").Append(EmailTabs).Append("\n");
            sb.Append("  EnvelopeIdTabs: ").Append(EnvelopeIdTabs).Append("\n");
            sb.Append("  FirstNameTabs: ").Append(FirstNameTabs).Append("\n");
            sb.Append("  FormulaTabs: ").Append(FormulaTabs).Append("\n");
            sb.Append("  FullNameTabs: ").Append(FullNameTabs).Append("\n");
            sb.Append("  InitialHereTabs: ").Append(InitialHereTabs).Append("\n");
            sb.Append("  LastNameTabs: ").Append(LastNameTabs).Append("\n");
            sb.Append("  ListTabs: ").Append(ListTabs).Append("\n");
            sb.Append("  NoteTabs: ").Append(NoteTabs).Append("\n");
            sb.Append("  NumberTabs: ").Append(NumberTabs).Append("\n");
            sb.Append("  RadioGroupTabs: ").Append(RadioGroupTabs).Append("\n");
            sb.Append("  SignerAttachmentTabs: ").Append(SignerAttachmentTabs).Append("\n");
            sb.Append("  SignHereTabs: ").Append(SignHereTabs).Append("\n");
            sb.Append("  SsnTabs: ").Append(SsnTabs).Append("\n");
            sb.Append("  TextTabs: ").Append(TextTabs).Append("\n");
            sb.Append("  TitleTabs: ").Append(TitleTabs).Append("\n");
            sb.Append("  ViewTabs: ").Append(ViewTabs).Append("\n");
            sb.Append("  ZipTabs: ").Append(ZipTabs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnvelopeDocumentTabs);
        }

        /// <summary>
        /// Returns true if EnvelopeDocumentTabs instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvelopeDocumentTabs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvelopeDocumentTabs other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApproveTabs == other.ApproveTabs ||
                    this.ApproveTabs != null &&
                    this.ApproveTabs.SequenceEqual(other.ApproveTabs)
                ) && 
                (
                    this.CheckboxTabs == other.CheckboxTabs ||
                    this.CheckboxTabs != null &&
                    this.CheckboxTabs.SequenceEqual(other.CheckboxTabs)
                ) && 
                (
                    this.CompanyTabs == other.CompanyTabs ||
                    this.CompanyTabs != null &&
                    this.CompanyTabs.SequenceEqual(other.CompanyTabs)
                ) && 
                (
                    this.DateSignedTabs == other.DateSignedTabs ||
                    this.DateSignedTabs != null &&
                    this.DateSignedTabs.SequenceEqual(other.DateSignedTabs)
                ) && 
                (
                    this.DateTabs == other.DateTabs ||
                    this.DateTabs != null &&
                    this.DateTabs.SequenceEqual(other.DateTabs)
                ) && 
                (
                    this.DeclineTabs == other.DeclineTabs ||
                    this.DeclineTabs != null &&
                    this.DeclineTabs.SequenceEqual(other.DeclineTabs)
                ) && 
                (
                    this.EmailAddressTabs == other.EmailAddressTabs ||
                    this.EmailAddressTabs != null &&
                    this.EmailAddressTabs.SequenceEqual(other.EmailAddressTabs)
                ) && 
                (
                    this.EmailTabs == other.EmailTabs ||
                    this.EmailTabs != null &&
                    this.EmailTabs.SequenceEqual(other.EmailTabs)
                ) && 
                (
                    this.EnvelopeIdTabs == other.EnvelopeIdTabs ||
                    this.EnvelopeIdTabs != null &&
                    this.EnvelopeIdTabs.SequenceEqual(other.EnvelopeIdTabs)
                ) && 
                (
                    this.FirstNameTabs == other.FirstNameTabs ||
                    this.FirstNameTabs != null &&
                    this.FirstNameTabs.SequenceEqual(other.FirstNameTabs)
                ) && 
                (
                    this.FormulaTabs == other.FormulaTabs ||
                    this.FormulaTabs != null &&
                    this.FormulaTabs.SequenceEqual(other.FormulaTabs)
                ) && 
                (
                    this.FullNameTabs == other.FullNameTabs ||
                    this.FullNameTabs != null &&
                    this.FullNameTabs.SequenceEqual(other.FullNameTabs)
                ) && 
                (
                    this.InitialHereTabs == other.InitialHereTabs ||
                    this.InitialHereTabs != null &&
                    this.InitialHereTabs.SequenceEqual(other.InitialHereTabs)
                ) && 
                (
                    this.LastNameTabs == other.LastNameTabs ||
                    this.LastNameTabs != null &&
                    this.LastNameTabs.SequenceEqual(other.LastNameTabs)
                ) && 
                (
                    this.ListTabs == other.ListTabs ||
                    this.ListTabs != null &&
                    this.ListTabs.SequenceEqual(other.ListTabs)
                ) && 
                (
                    this.NoteTabs == other.NoteTabs ||
                    this.NoteTabs != null &&
                    this.NoteTabs.SequenceEqual(other.NoteTabs)
                ) && 
                (
                    this.NumberTabs == other.NumberTabs ||
                    this.NumberTabs != null &&
                    this.NumberTabs.SequenceEqual(other.NumberTabs)
                ) && 
                (
                    this.RadioGroupTabs == other.RadioGroupTabs ||
                    this.RadioGroupTabs != null &&
                    this.RadioGroupTabs.SequenceEqual(other.RadioGroupTabs)
                ) && 
                (
                    this.SignerAttachmentTabs == other.SignerAttachmentTabs ||
                    this.SignerAttachmentTabs != null &&
                    this.SignerAttachmentTabs.SequenceEqual(other.SignerAttachmentTabs)
                ) && 
                (
                    this.SignHereTabs == other.SignHereTabs ||
                    this.SignHereTabs != null &&
                    this.SignHereTabs.SequenceEqual(other.SignHereTabs)
                ) && 
                (
                    this.SsnTabs == other.SsnTabs ||
                    this.SsnTabs != null &&
                    this.SsnTabs.SequenceEqual(other.SsnTabs)
                ) && 
                (
                    this.TextTabs == other.TextTabs ||
                    this.TextTabs != null &&
                    this.TextTabs.SequenceEqual(other.TextTabs)
                ) && 
                (
                    this.TitleTabs == other.TitleTabs ||
                    this.TitleTabs != null &&
                    this.TitleTabs.SequenceEqual(other.TitleTabs)
                ) && 
                (
                    this.ViewTabs == other.ViewTabs ||
                    this.ViewTabs != null &&
                    this.ViewTabs.SequenceEqual(other.ViewTabs)
                ) && 
                (
                    this.ZipTabs == other.ZipTabs ||
                    this.ZipTabs != null &&
                    this.ZipTabs.SequenceEqual(other.ZipTabs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApproveTabs != null)
                    hash = hash * 59 + this.ApproveTabs.GetHashCode();
                if (this.CheckboxTabs != null)
                    hash = hash * 59 + this.CheckboxTabs.GetHashCode();
                if (this.CompanyTabs != null)
                    hash = hash * 59 + this.CompanyTabs.GetHashCode();
                if (this.DateSignedTabs != null)
                    hash = hash * 59 + this.DateSignedTabs.GetHashCode();
                if (this.DateTabs != null)
                    hash = hash * 59 + this.DateTabs.GetHashCode();
                if (this.DeclineTabs != null)
                    hash = hash * 59 + this.DeclineTabs.GetHashCode();
                if (this.EmailAddressTabs != null)
                    hash = hash * 59 + this.EmailAddressTabs.GetHashCode();
                if (this.EmailTabs != null)
                    hash = hash * 59 + this.EmailTabs.GetHashCode();
                if (this.EnvelopeIdTabs != null)
                    hash = hash * 59 + this.EnvelopeIdTabs.GetHashCode();
                if (this.FirstNameTabs != null)
                    hash = hash * 59 + this.FirstNameTabs.GetHashCode();
                if (this.FormulaTabs != null)
                    hash = hash * 59 + this.FormulaTabs.GetHashCode();
                if (this.FullNameTabs != null)
                    hash = hash * 59 + this.FullNameTabs.GetHashCode();
                if (this.InitialHereTabs != null)
                    hash = hash * 59 + this.InitialHereTabs.GetHashCode();
                if (this.LastNameTabs != null)
                    hash = hash * 59 + this.LastNameTabs.GetHashCode();
                if (this.ListTabs != null)
                    hash = hash * 59 + this.ListTabs.GetHashCode();
                if (this.NoteTabs != null)
                    hash = hash * 59 + this.NoteTabs.GetHashCode();
                if (this.NumberTabs != null)
                    hash = hash * 59 + this.NumberTabs.GetHashCode();
                if (this.RadioGroupTabs != null)
                    hash = hash * 59 + this.RadioGroupTabs.GetHashCode();
                if (this.SignerAttachmentTabs != null)
                    hash = hash * 59 + this.SignerAttachmentTabs.GetHashCode();
                if (this.SignHereTabs != null)
                    hash = hash * 59 + this.SignHereTabs.GetHashCode();
                if (this.SsnTabs != null)
                    hash = hash * 59 + this.SsnTabs.GetHashCode();
                if (this.TextTabs != null)
                    hash = hash * 59 + this.TextTabs.GetHashCode();
                if (this.TitleTabs != null)
                    hash = hash * 59 + this.TitleTabs.GetHashCode();
                if (this.ViewTabs != null)
                    hash = hash * 59 + this.ViewTabs.GetHashCode();
                if (this.ZipTabs != null)
                    hash = hash * 59 + this.ZipTabs.GetHashCode();
                return hash;
            }
        }
    }

}
