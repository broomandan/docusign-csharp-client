/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserSettingsInformation :  IEquatable<UserSettingsInformation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSettingsInformation" /> class.
        /// </summary>
        /// <param name="AccountManagementGranular">.</param>
        /// <param name="SenderEmailNotifications">  An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true, the user will receive those types of email notifications from DocuSign.   The user inherits the default account sender email notification settings when the user is created. The email notifications are:  * envelopeComplete * changedSigner  * senderEnvelopeDeclined  * withdrawnConsent  * recipientViewed  * deliveryFailed   .</param>
        /// <param name="SignerEmailNotifications">An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created..</param>
        /// <param name="UserSettings">.</param>
        public UserSettingsInformation(UserAccountManagementGranularInformation AccountManagementGranular = null, SenderEmailNotifications SenderEmailNotifications = null, SignerEmailNotifications SignerEmailNotifications = null, List<NameValue> UserSettings = null)
        {
            this.AccountManagementGranular = AccountManagementGranular;
            this.SenderEmailNotifications = SenderEmailNotifications;
            this.SignerEmailNotifications = SignerEmailNotifications;
            this.UserSettings = UserSettings;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="accountManagementGranular", EmitDefaultValue=false)]
        public UserAccountManagementGranularInformation AccountManagementGranular { get; set; }
        /// <summary>
        ///   An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true, the user will receive those types of email notifications from DocuSign.   The user inherits the default account sender email notification settings when the user is created. The email notifications are:  * envelopeComplete * changedSigner  * senderEnvelopeDeclined  * withdrawnConsent  * recipientViewed  * deliveryFailed   
        /// </summary>
        /// <value>  An array of email notifications that sets the email the user receives when they are a sender. When the specific email notification is set to true, the user will receive those types of email notifications from DocuSign.   The user inherits the default account sender email notification settings when the user is created. The email notifications are:  * envelopeComplete * changedSigner  * senderEnvelopeDeclined  * withdrawnConsent  * recipientViewed  * deliveryFailed   </value>
        [DataMember(Name="senderEmailNotifications", EmitDefaultValue=false)]
        public SenderEmailNotifications SenderEmailNotifications { get; set; }
        /// <summary>
        /// An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
        /// </summary>
        /// <value>An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.</value>
        [DataMember(Name="signerEmailNotifications", EmitDefaultValue=false)]
        public SignerEmailNotifications SignerEmailNotifications { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="userSettings", EmitDefaultValue=false)]
        public List<NameValue> UserSettings { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserSettingsInformation {\n");
            sb.Append("  AccountManagementGranular: ").Append(AccountManagementGranular).Append("\n");
            sb.Append("  SenderEmailNotifications: ").Append(SenderEmailNotifications).Append("\n");
            sb.Append("  SignerEmailNotifications: ").Append(SignerEmailNotifications).Append("\n");
            sb.Append("  UserSettings: ").Append(UserSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserSettingsInformation);
        }

        /// <summary>
        /// Returns true if UserSettingsInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of UserSettingsInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSettingsInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountManagementGranular == other.AccountManagementGranular ||
                    this.AccountManagementGranular != null &&
                    this.AccountManagementGranular.Equals(other.AccountManagementGranular)
                ) && 
                (
                    this.SenderEmailNotifications == other.SenderEmailNotifications ||
                    this.SenderEmailNotifications != null &&
                    this.SenderEmailNotifications.Equals(other.SenderEmailNotifications)
                ) && 
                (
                    this.SignerEmailNotifications == other.SignerEmailNotifications ||
                    this.SignerEmailNotifications != null &&
                    this.SignerEmailNotifications.Equals(other.SignerEmailNotifications)
                ) && 
                (
                    this.UserSettings == other.UserSettings ||
                    this.UserSettings != null &&
                    this.UserSettings.SequenceEqual(other.UserSettings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountManagementGranular != null)
                    hash = hash * 59 + this.AccountManagementGranular.GetHashCode();
                if (this.SenderEmailNotifications != null)
                    hash = hash * 59 + this.SenderEmailNotifications.GetHashCode();
                if (this.SignerEmailNotifications != null)
                    hash = hash * 59 + this.SignerEmailNotifications.GetHashCode();
                if (this.UserSettings != null)
                    hash = hash * 59 + this.UserSettings.GetHashCode();
                return hash;
            }
        }
    }

}
