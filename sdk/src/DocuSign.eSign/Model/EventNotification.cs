/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// Register a webhook for the envelope
    /// </summary>
    [DataContract]
    public partial class EventNotification :  IEquatable<EventNotification>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventNotification" /> class.
        /// </summary>
        /// <param name="EnvelopeEvents">A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the &#x60;url&#x60; property.   To receive notifications, you must include either an &#x60;envelopeEvents&#x60; node or a &#x60;recipientEvents&#x60; node. You do not need to specify both..</param>
        /// <param name="IncludeCertificateOfCompletion">When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes. .</param>
        /// <param name="IncludeCertificateWithSoap">When set to **true**, the Connect service will send the DocuSign signedby certificate as part of the SOAP xml. The certificate is included in the XML message as &#x60;wsse:BinarySecurityToken&#x60;..</param>
        /// <param name="IncludeDocumentFields">When set to **true**, the Document Fields associated with the envelope&#39;s documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. .</param>
        /// <param name="IncludeDocuments">When set to **true**, the XML webhook messages will include the envelope&#39;s PDF documents. Including the PDF documents will greatly increase the size of the notification messages. Ensure that your listener can handle incoming messages that are 25MB or larger. .</param>
        /// <param name="IncludeEnvelopeVoidReason">When set to **true**, if the envelope is voided, the Connect Service notification will include the void reason, as entered by the person that voided the envelope. .</param>
        /// <param name="IncludeSenderAccountAsCustomField">When set to **true**, Connect will include the sender account as Custom Field in the data..</param>
        /// <param name="IncludeTimeZone">When set to **true**, the envelope&#39;s time zone information is included in the webhook messages. .</param>
        /// <param name="LoggingEnabled">When set to **true**, the webhook messages are logged. They can be viewed on the DocuSign Administration Web Tool in the Connect section. Logged messages can also be downloaded via the [ConnectEvents resource](../../../Connect/ConnectEvents/).</param>
        /// <param name="RecipientEvents">An array of recipient event statuses that will trigger Connect to send notifications to your webhook listener at the url endpoint specified in the &#x60;url&#x60; property.   To receive notifications, you must include either an &#x60;envelopeEvents&#x60; node or a &#x60;recipientEvents&#x60; node. You do not need to specify both..</param>
        /// <param name="RequireAcknowledgment">When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures. .</param>
        /// <param name="SignMessageWithX509Cert">When set to **true**, notification messages are digitally signed with an [X509 certificate](https://trust.docusign.com/en-us/trust-certifications/docusign-public-certificates/). .</param>
        /// <param name="SoapNameSpace">The namespace of the SOAP interface.  The namespace value must be set if useSoapInterface is set to true..</param>
        /// <param name="Url">The endpoint to which webhook notification messages are sent via an HTTP/S POST request. For the DocuSign production platform, the url must start with https. For the demo platform, either http or https is ok..</param>
        /// <param name="UseSoapInterface">When set to **true**, the notifications are sent to your endpoint as SOAP requests. .</param>
        public EventNotification(List<EnvelopeEvent> EnvelopeEvents = null, string IncludeCertificateOfCompletion = null, string IncludeCertificateWithSoap = null, string IncludeDocumentFields = null, string IncludeDocuments = null, string IncludeEnvelopeVoidReason = null, string IncludeSenderAccountAsCustomField = null, string IncludeTimeZone = null, string LoggingEnabled = null, List<RecipientEvent> RecipientEvents = null, string RequireAcknowledgment = null, string SignMessageWithX509Cert = null, string SoapNameSpace = null, string Url = null, string UseSoapInterface = null)
        {
            this.EnvelopeEvents = EnvelopeEvents;
            this.IncludeCertificateOfCompletion = IncludeCertificateOfCompletion;
            this.IncludeCertificateWithSoap = IncludeCertificateWithSoap;
            this.IncludeDocumentFields = IncludeDocumentFields;
            this.IncludeDocuments = IncludeDocuments;
            this.IncludeEnvelopeVoidReason = IncludeEnvelopeVoidReason;
            this.IncludeSenderAccountAsCustomField = IncludeSenderAccountAsCustomField;
            this.IncludeTimeZone = IncludeTimeZone;
            this.LoggingEnabled = LoggingEnabled;
            this.RecipientEvents = RecipientEvents;
            this.RequireAcknowledgment = RequireAcknowledgment;
            this.SignMessageWithX509Cert = SignMessageWithX509Cert;
            this.SoapNameSpace = SoapNameSpace;
            this.Url = Url;
            this.UseSoapInterface = UseSoapInterface;
        }
        
        /// <summary>
        /// A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the &#x60;url&#x60; property.   To receive notifications, you must include either an &#x60;envelopeEvents&#x60; node or a &#x60;recipientEvents&#x60; node. You do not need to specify both.
        /// </summary>
        /// <value>A list of envelope-level event statuses that will trigger Connect to send updates to the endpoint specified in the &#x60;url&#x60; property.   To receive notifications, you must include either an &#x60;envelopeEvents&#x60; node or a &#x60;recipientEvents&#x60; node. You do not need to specify both.</value>
        [DataMember(Name="envelopeEvents", EmitDefaultValue=false)]
        public List<EnvelopeEvent> EnvelopeEvents { get; set; }
        /// <summary>
        /// When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes. 
        /// </summary>
        /// <value>When set to **true**, the Connect Service includes the Certificate of Completion with completed envelopes. </value>
        [DataMember(Name="includeCertificateOfCompletion", EmitDefaultValue=false)]
        public string IncludeCertificateOfCompletion { get; set; }
        /// <summary>
        /// When set to **true**, the Connect service will send the DocuSign signedby certificate as part of the SOAP xml. The certificate is included in the XML message as &#x60;wsse:BinarySecurityToken&#x60;.
        /// </summary>
        /// <value>When set to **true**, the Connect service will send the DocuSign signedby certificate as part of the SOAP xml. The certificate is included in the XML message as &#x60;wsse:BinarySecurityToken&#x60;.</value>
        [DataMember(Name="includeCertificateWithSoap", EmitDefaultValue=false)]
        public string IncludeCertificateWithSoap { get; set; }
        /// <summary>
        /// When set to **true**, the Document Fields associated with the envelope&#39;s documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. 
        /// </summary>
        /// <value>When set to **true**, the Document Fields associated with the envelope&#39;s documents are included in the notification messages. Document Fields are optional custom name-value pairs added to documents using the API. </value>
        [DataMember(Name="includeDocumentFields", EmitDefaultValue=false)]
        public string IncludeDocumentFields { get; set; }
        /// <summary>
        /// When set to **true**, the XML webhook messages will include the envelope&#39;s PDF documents. Including the PDF documents will greatly increase the size of the notification messages. Ensure that your listener can handle incoming messages that are 25MB or larger. 
        /// </summary>
        /// <value>When set to **true**, the XML webhook messages will include the envelope&#39;s PDF documents. Including the PDF documents will greatly increase the size of the notification messages. Ensure that your listener can handle incoming messages that are 25MB or larger. </value>
        [DataMember(Name="includeDocuments", EmitDefaultValue=false)]
        public string IncludeDocuments { get; set; }
        /// <summary>
        /// When set to **true**, if the envelope is voided, the Connect Service notification will include the void reason, as entered by the person that voided the envelope. 
        /// </summary>
        /// <value>When set to **true**, if the envelope is voided, the Connect Service notification will include the void reason, as entered by the person that voided the envelope. </value>
        [DataMember(Name="includeEnvelopeVoidReason", EmitDefaultValue=false)]
        public string IncludeEnvelopeVoidReason { get; set; }
        /// <summary>
        /// When set to **true**, Connect will include the sender account as Custom Field in the data.
        /// </summary>
        /// <value>When set to **true**, Connect will include the sender account as Custom Field in the data.</value>
        [DataMember(Name="includeSenderAccountAsCustomField", EmitDefaultValue=false)]
        public string IncludeSenderAccountAsCustomField { get; set; }
        /// <summary>
        /// When set to **true**, the envelope&#39;s time zone information is included in the webhook messages. 
        /// </summary>
        /// <value>When set to **true**, the envelope&#39;s time zone information is included in the webhook messages. </value>
        [DataMember(Name="includeTimeZone", EmitDefaultValue=false)]
        public string IncludeTimeZone { get; set; }
        /// <summary>
        /// When set to **true**, the webhook messages are logged. They can be viewed on the DocuSign Administration Web Tool in the Connect section. Logged messages can also be downloaded via the [ConnectEvents resource](../../../Connect/ConnectEvents/)
        /// </summary>
        /// <value>When set to **true**, the webhook messages are logged. They can be viewed on the DocuSign Administration Web Tool in the Connect section. Logged messages can also be downloaded via the [ConnectEvents resource](../../../Connect/ConnectEvents/)</value>
        [DataMember(Name="loggingEnabled", EmitDefaultValue=false)]
        public string LoggingEnabled { get; set; }
        /// <summary>
        /// An array of recipient event statuses that will trigger Connect to send notifications to your webhook listener at the url endpoint specified in the &#x60;url&#x60; property.   To receive notifications, you must include either an &#x60;envelopeEvents&#x60; node or a &#x60;recipientEvents&#x60; node. You do not need to specify both.
        /// </summary>
        /// <value>An array of recipient event statuses that will trigger Connect to send notifications to your webhook listener at the url endpoint specified in the &#x60;url&#x60; property.   To receive notifications, you must include either an &#x60;envelopeEvents&#x60; node or a &#x60;recipientEvents&#x60; node. You do not need to specify both.</value>
        [DataMember(Name="recipientEvents", EmitDefaultValue=false)]
        public List<RecipientEvent> RecipientEvents { get; set; }
        /// <summary>
        /// When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures. 
        /// </summary>
        /// <value>When set to **true**, the DocuSign Connect service checks that the message was received and retries on failures. </value>
        [DataMember(Name="requireAcknowledgment", EmitDefaultValue=false)]
        public string RequireAcknowledgment { get; set; }
        /// <summary>
        /// When set to **true**, notification messages are digitally signed with an [X509 certificate](https://trust.docusign.com/en-us/trust-certifications/docusign-public-certificates/). 
        /// </summary>
        /// <value>When set to **true**, notification messages are digitally signed with an [X509 certificate](https://trust.docusign.com/en-us/trust-certifications/docusign-public-certificates/). </value>
        [DataMember(Name="signMessageWithX509Cert", EmitDefaultValue=false)]
        public string SignMessageWithX509Cert { get; set; }
        /// <summary>
        /// The namespace of the SOAP interface.  The namespace value must be set if useSoapInterface is set to true.
        /// </summary>
        /// <value>The namespace of the SOAP interface.  The namespace value must be set if useSoapInterface is set to true.</value>
        [DataMember(Name="soapNameSpace", EmitDefaultValue=false)]
        public string SoapNameSpace { get; set; }
        /// <summary>
        /// The endpoint to which webhook notification messages are sent via an HTTP/S POST request. For the DocuSign production platform, the url must start with https. For the demo platform, either http or https is ok.
        /// </summary>
        /// <value>The endpoint to which webhook notification messages are sent via an HTTP/S POST request. For the DocuSign production platform, the url must start with https. For the demo platform, either http or https is ok.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// When set to **true**, the notifications are sent to your endpoint as SOAP requests. 
        /// </summary>
        /// <value>When set to **true**, the notifications are sent to your endpoint as SOAP requests. </value>
        [DataMember(Name="useSoapInterface", EmitDefaultValue=false)]
        public string UseSoapInterface { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventNotification {\n");
            sb.Append("  EnvelopeEvents: ").Append(EnvelopeEvents).Append("\n");
            sb.Append("  IncludeCertificateOfCompletion: ").Append(IncludeCertificateOfCompletion).Append("\n");
            sb.Append("  IncludeCertificateWithSoap: ").Append(IncludeCertificateWithSoap).Append("\n");
            sb.Append("  IncludeDocumentFields: ").Append(IncludeDocumentFields).Append("\n");
            sb.Append("  IncludeDocuments: ").Append(IncludeDocuments).Append("\n");
            sb.Append("  IncludeEnvelopeVoidReason: ").Append(IncludeEnvelopeVoidReason).Append("\n");
            sb.Append("  IncludeSenderAccountAsCustomField: ").Append(IncludeSenderAccountAsCustomField).Append("\n");
            sb.Append("  IncludeTimeZone: ").Append(IncludeTimeZone).Append("\n");
            sb.Append("  LoggingEnabled: ").Append(LoggingEnabled).Append("\n");
            sb.Append("  RecipientEvents: ").Append(RecipientEvents).Append("\n");
            sb.Append("  RequireAcknowledgment: ").Append(RequireAcknowledgment).Append("\n");
            sb.Append("  SignMessageWithX509Cert: ").Append(SignMessageWithX509Cert).Append("\n");
            sb.Append("  SoapNameSpace: ").Append(SoapNameSpace).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UseSoapInterface: ").Append(UseSoapInterface).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EventNotification);
        }

        /// <summary>
        /// Returns true if EventNotification instances are equal
        /// </summary>
        /// <param name="other">Instance of EventNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventNotification other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EnvelopeEvents == other.EnvelopeEvents ||
                    this.EnvelopeEvents != null &&
                    this.EnvelopeEvents.SequenceEqual(other.EnvelopeEvents)
                ) && 
                (
                    this.IncludeCertificateOfCompletion == other.IncludeCertificateOfCompletion ||
                    this.IncludeCertificateOfCompletion != null &&
                    this.IncludeCertificateOfCompletion.Equals(other.IncludeCertificateOfCompletion)
                ) && 
                (
                    this.IncludeCertificateWithSoap == other.IncludeCertificateWithSoap ||
                    this.IncludeCertificateWithSoap != null &&
                    this.IncludeCertificateWithSoap.Equals(other.IncludeCertificateWithSoap)
                ) && 
                (
                    this.IncludeDocumentFields == other.IncludeDocumentFields ||
                    this.IncludeDocumentFields != null &&
                    this.IncludeDocumentFields.Equals(other.IncludeDocumentFields)
                ) && 
                (
                    this.IncludeDocuments == other.IncludeDocuments ||
                    this.IncludeDocuments != null &&
                    this.IncludeDocuments.Equals(other.IncludeDocuments)
                ) && 
                (
                    this.IncludeEnvelopeVoidReason == other.IncludeEnvelopeVoidReason ||
                    this.IncludeEnvelopeVoidReason != null &&
                    this.IncludeEnvelopeVoidReason.Equals(other.IncludeEnvelopeVoidReason)
                ) && 
                (
                    this.IncludeSenderAccountAsCustomField == other.IncludeSenderAccountAsCustomField ||
                    this.IncludeSenderAccountAsCustomField != null &&
                    this.IncludeSenderAccountAsCustomField.Equals(other.IncludeSenderAccountAsCustomField)
                ) && 
                (
                    this.IncludeTimeZone == other.IncludeTimeZone ||
                    this.IncludeTimeZone != null &&
                    this.IncludeTimeZone.Equals(other.IncludeTimeZone)
                ) && 
                (
                    this.LoggingEnabled == other.LoggingEnabled ||
                    this.LoggingEnabled != null &&
                    this.LoggingEnabled.Equals(other.LoggingEnabled)
                ) && 
                (
                    this.RecipientEvents == other.RecipientEvents ||
                    this.RecipientEvents != null &&
                    this.RecipientEvents.SequenceEqual(other.RecipientEvents)
                ) && 
                (
                    this.RequireAcknowledgment == other.RequireAcknowledgment ||
                    this.RequireAcknowledgment != null &&
                    this.RequireAcknowledgment.Equals(other.RequireAcknowledgment)
                ) && 
                (
                    this.SignMessageWithX509Cert == other.SignMessageWithX509Cert ||
                    this.SignMessageWithX509Cert != null &&
                    this.SignMessageWithX509Cert.Equals(other.SignMessageWithX509Cert)
                ) && 
                (
                    this.SoapNameSpace == other.SoapNameSpace ||
                    this.SoapNameSpace != null &&
                    this.SoapNameSpace.Equals(other.SoapNameSpace)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.UseSoapInterface == other.UseSoapInterface ||
                    this.UseSoapInterface != null &&
                    this.UseSoapInterface.Equals(other.UseSoapInterface)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EnvelopeEvents != null)
                    hash = hash * 59 + this.EnvelopeEvents.GetHashCode();
                if (this.IncludeCertificateOfCompletion != null)
                    hash = hash * 59 + this.IncludeCertificateOfCompletion.GetHashCode();
                if (this.IncludeCertificateWithSoap != null)
                    hash = hash * 59 + this.IncludeCertificateWithSoap.GetHashCode();
                if (this.IncludeDocumentFields != null)
                    hash = hash * 59 + this.IncludeDocumentFields.GetHashCode();
                if (this.IncludeDocuments != null)
                    hash = hash * 59 + this.IncludeDocuments.GetHashCode();
                if (this.IncludeEnvelopeVoidReason != null)
                    hash = hash * 59 + this.IncludeEnvelopeVoidReason.GetHashCode();
                if (this.IncludeSenderAccountAsCustomField != null)
                    hash = hash * 59 + this.IncludeSenderAccountAsCustomField.GetHashCode();
                if (this.IncludeTimeZone != null)
                    hash = hash * 59 + this.IncludeTimeZone.GetHashCode();
                if (this.LoggingEnabled != null)
                    hash = hash * 59 + this.LoggingEnabled.GetHashCode();
                if (this.RecipientEvents != null)
                    hash = hash * 59 + this.RecipientEvents.GetHashCode();
                if (this.RequireAcknowledgment != null)
                    hash = hash * 59 + this.RequireAcknowledgment.GetHashCode();
                if (this.SignMessageWithX509Cert != null)
                    hash = hash * 59 + this.SignMessageWithX509Cert.GetHashCode();
                if (this.SoapNameSpace != null)
                    hash = hash * 59 + this.SoapNameSpace.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.UseSoapInterface != null)
                    hash = hash * 59 + this.UseSoapInterface.GetHashCode();
                return hash;
            }
        }
    }

}
