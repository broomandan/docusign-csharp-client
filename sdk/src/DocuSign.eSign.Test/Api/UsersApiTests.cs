/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using DocuSign.eSign.Api;
using NUnit.Framework;

namespace DocuSign.eSign.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsInstanceOfType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test UserGetUser
        /// </summary>
        [Test]
        public void UserGetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //string additionalInfo = null;
            //string email = null;
            //var response = instance.UserGetUser(accountId, userId, additionalInfo, email);
            //Assert.IsInstanceOf<Users> (response, "response is Users");
        }
        
        /// <summary>
        /// Test UserProfileImageDeleteUserProfileImage
        /// </summary>
        [Test]
        public void UserProfileImageDeleteUserProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //instance.UserProfileImageDeleteUserProfileImage(accountId, userId);
            
        }
        
        /// <summary>
        /// Test UserProfileImageGetUserProfileImage
        /// </summary>
        [Test]
        public void UserProfileImageGetUserProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //string encoding = null;
            //var response = instance.UserProfileImageGetUserProfileImage(accountId, userId, encoding);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test UserProfileImagePutUserProfileImage
        /// </summary>
        [Test]
        public void UserProfileImagePutUserProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //instance.UserProfileImagePutUserProfileImage(accountId, userId);
            
        }
        
        /// <summary>
        /// Test UserPutUser
        /// </summary>
        [Test]
        public void UserPutUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //Users users = null;
            //var response = instance.UserPutUser(accountId, userId, users);
            //Assert.IsInstanceOf<Users> (response, "response is Users");
        }
        
        /// <summary>
        /// Test UserSettingsGetUserSettings
        /// </summary>
        [Test]
        public void UserSettingsGetUserSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //var response = instance.UserSettingsGetUserSettings(accountId, userId);
            //Assert.IsInstanceOf<UserSettingsInformation> (response, "response is UserSettingsInformation");
        }
        
        /// <summary>
        /// Test UserSettingsPutUserSettings
        /// </summary>
        [Test]
        public void UserSettingsPutUserSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //UserSettingsInformation userSettingsInformation = null;
            //instance.UserSettingsPutUserSettings(accountId, userId, userSettingsInformation);
            
        }
        
        /// <summary>
        /// Test UsersDeleteUsers
        /// </summary>
        [Test]
        public void UsersDeleteUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //UserInfoList userInfoList = null;
            //var response = instance.UsersDeleteUsers(accountId, userInfoList);
            //Assert.IsInstanceOf<GroupUsers> (response, "response is GroupUsers");
        }
        
        /// <summary>
        /// Test UsersGetUsers
        /// </summary>
        [Test]
        public void UsersGetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string additionalInfo = null;
            //string count = null;
            //string email = null;
            //string emailSubstring = null;
            //string groupId = null;
            //string includeUsersettingsForCsv = null;
            //string loginStatus = null;
            //string notGroupId = null;
            //string startPosition = null;
            //string status = null;
            //string userNameSubstring = null;
            //var response = instance.UsersGetUsers(accountId, additionalInfo, count, email, emailSubstring, groupId, includeUsersettingsForCsv, loginStatus, notGroupId, startPosition, status, userNameSubstring);
            //Assert.IsInstanceOf<UserInformationList> (response, "response is UserInformationList");
        }
        
        /// <summary>
        /// Test UsersPostUsers
        /// </summary>
        [Test]
        public void UsersPostUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //NewUsersDefinition newUsersDefinition = null;
            //var response = instance.UsersPostUsers(accountId, newUsersDefinition);
            //Assert.IsInstanceOf<NewUsersSummary> (response, "response is NewUsersSummary");
        }
        
        /// <summary>
        /// Test UsersPutUsers
        /// </summary>
        [Test]
        public void UsersPutUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //UserInformationList userInformationList = null;
            //var response = instance.UsersPutUsers(accountId, userInformationList);
            //Assert.IsInstanceOf<UserInformationList> (response, "response is UserInformationList");
        }
        
    }

}
