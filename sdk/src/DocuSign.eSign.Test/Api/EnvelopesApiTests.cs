/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using DocuSign.eSign.Api;
using NUnit.Framework;

namespace DocuSign.eSign.Test.Api
{
    /// <summary>
    ///  Class for testing EnvelopesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EnvelopesApiTests
    {
        private EnvelopesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EnvelopesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EnvelopesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EnvelopesApi
            //Assert.IsInstanceOfType(typeof(EnvelopesApi), instance, "instance is a EnvelopesApi");
        }

        
        /// <summary>
        /// Test AuditEventsGetAuditEvents
        /// </summary>
        [Test]
        public void AuditEventsGetAuditEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //var response = instance.AuditEventsGetAuditEvents(accountId, envelopeId);
            //Assert.IsInstanceOf<EnvelopeAuditEventResponse> (response, "response is EnvelopeAuditEventResponse");
        }
        
        /// <summary>
        /// Test EnvelopesGetEnvelope
        /// </summary>
        [Test]
        public void EnvelopesGetEnvelopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //string advancedUpdate = null;
            //string include = null;
            //var response = instance.EnvelopesGetEnvelope(accountId, envelopeId, advancedUpdate, include);
            //Assert.IsInstanceOf<Envelopes> (response, "response is Envelopes");
        }
        
        /// <summary>
        /// Test EnvelopesGetEnvelopes
        /// </summary>
        [Test]
        public void EnvelopesGetEnvelopesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string acStatus = null;
            //string block = null;
            //string count = null;
            //string customField = null;
            //string email = null;
            //string envelopeIds = null;
            //string exclude = null;
            //string folderIds = null;
            //string folderTypes = null;
            //string fromDate = null;
            //string fromToStatus = null;
            //string include = null;
            //string includePurgeInformation = null;
            //string intersectingFolderIds = null;
            //string order = null;
            //string orderBy = null;
            //string powerformids = null;
            //string searchText = null;
            //string startPosition = null;
            //string status = null;
            //string toDate = null;
            //string transactionIds = null;
            //string userFilter = null;
            //string userId = null;
            //string userName = null;
            //var response = instance.EnvelopesGetEnvelopes(accountId, acStatus, block, count, customField, email, envelopeIds, exclude, folderIds, folderTypes, fromDate, fromToStatus, include, includePurgeInformation, intersectingFolderIds, order, orderBy, powerformids, searchText, startPosition, status, toDate, transactionIds, userFilter, userId, userName);
            //Assert.IsInstanceOf<EnvelopesInformation> (response, "response is EnvelopesInformation");
        }
        
        /// <summary>
        /// Test EnvelopesPostEnvelopes
        /// </summary>
        [Test]
        public void EnvelopesPostEnvelopesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string cdseMode = null;
            //string completedDocumentsOnly = null;
            //string mergeRolesOnDraft = null;
            //EnvelopeDefinition envelopeDefinition = null;
            //var response = instance.EnvelopesPostEnvelopes(accountId, cdseMode, completedDocumentsOnly, mergeRolesOnDraft, envelopeDefinition);
            //Assert.IsInstanceOf<EnvelopeSummary> (response, "response is EnvelopeSummary");
        }
        
        /// <summary>
        /// Test EnvelopesPutEnvelope
        /// </summary>
        [Test]
        public void EnvelopesPutEnvelopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //string advancedUpdate = null;
            //string resendEnvelope = null;
            //Envelopes envelopes = null;
            //var response = instance.EnvelopesPutEnvelope(accountId, envelopeId, advancedUpdate, resendEnvelope, envelopes);
            //Assert.IsInstanceOf<EnvelopeUpdateSummary> (response, "response is EnvelopeUpdateSummary");
        }
        
        /// <summary>
        /// Test EnvelopesPutStatus
        /// </summary>
        [Test]
        public void EnvelopesPutStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string email = null;
            //string fromDate = null;
            //string startPosition = null;
            //string toDate = null;
            //EnvelopeIdsRequest envelopeIdsRequest = null;
            //var response = instance.EnvelopesPutStatus(accountId, email, fromDate, startPosition, toDate, envelopeIdsRequest);
            //Assert.IsInstanceOf<EnvelopesInformation> (response, "response is EnvelopesInformation");
        }
        
        /// <summary>
        /// Test NotificationGetEnvelopesEnvelopeIdNotification
        /// </summary>
        [Test]
        public void NotificationGetEnvelopesEnvelopeIdNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //var response = instance.NotificationGetEnvelopesEnvelopeIdNotification(accountId, envelopeId);
            //Assert.IsInstanceOf<Notification> (response, "response is Notification");
        }
        
        /// <summary>
        /// Test NotificationPutEnvelopesEnvelopeIdNotification
        /// </summary>
        [Test]
        public void NotificationPutEnvelopesEnvelopeIdNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //EnvelopeNotificationRequest envelopeNotificationRequest = null;
            //var response = instance.NotificationPutEnvelopesEnvelopeIdNotification(accountId, envelopeId, envelopeNotificationRequest);
            //Assert.IsInstanceOf<Notification> (response, "response is Notification");
        }
        
        /// <summary>
        /// Test PagesDeletePage
        /// </summary>
        [Test]
        public void PagesDeletePageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string documentId = null;
            //string envelopeId = null;
            //string pageNumber = null;
            //instance.PagesDeletePage(accountId, documentId, envelopeId, pageNumber);
            
        }
        
        /// <summary>
        /// Test PagesGetPageImage
        /// </summary>
        [Test]
        public void PagesGetPageImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string documentId = null;
            //string envelopeId = null;
            //string pageNumber = null;
            //string dpi = null;
            //string maxHeight = null;
            //string maxWidth = null;
            //string showChanges = null;
            //var response = instance.PagesGetPageImage(accountId, documentId, envelopeId, pageNumber, dpi, maxHeight, maxWidth, showChanges);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test PagesGetPageImages
        /// </summary>
        [Test]
        public void PagesGetPageImagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string documentId = null;
            //string envelopeId = null;
            //string count = null;
            //string dpi = null;
            //string maxHeight = null;
            //string maxWidth = null;
            //string nocache = null;
            //string showChanges = null;
            //string startPosition = null;
            //var response = instance.PagesGetPageImages(accountId, documentId, envelopeId, count, dpi, maxHeight, maxWidth, nocache, showChanges, startPosition);
            //Assert.IsInstanceOf<PageImages> (response, "response is PageImages");
        }
        
        /// <summary>
        /// Test PagesPutPageImage
        /// </summary>
        [Test]
        public void PagesPutPageImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string documentId = null;
            //string envelopeId = null;
            //string pageNumber = null;
            //PageRequest pageRequest = null;
            //instance.PagesPutPageImage(accountId, documentId, envelopeId, pageNumber, pageRequest);
            
        }
        
        /// <summary>
        /// Test RecipientsGetRecipientInitialsImage
        /// </summary>
        [Test]
        public void RecipientsGetRecipientInitialsImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //string recipientId = null;
            //string includeChrome = null;
            //var response = instance.RecipientsGetRecipientInitialsImage(accountId, envelopeId, recipientId, includeChrome);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test RecipientsGetRecipientSignature
        /// </summary>
        [Test]
        public void RecipientsGetRecipientSignatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //string recipientId = null;
            //var response = instance.RecipientsGetRecipientSignature(accountId, envelopeId, recipientId);
            //Assert.IsInstanceOf<UserSignatures> (response, "response is UserSignatures");
        }
        
        /// <summary>
        /// Test RecipientsGetRecipientSignatureImage
        /// </summary>
        [Test]
        public void RecipientsGetRecipientSignatureImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //string recipientId = null;
            //string includeChrome = null;
            //var response = instance.RecipientsGetRecipientSignatureImage(accountId, envelopeId, recipientId, includeChrome);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test RecipientsPutRecipientInitialsImage
        /// </summary>
        [Test]
        public void RecipientsPutRecipientInitialsImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //string recipientId = null;
            //instance.RecipientsPutRecipientInitialsImage(accountId, envelopeId, recipientId);
            
        }
        
        /// <summary>
        /// Test RecipientsPutRecipientSignatureImage
        /// </summary>
        [Test]
        public void RecipientsPutRecipientSignatureImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string envelopeId = null;
            //string recipientId = null;
            //instance.RecipientsPutRecipientSignatureImage(accountId, envelopeId, recipientId);
            
        }
        
    }

}
