/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using DocuSign.eSign.Api;
using NUnit.Framework;

namespace DocuSign.eSign.Test.Api
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountsApiTests
    {
        private AccountsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountsApi
            //Assert.IsInstanceOfType(typeof(AccountsApi), instance, "instance is a AccountsApi");
        }

        
        /// <summary>
        /// Test AccountsDeleteAccount
        /// </summary>
        [Test]
        public void AccountsDeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //instance.AccountsDeleteAccount(accountId);
            
        }
        
        /// <summary>
        /// Test AccountsGetAccount
        /// </summary>
        [Test]
        public void AccountsGetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string includeAccountSettings = null;
            //var response = instance.AccountsGetAccount(accountId, includeAccountSettings);
            //Assert.IsInstanceOf<Accounts> (response, "response is Accounts");
        }
        
        /// <summary>
        /// Test AccountsGetProvisioning
        /// </summary>
        [Test]
        public void AccountsGetProvisioningTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AccountsGetProvisioning();
            //Assert.IsInstanceOf<ProvisioningInformation> (response, "response is ProvisioningInformation");
        }
        
        /// <summary>
        /// Test AccountsPostAccounts
        /// </summary>
        [Test]
        public void AccountsPostAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string previewBillingPlan = null;
            //NewAccountDefinition newAccountDefinition = null;
            //var response = instance.AccountsPostAccounts(previewBillingPlan, newAccountDefinition);
            //Assert.IsInstanceOf<NewAccountSummary> (response, "response is NewAccountSummary");
        }
        
        /// <summary>
        /// Test BillingChargesGetAccountBillingCharges
        /// </summary>
        [Test]
        public void BillingChargesGetAccountBillingChargesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string includeCharges = null;
            //var response = instance.BillingChargesGetAccountBillingCharges(accountId, includeCharges);
            //Assert.IsInstanceOf<BillingChargeResponse> (response, "response is BillingChargeResponse");
        }
        
        /// <summary>
        /// Test CaptiveRecipientsDeleteCaptiveRecipientsPart
        /// </summary>
        [Test]
        public void CaptiveRecipientsDeleteCaptiveRecipientsPartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string recipientPart = null;
            //CaptiveRecipientInformation captiveRecipientInformation = null;
            //var response = instance.CaptiveRecipientsDeleteCaptiveRecipientsPart(accountId, recipientPart, captiveRecipientInformation);
            //Assert.IsInstanceOf<CaptiveRecipientInformation> (response, "response is CaptiveRecipientInformation");
        }
        
        /// <summary>
        /// Test RecipientNamesGetRecipientNames
        /// </summary>
        [Test]
        public void RecipientNamesGetRecipientNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string email = null;
            //var response = instance.RecipientNamesGetRecipientNames(accountId, email);
            //Assert.IsInstanceOf<RecipientNamesResponse> (response, "response is RecipientNamesResponse");
        }
        
        /// <summary>
        /// Test SettingsGetSettings
        /// </summary>
        [Test]
        public void SettingsGetSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.SettingsGetSettings(accountId);
            //Assert.IsInstanceOf<AccountSettingsInformation> (response, "response is AccountSettingsInformation");
        }
        
        /// <summary>
        /// Test SettingsPutSettings
        /// </summary>
        [Test]
        public void SettingsPutSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //AccountSettingsInformation accountSettingsInformation = null;
            //instance.SettingsPutSettings(accountId, accountSettingsInformation);
            
        }
        
        /// <summary>
        /// Test SharedAccessGetSharedAccess
        /// </summary>
        [Test]
        public void SharedAccessGetSharedAccessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string count = null;
            //string envelopesNotSharedUserStatus = null;
            //string folderIds = null;
            //string itemType = null;
            //string searchText = null;
            //string shared = null;
            //string startPosition = null;
            //string userIds = null;
            //var response = instance.SharedAccessGetSharedAccess(accountId, count, envelopesNotSharedUserStatus, folderIds, itemType, searchText, shared, startPosition, userIds);
            //Assert.IsInstanceOf<AccountSharedAccess> (response, "response is AccountSharedAccess");
        }
        
        /// <summary>
        /// Test SharedAccessPutSharedAccess
        /// </summary>
        [Test]
        public void SharedAccessPutSharedAccessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string itemType = null;
            //string userIds = null;
            //AccountSharedAccess accountSharedAccess = null;
            //var response = instance.SharedAccessPutSharedAccess(accountId, itemType, userIds, accountSharedAccess);
            //Assert.IsInstanceOf<AccountSharedAccess> (response, "response is AccountSharedAccess");
        }
        
        /// <summary>
        /// Test SupportedLanguagesGetSupportedLanguages
        /// </summary>
        [Test]
        public void SupportedLanguagesGetSupportedLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.SupportedLanguagesGetSupportedLanguages(accountId);
            //Assert.IsInstanceOf<SupportedLanguages> (response, "response is SupportedLanguages");
        }
        
        /// <summary>
        /// Test UnsupportedFileTypesGetUnsupportedFileTypes
        /// </summary>
        [Test]
        public void UnsupportedFileTypesGetUnsupportedFileTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //var response = instance.UnsupportedFileTypesGetUnsupportedFileTypes(accountId);
            //Assert.IsInstanceOf<FileTypeList> (response, "response is FileTypeList");
        }
        
    }

}
