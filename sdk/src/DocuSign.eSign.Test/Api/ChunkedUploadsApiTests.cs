/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using DocuSign.eSign.Api;
using NUnit.Framework;

namespace DocuSign.eSign.Test.Api
{
    /// <summary>
    ///  Class for testing ChunkedUploadsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ChunkedUploadsApiTests
    {
        private ChunkedUploadsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ChunkedUploadsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ChunkedUploadsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChunkedUploadsApi
            //Assert.IsInstanceOfType(typeof(ChunkedUploadsApi), instance, "instance is a ChunkedUploadsApi");
        }

        
        /// <summary>
        /// Test ChunkedUploadsDeleteChunkedUpload
        /// </summary>
        [Test]
        public void ChunkedUploadsDeleteChunkedUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string chunkedUploadId = null;
            //var response = instance.ChunkedUploadsDeleteChunkedUpload(accountId, chunkedUploadId);
            //Assert.IsInstanceOf<ChunkedUploads> (response, "response is ChunkedUploads");
        }
        
        /// <summary>
        /// Test ChunkedUploadsGetChunkedUpload
        /// </summary>
        [Test]
        public void ChunkedUploadsGetChunkedUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string chunkedUploadId = null;
            //string include = null;
            //var response = instance.ChunkedUploadsGetChunkedUpload(accountId, chunkedUploadId, include);
            //Assert.IsInstanceOf<ChunkedUploads> (response, "response is ChunkedUploads");
        }
        
        /// <summary>
        /// Test ChunkedUploadsPostChunkedUploads
        /// </summary>
        [Test]
        public void ChunkedUploadsPostChunkedUploadsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //ChunkedUploadRequest chunkedUploadRequest = null;
            //var response = instance.ChunkedUploadsPostChunkedUploads(accountId, chunkedUploadRequest);
            //Assert.IsInstanceOf<ChunkedUploads> (response, "response is ChunkedUploads");
        }
        
        /// <summary>
        /// Test ChunkedUploadsPutChunkedUploadPart
        /// </summary>
        [Test]
        public void ChunkedUploadsPutChunkedUploadPartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string chunkedUploadId = null;
            //string chunkedUploadPartSeq = null;
            //ChunkedUploadRequest chunkedUploadRequest = null;
            //var response = instance.ChunkedUploadsPutChunkedUploadPart(accountId, chunkedUploadId, chunkedUploadPartSeq, chunkedUploadRequest);
            //Assert.IsInstanceOf<ChunkedUploads> (response, "response is ChunkedUploads");
        }
        
        /// <summary>
        /// Test ChunkedUploadsPutChunkedUploads
        /// </summary>
        [Test]
        public void ChunkedUploadsPutChunkedUploadsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string chunkedUploadId = null;
            //string action = null;
            //var response = instance.ChunkedUploadsPutChunkedUploads(accountId, chunkedUploadId, action);
            //Assert.IsInstanceOf<ChunkedUploads> (response, "response is ChunkedUploads");
        }
        
    }

}
