/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using DocuSign.eSign.Api;
using NUnit.Framework;

namespace DocuSign.eSign.Test.Api
{
    /// <summary>
    ///  Class for testing UserSignaturesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserSignaturesApiTests
    {
        private UserSignaturesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserSignaturesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserSignaturesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserSignaturesApi
            //Assert.IsInstanceOfType(typeof(UserSignaturesApi), instance, "instance is a UserSignaturesApi");
        }

        
        /// <summary>
        /// Test UserSignaturesDeleteUserSignature
        /// </summary>
        [Test]
        public void UserSignaturesDeleteUserSignatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string signatureId = null;
            //string userId = null;
            //instance.UserSignaturesDeleteUserSignature(accountId, signatureId, userId);
            
        }
        
        /// <summary>
        /// Test UserSignaturesDeleteUserSignatureImage
        /// </summary>
        [Test]
        public void UserSignaturesDeleteUserSignatureImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string imageType = null;
            //string signatureId = null;
            //string userId = null;
            //var response = instance.UserSignaturesDeleteUserSignatureImage(accountId, imageType, signatureId, userId);
            //Assert.IsInstanceOf<UserSignatures> (response, "response is UserSignatures");
        }
        
        /// <summary>
        /// Test UserSignaturesGetUserSignature
        /// </summary>
        [Test]
        public void UserSignaturesGetUserSignatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string signatureId = null;
            //string userId = null;
            //var response = instance.UserSignaturesGetUserSignature(accountId, signatureId, userId);
            //Assert.IsInstanceOf<UserSignatures> (response, "response is UserSignatures");
        }
        
        /// <summary>
        /// Test UserSignaturesGetUserSignatureImage
        /// </summary>
        [Test]
        public void UserSignaturesGetUserSignatureImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string imageType = null;
            //string signatureId = null;
            //string userId = null;
            //string includeChrome = null;
            //var response = instance.UserSignaturesGetUserSignatureImage(accountId, imageType, signatureId, userId, includeChrome);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test UserSignaturesGetUserSignatures
        /// </summary>
        [Test]
        public void UserSignaturesGetUserSignaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //string stampType = null;
            //var response = instance.UserSignaturesGetUserSignatures(accountId, userId, stampType);
            //Assert.IsInstanceOf<UserSignaturesInformation> (response, "response is UserSignaturesInformation");
        }
        
        /// <summary>
        /// Test UserSignaturesPostUserSignatures
        /// </summary>
        [Test]
        public void UserSignaturesPostUserSignaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //UserSignaturesInformation userSignaturesInformation = null;
            //var response = instance.UserSignaturesPostUserSignatures(accountId, userId, userSignaturesInformation);
            //Assert.IsInstanceOf<UserSignaturesInformation> (response, "response is UserSignaturesInformation");
        }
        
        /// <summary>
        /// Test UserSignaturesPutUserSignature
        /// </summary>
        [Test]
        public void UserSignaturesPutUserSignatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string userId = null;
            //UserSignaturesInformation userSignaturesInformation = null;
            //var response = instance.UserSignaturesPutUserSignature(accountId, userId, userSignaturesInformation);
            //Assert.IsInstanceOf<UserSignaturesInformation> (response, "response is UserSignaturesInformation");
        }
        
        /// <summary>
        /// Test UserSignaturesPutUserSignatureById
        /// </summary>
        [Test]
        public void UserSignaturesPutUserSignatureByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string signatureId = null;
            //string userId = null;
            //string closeExistingSignature = null;
            //UserSignatureDefinition userSignatureDefinition = null;
            //var response = instance.UserSignaturesPutUserSignatureById(accountId, signatureId, userId, closeExistingSignature, userSignatureDefinition);
            //Assert.IsInstanceOf<UserSignatures> (response, "response is UserSignatures");
        }
        
        /// <summary>
        /// Test UserSignaturesPutUserSignatureImage
        /// </summary>
        [Test]
        public void UserSignaturesPutUserSignatureImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string imageType = null;
            //string signatureId = null;
            //string userId = null;
            //var response = instance.UserSignaturesPutUserSignatureImage(accountId, imageType, signatureId, userId);
            //Assert.IsInstanceOf<UserSignatures> (response, "response is UserSignatures");
        }
        
    }

}
