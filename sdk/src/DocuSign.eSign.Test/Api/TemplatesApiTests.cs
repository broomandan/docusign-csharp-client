/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using DocuSign.eSign.Api;
using NUnit.Framework;

namespace DocuSign.eSign.Test.Api
{
    /// <summary>
    ///  Class for testing TemplatesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TemplatesApiTests
    {
        private TemplatesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TemplatesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TemplatesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TemplatesApi
            //Assert.IsInstanceOfType(typeof(TemplatesApi), instance, "instance is a TemplatesApi");
        }

        
        /// <summary>
        /// Test NotificationGetTemplatesTemplateIdNotification
        /// </summary>
        [Test]
        public void NotificationGetTemplatesTemplateIdNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //var response = instance.NotificationGetTemplatesTemplateIdNotification(accountId, templateId);
            //Assert.IsInstanceOf<Notification> (response, "response is Notification");
        }
        
        /// <summary>
        /// Test NotificationPutTemplatesTemplateIdNotification
        /// </summary>
        [Test]
        public void NotificationPutTemplatesTemplateIdNotificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //TemplateNotificationRequest templateNotificationRequest = null;
            //var response = instance.NotificationPutTemplatesTemplateIdNotification(accountId, templateId, templateNotificationRequest);
            //Assert.IsInstanceOf<Notification> (response, "response is Notification");
        }
        
        /// <summary>
        /// Test PagesDeleteTemplatePage
        /// </summary>
        [Test]
        public void PagesDeleteTemplatePageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string documentId = null;
            //string pageNumber = null;
            //string templateId = null;
            //PageRequest pageRequest = null;
            //instance.PagesDeleteTemplatePage(accountId, documentId, pageNumber, templateId, pageRequest);
            
        }
        
        /// <summary>
        /// Test PagesGetTemplatePageImage
        /// </summary>
        [Test]
        public void PagesGetTemplatePageImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string documentId = null;
            //string pageNumber = null;
            //string templateId = null;
            //string dpi = null;
            //string maxHeight = null;
            //string maxWidth = null;
            //string showChanges = null;
            //var response = instance.PagesGetTemplatePageImage(accountId, documentId, pageNumber, templateId, dpi, maxHeight, maxWidth, showChanges);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test PagesGetTemplatePageImages
        /// </summary>
        [Test]
        public void PagesGetTemplatePageImagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string documentId = null;
            //string templateId = null;
            //string count = null;
            //string dpi = null;
            //string maxHeight = null;
            //string maxWidth = null;
            //string nocache = null;
            //string showChanges = null;
            //string startPosition = null;
            //var response = instance.PagesGetTemplatePageImages(accountId, documentId, templateId, count, dpi, maxHeight, maxWidth, nocache, showChanges, startPosition);
            //Assert.IsInstanceOf<PageImages> (response, "response is PageImages");
        }
        
        /// <summary>
        /// Test PagesPutTemplatePageImage
        /// </summary>
        [Test]
        public void PagesPutTemplatePageImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string documentId = null;
            //string pageNumber = null;
            //string templateId = null;
            //PageRequest pageRequest = null;
            //instance.PagesPutTemplatePageImage(accountId, documentId, pageNumber, templateId, pageRequest);
            
        }
        
        /// <summary>
        /// Test TemplatesDeleteTemplatePart
        /// </summary>
        [Test]
        public void TemplatesDeleteTemplatePartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //string templatePart = null;
            //Groups groups = null;
            //var response = instance.TemplatesDeleteTemplatePart(accountId, templateId, templatePart, groups);
            //Assert.IsInstanceOf<Groups> (response, "response is Groups");
        }
        
        /// <summary>
        /// Test TemplatesGetTemplate
        /// </summary>
        [Test]
        public void TemplatesGetTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //string include = null;
            //var response = instance.TemplatesGetTemplate(accountId, templateId, include);
            //Assert.IsInstanceOf<Templates> (response, "response is Templates");
        }
        
        /// <summary>
        /// Test TemplatesGetTemplates
        /// </summary>
        [Test]
        public void TemplatesGetTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string count = null;
            //string folder = null;
            //string folderIds = null;
            //string folderTypes = null;
            //string fromDate = null;
            //string include = null;
            //string order = null;
            //string orderBy = null;
            //string searchText = null;
            //string shared = null;
            //string sharedByMe = null;
            //string startPosition = null;
            //string toDate = null;
            //string usedFromDate = null;
            //string usedToDate = null;
            //string userFilter = null;
            //string userId = null;
            //var response = instance.TemplatesGetTemplates(accountId, count, folder, folderIds, folderTypes, fromDate, include, order, orderBy, searchText, shared, sharedByMe, startPosition, toDate, usedFromDate, usedToDate, userFilter, userId);
            //Assert.IsInstanceOf<EnvelopeTemplateResults> (response, "response is EnvelopeTemplateResults");
        }
        
        /// <summary>
        /// Test TemplatesPostTemplates
        /// </summary>
        [Test]
        public void TemplatesPostTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //Templates templates = null;
            //var response = instance.TemplatesPostTemplates(accountId, templates);
            //Assert.IsInstanceOf<TemplateSummary> (response, "response is TemplateSummary");
        }
        
        /// <summary>
        /// Test TemplatesPutTemplate
        /// </summary>
        [Test]
        public void TemplatesPutTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //Templates templates = null;
            //var response = instance.TemplatesPutTemplate(accountId, templateId, templates);
            //Assert.IsInstanceOf<TemplateUpdateSummary> (response, "response is TemplateUpdateSummary");
        }
        
        /// <summary>
        /// Test TemplatesPutTemplatePart
        /// </summary>
        [Test]
        public void TemplatesPutTemplatePartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string templateId = null;
            //string templatePart = null;
            //Groups groups = null;
            //var response = instance.TemplatesPutTemplatePart(accountId, templateId, templatePart, groups);
            //Assert.IsInstanceOf<Groups> (response, "response is Groups");
        }
        
    }

}
